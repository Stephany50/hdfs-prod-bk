
flux.yarn.queue = "compute"
flux.log-level = "ERROR"

flux.input-type = "HIVE"
flux.output-type = "HIVE"

flux.spark.setup-conf = []

flux.setup-conf = []

flux.spark.setup-conf += {"key": "spark.sql.crossJoin.enabled", "value": "true"}
flux.spark.setup-conf += {"key": "hive.exec.dynamic.partition.mode","value": "nonstrict"}
flux.spark.setup-conf += {"key": "spark.sql.files.ignoreCorruptFiles","value": "true"}

flux.name = "LOAD_SPARK_FT_REPORTING_ORANGE_BONUS_REVAMP"

flux.has-date-processing = true

flux.slice-value-type = "DAILY"
flux.slice-begin-value = -20
flux.slice-end-value = -1
flux.slice-step-value = 1
flux.slice-begin-value-offset = 0
flux.slice-end-value-offset = 0
flux.slice-has-state-query=true
flux.slice-state-query="""
select
    if(count(*)=20,'OK','NOK')
from dim.dt_dates
where datecode between date_sub(current_date, 20) and date_sub(current_date, 1)
    and datecode in (select distinct event_date from mon.spark_ft_reporting_orange_bonus_revamp where event_date between date_sub(current_date, 20) and date_sub(current_date, 1))
"""
flux.slice-has-filter-query = true
flux.slice-filter-query = """
select
    date_format(datecode,'yyyy-MM-dd')
from dim.dt_dates
where datecode between date_sub(current_date, 20) and date_sub(current_date, 1)
    and datecode in (select distinct event_date from mon.spark_ft_reporting_orange_bonus_revamp where event_date between date_sub(current_date, 20) and date_sub(current_date, 1))
"""
flux.slice-date-format = "yyyy-MM-dd"

flux.has-pre-queries = true
flux.has-exec-queries = true
flux.has-post-queries = false

flux.inline.pre-exec-queries += """
SELECT IF(
    T_1.FT_EXISTS = 0
    AND T_2.FT_EXISTS > datediff('###SLICE_VALUE###', substr('###SLICE_VALUE###', 1, 7)||'-01')
    , 'OK'
    , 'NOK'
)
FROM
(SELECT COUNT(*) FT_EXISTS FROM mon.spark_ft_reporting_orange_bonus_revamp WHERE EVENT_DATE='###SLICE_VALUE###') T_1,
(SELECT COUNT(distinct transaction_date) FT_EXISTS FROM mon.spark_ft_subscription where transaction_date between substr('###SLICE_VALUE###', 1, 7)||'-01' and '###SLICE_VALUE###') T_2
"""

flux.inline.exec-queries += """
insert into mon.spark_ft_reporting_orange_bonus_revamp
select
    type_orange_bonus,
    type_validite,
    type_souscription,
    kpi_name,
    case
        when kpi_name = 'total_takers_count' then count(distinct case when transaction_date = '###SLICE_VALUE###' then msisdn end)
        when kpi_name = 'upgrader_count' then count(distinct case when transaction_date = '###SLICE_VALUE###' and upper(trim(a.bdle_name)) like '%UPGRADE%' then msisdn end)
        when kpi_name = 'upgrader_1_count' then count(distinct case when transaction_date = '###SLICE_VALUE###' and upper(trim(a.bdle_name)) like '%UPGRADE 1%' then msisdn end)
        when kpi_name = 'upgrader_2_count' then count(distinct case when transaction_date = '###SLICE_VALUE###' and upper(trim(a.bdle_name)) like '%UPGRADE 2%' then msisdn end)
        when kpi_name = 'total_subscription_sum' then sum(case when transaction_date = '###SLICE_VALUE###' then 1 else 0 end)
        when kpi_name = 'upgrader_1_subscription_sum' then sum(case when transaction_date = '###SLICE_VALUE###' and upper(trim(a.bdle_name)) like '%UPGRADE 1%' then 1 else 0 end)
        when kpi_name = 'upgrader_2_subscription_sum' then sum(case when transaction_date = '###SLICE_VALUE###' and upper(trim(a.bdle_name)) like '%UPGRADE 2%' then 1 else 0 end)
        when kpi_name = 'upgrader_subscription_sum' then sum(case when transaction_date = '###SLICE_VALUE###' and upper(trim(a.bdle_name)) like '%UPGRADE%' then 1 else 0 end)
        when kpi_name = 'total_revenue' then sum(case when transaction_date = '###SLICE_VALUE###' then nvl(a.bdle_cost, b.bdle_cost) else 0 end)
        when kpi_name = 'voice_revenue' then sum(case when transaction_date = '###SLICE_VALUE###' then nvl(a.bdle_cost, b.bdle_cost) * nvl(coeff_voix, 0) else 0 end)
        when kpi_name = 'data_revenue' then sum(case when transaction_date = '###SLICE_VALUE###' then nvl(a.bdle_cost, b.bdle_cost) * nvl(coeff_data, 0) else 0 end)
        when kpi_name = 'upgrade_total_revenue' then sum(case when transaction_date = '###SLICE_VALUE###' and upper(trim(a.bdle_name)) like '%UPGRADE%' then nvl(a.bdle_cost, b.bdle_cost) else 0 end)
        when kpi_name = 'upgrade_voice_revenue' then sum(case when transaction_date = '###SLICE_VALUE###' and upper(trim(a.bdle_name)) like '%UPGRADE%' then nvl(a.bdle_cost, b.bdle_cost) * nvl(coeff_voix, 0) else 0 end)
        when kpi_name = 'upgrade_data_revenue' then sum(case when transaction_date = '###SLICE_VALUE###' and upper(trim(a.bdle_name)) like '%UPGRADE%' then nvl(a.bdle_cost, b.bdle_cost) * nvl(coeff_data, 0) else 0 end)
        when kpi_name = 'upgrade_1_total_revenue' then sum(case when transaction_date = '###SLICE_VALUE###' and upper(trim(a.bdle_name)) like '%UPGRADE 1%' then nvl(a.bdle_cost, b.bdle_cost) else 0 end)
        when kpi_name = 'upgrade_1_voice_revenue' then sum(case when transaction_date = '###SLICE_VALUE###' and upper(trim(a.bdle_name)) like '%UPGRADE 1%' then nvl(a.bdle_cost, b.bdle_cost) * nvl(coeff_voix, 0) else 0 end)
        when kpi_name = 'upgrade_1_data_revenue' then sum(case when transaction_date = '###SLICE_VALUE###' and upper(trim(a.bdle_name)) like '%UPGRADE 1%' then nvl(a.bdle_cost, b.bdle_cost) * nvl(coeff_data, 0) else 0 end)
        when kpi_name = 'upgrade_2_total_revenue' then sum(case when transaction_date = '###SLICE_VALUE###' and upper(trim(a.bdle_name)) like '%UPGRADE 2%' then nvl(a.bdle_cost, b.bdle_cost) else 0 end)
        when kpi_name = 'upgrade_2_voice_revenue' then sum(case when transaction_date = '###SLICE_VALUE###' and upper(trim(a.bdle_name)) like '%UPGRADE 2%' then nvl(a.bdle_cost, b.bdle_cost) * nvl(coeff_voix, 0) else 0 end)
        when kpi_name = 'upgrade_2_data_revenue' then sum(case when transaction_date = '###SLICE_VALUE###' and upper(trim(a.bdle_name)) like '%UPGRADE 2%' then nvl(a.bdle_cost, b.bdle_cost) * nvl(coeff_data, 0) else 0 end)
        when kpi_name = 'total_mtd_takers_count' then count(distinct msisdn)
        when kpi_name = 'mtd_upgrader_count' then count(distinct case when upper(trim(a.bdle_name)) like '%UPGRADE%' then msisdn end)
        when kpi_name = 'mtd_upgrader_1_count' then count(distinct case when upper(trim(a.bdle_name)) like '%UPGRADE 1%' then msisdn end)
        when kpi_name = 'mtd_upgrader_2_count' then count(distinct case when upper(trim(a.bdle_name)) like '%UPGRADE 2%' then msisdn end)
    end kpi_value,
    current_timestamp insert_date,
    '###SLICE_VALUE###' event_date
from
(
    select 'total_takers_count' as kpi_name union
    --select 'migrant_takers_count' as kpi_name union
    --select 'non_migrant_takers_count' as kpi_name union
    select 'upgrader_count' as kpi_name union
    select 'upgrader_1_count' as kpi_name union
    select 'upgrader_2_count' as kpi_name union
    select 'total_subscription_sum' as kpi_name union
    --select 'migrant_subscription_sum' as kpi_name union
    --select 'non_migrant_subscription_sum' as kpi_name union
    select 'upgrader_1_subscription_sum' as kpi_name union
    select 'upgrader_2_subscription_sum' as kpi_name union
    select 'upgrader_subscription_sum' as kpi_name union
    select 'total_revenue' as kpi_name union
    select 'voice_revenue' as kpi_name union
    select 'data_revenue' as kpi_name union
    --select 'migrant_total_revenue' as kpi_name union
    --select 'migrant_voice_revenue' as kpi_name union
    --select 'migrant_data_revenue' as kpi_name union
    --select 'non_migrant_total_revenue' as kpi_name union
    --select 'non_migrant_voice_revenue' as kpi_name union
    --select 'non_migrant_data_revenue' as kpi_name union
    select 'upgrade_total_revenue' as kpi_name union
    select 'upgrade_voice_revenue' as kpi_name union
    select 'upgrade_data_revenue' as kpi_name union
    select 'upgrade_1_total_revenue' as kpi_name union
    select 'upgrade_1_voice_revenue' as kpi_name union
    select 'upgrade_1_data_revenue' as kpi_name union
    select 'upgrade_2_total_revenue' as kpi_name union
    select 'upgrade_2_voice_revenue' as kpi_name union
    select 'upgrade_2_data_revenue' as kpi_name union
    select 'total_mtd_takers_count' as kpi_name union
    --select 'mtd_migrant_takers_count' as kpi_name union
    --select 'mtd_non_migrant_takers_count' as kpi_name union
    select 'mtd_upgrader_count' as kpi_name union
    select 'mtd_upgrader_1_count' as kpi_name union
    select 'mtd_upgrader_2_count' as kpi_name
) b
cross join
(
    select
        bdle_name,
        type_forfait type_orange_bonus, -- voix, sms, data, combo ...
        (
            case
                when validite=1 then 'JOUR'
                when validite=7 then 'HEBDO'
                when validite=30 then 'MOIS'
                when validite=3 then 'MI-HEBDO'
                else 'OTHER'
            end
        ) type_validite,
        prix bdle_cost,
        nvl(coeff_data, 0) + nvl(coeff_roaming_data, 0) coeff_data,
        nvl(coeff_onnet, 0) + nvl(coeff_offnet, 0) + nvl(coeff_inter, 0) + nvl(coeff_roaming_voix, 0) coeff_voix
    from dim.dt_cbm_ref_souscription_price
    where upper(trim(type_ocm)) like '%OB%'
) a
left join
(
    select
        served_party_msisdn as msisdn,
        subscription_service_details as bdle_name,
        rated_amount as bdle_cost,
        (
            case
                when cast(subscription_channel as int) in (32) then 'ussd_wallet_om'
                when cast(subscription_channel as int) in (9) then 'ussd_main_balance'
                when subscription_channel = '__channel_my_orange_main_balance__' then 'myorange_main_balance'
                when subscription_channel = '__channel_my_orange_wallet_om__' then 'myorange_wallet_om'
            end
        ) type_souscription,
        transaction_date
    from mon.spark_ft_subscription
    where transaction_date between substr('###SLICE_VALUE###', 1, 7)||'-01' and '###SLICE_VALUE###'
) b on upper(trim(a.bdle_name)) = upper(trim(b.bdle_name))
group by type_orange_bonus, type_validite, type_souscription, kpi_name
"""
