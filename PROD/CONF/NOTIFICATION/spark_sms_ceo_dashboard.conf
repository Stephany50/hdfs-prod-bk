flux.yarn.queue = "compute"
flux.log-level = "ERROR"


flux.spark.setup-conf += {"key": "spark.sql.crossJoin.enabled", "value": "true"}
flux.spark.setup-conf += {"key": "hive.exec.dynamic.partition.mode","value": "nonstrict"}
flux.spark.setup-conf += {"key": "spark.sql.files.ignoreCorruptFiles","value": "true"}

flux.name = "COMPUTE_SPARK_SMS_CEO_DASHBOARD"

flux.has-date-processing = true

flux.slice-value-type = "DAILY"
flux.slice-begin-value = -7
flux.slice-end-value = -1
flux.slice-step-value = 1
flux.slice-begin-value-offset = 0
flux.slice-end-value-offset = 0
flux.slice-has-state-query=true
flux.slice-state-query="""
select
    if(count(*)=7,'OK','NOK')
from dim.dt_dates
where datecode between date_sub(current_date, 7) and date_sub(current_date, 1)
    and datecode in (
        select distinct event_date from mon.SPARK_SMS_CEO_DASHBOARD where event_date between date_sub(current_date, 7) and date_sub(current_date, 1)
        union
        select distinct event_date from mon.SPARK_SMS_CEO_DASHBOARD_backup where event_date between date_sub(current_date, 7) and date_sub(current_date, 1)
    )
"""
flux.slice-has-filter-query = true
flux.slice-filter-query = """
select
    date_format(datecode,'yyyy-MM-dd')
from dim.dt_dates
where datecode between date_sub(current_date, 7) and date_sub(current_date, 1)
    and datecode in (
        select distinct event_date from mon.SPARK_SMS_CEO_DASHBOARD where event_date between date_sub(current_date, 7) and date_sub(current_date, 1)
        union
        select distinct event_date from mon.SPARK_SMS_CEO_DASHBOARD_backup where event_date between date_sub(current_date, 7) and date_sub(current_date, 1)
    )
"""
flux.slice-date-format = "yyyy-MM-dd"

flux.has-pre-queries = true
flux.has-exec-queries = true
flux.has-post-queries = false


flux.inline.exec-queries += "SET hive.exec.dynamic.partition=true"
flux.inline.exec-queries += "SET hive.exec.dynamic.partition.mode=nonstrict"
flux.inline.exec-queries += "SET hive.enforce.bucketing=false"
flux.inline.exec-queries += "SET hive.enforce.sorting=false"


flux.inline.pre-exec-queries += """
SELECT IF(
    T_1.FT_EXIST = 0
    AND T_2.NBR = 3
    , 'OK'
    , 'NOK'
)
FROM
(SELECT COUNT(*) FT_EXIST FROM MON.SPARK_SMS_CEO_DASHBOARD WHERE event_date='###SLICE_VALUE###') T_1,
(SELECT COUNT(distinct granularite_reg) NBR  FROM AGG.SPARK_KPIS_DG_FINAL WHERE PROCESSING_DATE='###SLICE_VALUE###') T_2
"""

flux.inline.exec-queries += """
INSERT INTO MON.SPARK_SMS_CEO_DASHBOARD
SELECT
    MSISDN,
    SMS,
    CURRENT_TIMESTAMP INSERT_DATE,
    PROCESSING_DATE
FROM
(
   SELECT *
   FROM  DIM.SPARK_DT_SMSNOTIFICATION_RECIPIENT
   WHERE TYPE='SMSCEODASHBOARD' AND ACTIF='YES'
)A
LEFT JOIN 
(
   SELECT
      CONCAT(DATE_FORMAT(a.processing_date,'dd/MM')
         ,'\nLe CEO Dashboard est OK pour la journ√©e du ',DATE_FORMAT(a.processing_date,'dd/MM')
        ,' depuis ', A.FINAL_MAX_DATE
        ,'\n\n First Source: ',B.GA_MIN_DATE
        , '\n' , 'Final Source: ', B.GA_MAX_DATE
        , '\n' ,'Avail time: ', A.FINAL_MAX_DATE
        , '\n' ,'Duration: ', FLOOR((A.MAX_TIMESTAMP - B.MIN_TIMESTAMP)/3600), ' heures ', FLOOR(((A.MAX_TIMESTAMP - B.MIN_TIMESTAMP)%3600)/60), ' minutes'
         ) SMS,
      A.PROCESSING_DATE PROCESSING_DATE
   FROM 
  (
     SELECT 
         DATE_FORMAT(MAX(INSERT_DATE), 'dd/MM HH:mm') FINAL_MAX_DATE, 
         MAX(PROCESSING_DATE) PROCESSING_DATE,
         UNIX_TIMESTAMP(MAX(INSERT_DATE)) MAX_TIMESTAMP 
      FROM AGG.SPARK_KPIS_DG_FINAL WHERE PROCESSING_DATE='###SLICE_VALUE###'
      ) A,
      (
         SELECT 
            DATE_FORMAT(MAX(INSERT_DATE), 'dd/MM HH:mm') GA_MAX_DATE, 
            DATE_FORMAT(MIN(INSERT_DATE), 'dd/MM HH:mm') GA_MIN_DATE,
            UNIX_TIMESTAMP(MIN(INSERT_DATE)) MIN_TIMESTAMP
         FROM AGG.SPARK_FT_GLOBAL_ACTIVITY_DAILY_MKT_DG_NEW 
         WHERE TRANSACTION_DATE='###SLICE_VALUE###'
      ) B
)C
"""