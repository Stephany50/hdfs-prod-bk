flux.yarn.queue = "compute"
flux.log-level = "ERROR"
flux.input-type = "HIVE"
flux.output-type = "HDFS"

flux.spark.setup-conf += {"key": "spark.sql.crossJoin.enabled", "value": "true"}
flux.spark.setup-conf += {"key": "hive.exec.dynamic.partition.mode","value": "nonstrict"}
flux.spark.setup-conf += {"key": "spark.sql.files.ignoreCorruptFiles","value": "true"}
flux.spark.setup-var +=  {"key": "job_instanceid", "value": "LOAD_EXPORT_TELCO_ACQUISITIONS_WITHOUT_OM_ACCOUNT"}
flux.spark.setup-var +=  {"key": "begin_slice_value", "value": "4"}
flux.spark.setup-var +=  {"key": "end_slice_value", "value": "1"}

flux.name = "LOAD_EXPORT_TELCO_ACQUISITIONS_WITHOUT_OM_ACCOUNT"

flux.has-date-processing = true

flux.slice-value-type = "DAILY"
flux.slice-begin-value = -4
flux.slice-end-value = -1
flux.slice-step-value = 1
flux.slice-begin-value-offset = 0
flux.slice-end-value-offset = 0
flux.slice-has-state-query=false 
flux.slice-state-query="""
select
    case when count(*) = 4 then 'OK' else 'NOK' end
from
(
    select
        status,
        row_number() over(partition by event_date order by insert_date desc) rang
    from mon.export_history
    where job_instanceid = '${hivevar:job_instanceid}'
    and event_date between date_sub(current_date, ${hivevar:begin_slice_value}) and date_sub(current_date, ${hivevar:end_slice_value})
) R
where status = 'OK' and rang = 1
"""
flux.slice-has-filter-query = false
flux.slice-filter-query = """
select
    date_format(datecode,'yyyy-MM-dd')
from
dim.dt_dates
where datecode between date_sub(current_date, ${hivevar:begin_slice_value}) and date_sub(current_date, ${hivevar:end_slice_value})
and datecode in
(
    select event_date
    from
    (
        select
            *,
            row_number() over(partition by event_date order by insert_date desc) rang
        from mon.export_history
        where job_instanceid = '${hivevar:job_instanceid}'
        and event_date between date_sub(current_date, ${hivevar:begin_slice_value}) and date_sub(current_date, ${hivevar:end_slice_value})
    ) T
    where status = 'OK' and rang = 1
)
"""
flux.slice-date-format = "yyyy-MM-dd"

flux.has-pre-queries = true
flux.has-exec-queries = true
flux.has-post-queries = true

flux.inline.pre-exec-queries += """
SELECT IF(
    IT_EXIST > 0 
    AND FT_C4S > 0
    AND FT_NEW > 0
    AND T_4.NB_EXPORT < 1
    , 'OK'
    , 'NOK'
)
FROM
(SELECT COUNT(*) IT_EXIST FROM CDR.SPARK_IT_NOMAD_CLIENT_DIRECTORY  WHERE LAST_UPDATE_DATE = '###SLICE_VALUE###') T_1,
(SELECT COUNT(*) FT_C4S FROM DIM.SPARK_DT_BASE_IDENTIFICATION WHERE DATE_IDENTIFICATION = '###SLICE_VALUE###') T_11,
(SELECT count(*) FT_NEW from MON.SPARK_FT_OMNY_ACCOUNT_SNAPSHOT_NEW where event_date = '###SLICE_VALUE###') T88,
(
    SELECT COUNT(*) NB_EXPORT FROM
    (SELECT * FROM (SELECT * FROM MON.EXPORT_HISTORY WHERE EVENT_DATE='###SLICE_VALUE###' AND JOB_INSTANCEID='${hivevar:job_instanceid}' ORDER BY INSERT_DATE DESC LIMIT 1)  T where T.STATUS = 'OK') M
) T_4
"""

flux.inline.exec-queries += """
select
A.msisdn msisdn,
A.numeropiece numeropiece,
A.nomduclient nomduclient,
A.prenomduclient prenomduclient,
A.datedenaissance datedenaissance,
B.genre genre,
A.ville ville
from
(
select
A.msisdn msisdn,
numeropiece,
nomduclient,
prenomduclient,
datedenaissance,
ville
from
(

select
msisdn,
numeropiece,
nomduclient,
prenomduclient,
datedenaissance,
ville
from (
select 
telephone msisdn,
numeropiece,
nomduclient,
prenomduclient,
datedenaissance,
ville,
row_number() over(partition by telephone order by insert_date desc) rang
from CDR.SPARK_IT_NOMAD_CLIENT_DIRECTORY 
where LAST_UPDATE_DATE = '###SLICE_VALUE###' and upper(trim(etat))='VALID' and 
TYPEDECONTRAT in ('Nouvel Abonnement', 'Flex Sim') 
) A
where rang = 1
) A 
left join (select distinct msisdn from MON.SPARK_FT_OMNY_ACCOUNT_SNAPSHOT_NEW where event_date = '###SLICE_VALUE###') B
on A.msisdn = B.msisdn
where B.msisdn is null
) A
left join DIM.SPARK_DT_BASE_IDENTIFICATION B 
where A.msisdn = B.msisdn
"""

flux.inline.post-exec-queries += "INSERT INTO MON.EXPORT_HISTORY VALUES ('${hivevar:job_instanceid}', 'OK', CURRENT_TIMESTAMP, '###SLICE_VALUE###')"


flux.hdfs.output-format = "csv"
flux.hdfs.output-has-header = "true"
flux.hdfs.output-separator = ";"
flux.hdfs.output-mode = "overwrite"
flux.hdfs.output-path = "/PROD/EXPORT/EXPORT_TELCO_ACQUISITIONS_WITHOUT_OM_ACCOUNT"
