
flux.yarn.queue = "compute"
flux.log-level = "ERROR"

flux.input-type = "HIVE"
flux.output-type = "HDFS"
flux.spark.setup-conf += {"key": "spark.sql.crossJoin.enabled", "value": "true"}
flux.spark.setup-conf += {"key": "hive.exec.dynamic.partition.mode","value": "nonstrict"}
flux.spark.setup-conf += {"key": "spark.sql.files.ignoreCorruptFiles","value": "true"}
flux.spark.setup-var +=  {"key": "job_instanceid", "value": "LOAD_EXPORT_SONDJA_MSC_TRANSACTION"}


flux.name = "LOAD_EXPORT_SONDJA_MSC_TRANSACTION"

flux.has-date-processing = true

flux.slice-value-type = "DAILY"
flux.slice-begin-value = -417
flux.slice-end-value = -358
flux.slice-step-value = 1
flux.slice-begin-value-offset = 0
flux.slice-end-value-offset = 0
flux.slice-has-state-query=true
flux.slice-state-query="""
select
    case when count(*) = 60 then 'OK' else 'NOK' end
from
(
    select
        status,
        row_number() over(partition by event_date order by insert_date desc) rang
    from mon.export_history
    where job_instanceid = '${hivevar:job_instanceid}'
    and event_date between date_sub(current_date, 417) and date_sub(current_date, 358)
) R
where status = 'OK' and rang = 1
"""
flux.slice-has-filter-query = true
flux.slice-filter-query = """
select
    date_format(datecode,'yyyy-MM-dd')
from
dim.dt_dates
where datecode between date_sub(current_date, 417) and date_sub(current_date, 358)
and datecode in
(
    select event_date
    from
    (
        select
            *,
            row_number() over(partition by event_date order by insert_date desc) rang
        from mon.export_history
        where job_instanceid = '${hivevar:job_instanceid}'
        and event_date between date_sub(current_date, 417) and date_sub(current_date, 358)
    ) T
    where status = 'OK' and rang = 1
)
"""
flux.slice-date-format = "yyyy-MM-dd"

flux.has-pre-queries = true
flux.has-exec-queries = true
flux.has-post-queries = true

flux.inline.exec-queries += "add jar hdfs:///PROD/UDF/hive-udf-1.0.1.jar"
flux.inline.exec-queries += "DROP TEMPORARY  FUNCTION  IF EXISTS fn_nnp_remove_rn"
flux.inline.exec-queries += "create temporary function fn_nnp_remove_rn as 'cm.orange.bigdata.udf.GetNnpRemoveRn'"

flux.inline.pre-exec-queries += """
SELECT IF(
    T_1.FT_EXIST > 1
    AND T_2.NB_EXPORT < 1
    , 'OK'
    , 'NOK'
)
FROM
(SELECT COUNT(*) FT_EXIST FROM mon.spark_ft_msc_transaction WHERE transaction_date = '###SLICE_VALUE###') T_1,
(
    SELECT COUNT(*) NB_EXPORT FROM
    (SELECT * FROM (SELECT * FROM MON.EXPORT_HISTORY WHERE EVENT_DATE='###SLICE_VALUE###' AND JOB_INSTANCEID='${hivevar:job_instanceid}' ORDER BY INSERT_DATE DESC LIMIT 1)  T where T.STATUS = 'OK') M
) T_2
"""

flux.inline.exec-queries += """
SELECT  
    nvl(concat(substr(TRANSACTION_DATE,1,4), substr(TRANSACTION_DATE,6,2), substr(TRANSACTION_DATE,9,2), substr(TRANSACTION_TIME,1,2), substr(TRANSACTION_TIME,3,2), substr(TRANSACTION_TIME,5,2)), '') DATEHEURE,
    nvl(case when (upper(TRANSACTION_TYPE) like '%SMS%') then 'SMS' else 'VOICE' end, '') EVENT_TYPE,
    nvl(TRANSACTION_DURATION, '') QUANTITY,
    nvl(FN_NNP_REMOVE_RN(nvl(SERVED_MSISDN, '')), '') MSISDN_A,
    nvl(FN_NNP_REMOVE_RN(nvl(PARTNER_GT, '')), '') MSISDN_B,
    nvl(case when (upper(TRANSACTION_DIRECTION) like '%ENTRANT%') then 'IN' else 'OUT' end, '') DIRECTION,
    nvl(SERVED_PARTY_LOCATION, '') CELLCODE,
    nvl(SERVED_IMEI, '') IMEI,
    "" dummy1,
    "" dummy2
FROM  MON.SPARK_FT_MSC_TRANSACTION
WHERE TRANSACTION_DATE = '###SLICE_VALUE###'
"""

flux.inline.post-exec-queries += "INSERT INTO MON.EXPORT_HISTORY VALUES ('${hivevar:job_instanceid}', 'OK', CURRENT_TIMESTAMP, '###SLICE_VALUE###')"

flux.hdfs.output-format = "csv"
flux.hdfs.output-has-header = "true"
flux.hdfs.output-separator = "|"
flux.hdfs.output-mode = "overwrite"
flux.hdfs.output-path = "/PROD/EXPORT/SONDJA/MSC_TRANSACTION"