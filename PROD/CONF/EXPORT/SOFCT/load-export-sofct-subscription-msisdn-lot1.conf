flux.yarn.queue = "compute"
flux.log-level = "ERROR"

flux.input-type = "HIVE"
flux.output-type = "HDFS"

flux.spark.setup-conf += {"key": "spark.sql.crossJoin.enabled", "value": "true"}
flux.spark.setup-conf += {"key": "hive.exec.dynamic.partition.mode","value": "nonstrict"}
flux.spark.setup-conf += {"key": "spark.sql.files.ignoreCorruptFiles","value": "true"}
flux.spark.setup-var +=  {"key": "job_instanceid", "value": "LOAD_EXPORT_SOFCT_SUBSCRIPTION_MSISDN_LOT1"}

flux.name = "LOAD_EXPORT_SOFCT_SUBSCRIPTION_MSISDN_LOT1"

flux.has-date-processing = true

flux.slice-value-type = "MONTHLY"
flux.slice-begin-value = -2
flux.slice-end-value = -1
flux.slice-step-value = 1
flux.slice-begin-value-offset = 0
flux.slice-end-value-offset = 0
flux.slice-has-state-query=true
flux.slice-state-query="""
select
    case when count(*) = 2 then 'OK' else 'NOK' end
from
(
    select
        status,
        row_number() over(partition by event_date order by insert_date desc) rang
    from mon.export_history
    where job_instanceid = '${hivevar:job_instanceid}'
    and event_date between substr(add_months(current_date, ${hivevar:begin_slice_value}), 1, 7) and substr(add_months(current_date, ${hivevar:end_slice_value}),1,7)
) R
where status = 'OK' and rang = 1
"""
flux.slice-has-filter-query = true
flux.slice-filter-query = """
select
    distinct date_format(datecode,'yyyy-MM')
from
dim.dt_dates
where datecode between add_months(current_date, ${hivevar:begin_slice_value}) and add_months(current_date, ${hivevar:end_slice_value})
and substr(datecode, 1, 7) in
(
    select event_date
    from
    (
        select
            *,
            row_number() over(partition by event_date order by insert_date desc) rang
        from mon.export_history
        where job_instanceid = '${hivevar:job_instanceid}'
        and event_date between substr(add_months(current_date, ${hivevar:begin_slice_value}), 1, 7) and substr(add_months(current_date, ${hivevar:end_slice_value}),1,7)
    ) T
    where status = 'OK' and rang = 1
)
"""
flux.slice-date-format = "yyyy-MM"
flux.has-pre-queries = true
flux.has-exec-queries = true
flux.has-post-queries = true

flux.inline.pre-exec-queries += """
SELECT IF(
    T_1.FT_EXIST > 0 
    AND T_2.NB_EXPORT < 1
    , 'OK'
    , 'NOK'
)
FROM
(select count(*) FT_EXIST from mon.SPARK_FT_SUBSCRIPTION_MSISDN_MONTH
where event_month = '###SLICE_VALUE###') T_1,
(
    SELECT COUNT(*) NB_EXPORT FROM
    (SELECT * FROM (SELECT * FROM MON.EXPORT_HISTORY WHERE EVENT_DATE='###SLICE_VALUE###' AND JOB_INSTANCEID='${hivevar:job_instanceid}' ORDER BY INSERT_DATE DESC LIMIT 1)  T where T.STATUS = 'OK') M
) T_2
"""

flux.inline.exec-queries += """
select
msisdn,customer_profile,contract_type,total_subs_count,total_subs_amount,voice_bundle_count,voice_bundle_minutes,voice_bundle_amount,sms_bundle_count,sms_bundle_volume,sms_bundle_amount,
data_bundle_count,data_bundle_bytes,data_bundle_amount,voi_dat_sms_bun_count,voi_dat_sms_bun_amount,voi_sms_bun_count,voi_sms_bun_amount,voi_dat_bun_count,voi_dat_bun_amount,dat_sms_bun_count, dat_sms_bun_amount,other_subs_count,other_subs_amount,src_table,operator_code,insert_date,active_days_count,first_active_day,last_active_day,event_month
from mon.SPARK_FT_SUBSCRIPTION_MSISDN_MONTH
where event_month = '###SLICE_VALUE###'
"""

flux.inline.post-exec-queries += "INSERT INTO MON.EXPORT_HISTORY VALUES ('${hivevar:job_instanceid}', 'OK', CURRENT_TIMESTAMP, '###SLICE_VALUE###')"


flux.hdfs.output-format = "csv"
flux.hdfs.output-has-header = "true"
flux.hdfs.output-separator = ","
flux.hdfs.output-mode = "overwrite"
flux.hdfs.output-path = "/PROD/EXPORT/SOFCT_SUBSCRIPTION_MSISDN_LOT1"
