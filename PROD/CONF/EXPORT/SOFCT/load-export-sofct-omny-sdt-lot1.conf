flux.yarn.queue = "compute"
flux.log-level = "ERROR"

flux.input-type = "HIVE"
flux.output-type = "HDFS"

flux.spark.setup-conf += {"key": "spark.sql.crossJoin.enabled", "value": "true"}
flux.spark.setup-conf += {"key": "hive.exec.dynamic.partition.mode","value": "nonstrict"}
flux.spark.setup-conf += {"key": "spark.sql.files.ignoreCorruptFiles","value": "true"}
flux.spark.setup-var +=  {"key": "job_instanceid", "value": "LOAD_EXPORT_SOFCT_OMNY_SDT_LOT1"}

flux.name = "LOAD_EXPORT_SOFCT_OMNY_SDT_LOT1"

flux.has-date-processing = true

flux.slice-value-type = "MONTHLY"
flux.slice-begin-value = -2
flux.slice-end-value = -1
flux.slice-step-value = 1
flux.slice-begin-value-offset = 0
flux.slice-end-value-offset = 0
flux.slice-has-state-query=true
flux.slice-state-query="""
select
    case when count(*) = 2 then 'OK' else 'NOK' end
from
(
    select
        status,
        row_number() over(partition by event_date order by insert_date desc) rang
    from mon.export_history
    where job_instanceid = '${hivevar:job_instanceid}'
    and event_date between substr(add_months(current_date, ${hivevar:begin_slice_value}), 1, 7) and substr(add_months(current_date, ${hivevar:end_slice_value}),1,7)
) R
where status = 'OK' and rang = 1
"""
flux.slice-has-filter-query = true
flux.slice-filter-query = """
select
    distinct date_format(datecode,'yyyy-MM')
from
dim.dt_dates
where datecode between add_months(current_date, ${hivevar:begin_slice_value}) and add_months(current_date, ${hivevar:end_slice_value})
and substr(datecode, 1, 7) in
(
    select event_date
    from
    (
        select
            *,
            row_number() over(partition by event_date order by insert_date desc) rang
        from mon.export_history
        where job_instanceid = '${hivevar:job_instanceid}'
        and event_date between substr(add_months(current_date, ${hivevar:begin_slice_value}), 1, 7) and substr(add_months(current_date, ${hivevar:end_slice_value}),1,7)
    ) T
    where status = 'OK' and rang = 1
)
"""
flux.slice-date-format = "yyyy-MM"
flux.has-pre-queries = true
flux.has-exec-queries = true
flux.has-post-queries = true

flux.inline.pre-exec-queries += """
SELECT IF(
    T_1.FT_EXIST = abs(datediff(last_day(concat('###SLICE_VALUE###', '-01')), concat('###SLICE_VALUE###', '-01'))) + 1
    AND T_12.FT_EXIST = abs(datediff(last_day(concat('###SLICE_VALUE###', '-01')), concat('###SLICE_VALUE###', '-01'))) + 1
    AND T_2.NB_EXPORT < 1
    , 'OK'
    , 'NOK'
)
FROM
(select count(*) FT_EXIST from MON.SPARK_FT_OMNY_SDT 
where DATE_INSCRIPT between concat('###SLICE_VALUE###', '-01') and last_day(concat('###SLICE_VALUE###', '-01'))) T_1,
(select count(*) FT_EXIST from cdr.SPARK_IT_NOMAD_CLIENT_DIRECTORY 
where last_update_date between concat('###SLICE_VALUE###', '-01') and last_day(concat('###SLICE_VALUE###', '-01'))) T_12,
(
    SELECT COUNT(*) NB_EXPORT FROM
    (SELECT * FROM (SELECT * FROM MON.EXPORT_HISTORY WHERE EVENT_DATE='###SLICE_VALUE###' AND JOB_INSTANCEID='${hivevar:job_instanceid}' ORDER BY INSERT_DATE DESC LIMIT 1)  T where T.STATUS = 'OK') M
) T_2
"""

flux.inline.exec-queries += """
select
MSISDN,
USER_NAME,
ADDRESS,
DATE_INSCRIPT,
nvl(inscripteur, B.LOGINVENDEUR) inscripteur,
ID_NUMBER,
SEX,
DATE_OF_BIRTH,
MIDATEDEP,
MTT_DEPOT,
NB_DEPOT,
FIRSTDEPOT,
FIRSTTRAN,
DEST_TRAN,
SERV_TRAN,
MIDATETR,
MTT_TRANS,
NB_TRANSACTION,
REG_LEVEL,
SEUIL_OK,
AUTO_INSCRIPTION,
BOUCLE_P2P,
DOUBLE_PROFIL,
BOUCLE,
CONFORMITE,
INSERT_DATE
from
(
select 
nvl(MSISDN,'') MSISDN,
nvl(USER_NAME,'') USER_NAME,
nvl(ADDRESS,'') ADDRESS,
nvl(to_date(DATE_INSCRIPT),'') DATE_INSCRIPT,
nvl(INSCRIPTEUR,'') INSCRIPTEUR,
nvl(ID_NUMBER,'') ID_NUMBER,
nvl(SEX,'') SEX,
nvl(to_date(DATE_OF_BIRTH),'') DATE_OF_BIRTH,
nvl(MIDATEDEP,'') MIDATEDEP,
nvl(MTT_DEPOT,'') MTT_DEPOT,
nvl(NB_DEPOT,'') NB_DEPOT,
nvl(FIRSTDEPOT,'') FIRSTDEPOT,
nvl(FIRSTTRAN,'') FIRSTTRAN,
nvl(DEST_TRAN,'') DEST_TRAN,
nvl(SERV_TRAN,'') SERV_TRAN,
nvl(MIDATETR,'') MIDATETR,
nvl(MTT_TRANS,'') MTT_TRANS,
nvl(NB_TRANSACTION,'') NB_TRANSACTION,
nvl(REG_LEVEL,'') REG_LEVEL,
nvl(SEUIL_OK,'') SEUIL_OK,
nvl(AUTO_INSCRIPTION,'') AUTO_INSCRIPTION,
nvl(BOUCLE_P2P,'') BOUCLE_P2P,
nvl(DOUBLE_PROFIL,'') DOUBLE_PROFIL,
nvl(BOUCLE,'') BOUCLE,
nvl(CONFORMITE,'') CONFORMITE,
nvl(to_date(INSERT_DATE),'') INSERT_DATE
from MON.SPARK_FT_OMNY_SDT 
where DATE_INSCRIPT between concat('###SLICE_VALUE###', '-01') and last_day(concat('###SLICE_VALUE###', '-01'))
order by date_inscript
) A 
left join 
(
select distinct TELEPHONE,max(substr(LOGINVENDEUR, 1, 9)) LOGINVENDEUR
from cdr.SPARK_IT_NOMAD_CLIENT_DIRECTORY
where TYPEDECONTRAT='Orange Money' and last_update_date >= concat('###SLICE_VALUE###', '-01') and last_update_date<=last_day(concat('###SLICE_VALUE###', '-01'))
group by TELEPHONE
) B on A.msisdn = B.TELEPHONE

"""

flux.inline.post-exec-queries += "INSERT INTO MON.EXPORT_HISTORY VALUES ('${hivevar:job_instanceid}', 'OK', CURRENT_TIMESTAMP, '###SLICE_VALUE###')"


flux.hdfs.output-format = "csv"
flux.hdfs.output-has-header = "true"
flux.hdfs.output-separator = ","
flux.hdfs.output-mode = "overwrite"
flux.hdfs.output-path = "/PROD/EXPORT/SOFCT_OMNY_SDT_LOT1"
