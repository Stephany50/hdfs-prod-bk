flux.yarn.queue = "compute"
flux.log-level = "ERROR"

flux.input-type = "HIVE"
flux.output-type = "HDFS"

flux.spark.setup-conf += {"key": "spark.sql.crossJoin.enabled", "value": "true"}
flux.spark.setup-conf += {"key": "hive.exec.dynamic.partition.mode","value": "nonstrict"}
flux.spark.setup-conf += {"key": "spark.sql.files.ignoreCorruptFiles","value": "true"}
flux.spark.setup-var +=  {"key": "job_instanceid", "value": "LOAD_EXPORT_FACEBOOK_FLEX_DATA_TRAFFIC"}

flux.spark.setup-var +=  {"key": "cdr_type","value": "ZTE_DATA_CDR"}
flux.spark.setup-var +=  {"key": "it_table_name","value": "CDR.SPARK_IT_ZTE_DATA"}
flux.spark.setup-var +=  {"key": "it_partition_column","value": "FILE_DATE"}
flux.spark.setup-var +=  {"key": "date_offset","value": 0}
flux.spark.setup-var +=  {"key": "flux_type","value": "PREPAID"}
flux.spark.setup-var +=  {"key": "check_file_regex","value": "IN_ZTE_CHECK_FILELIST_2"}


flux.name = "LOAD_EXPORT_FACEBOOK_FLEX_DATA_TRAFFIC"

flux.has-date-processing = true

flux.slice-value-type = "DAILY"
flux.slice-begin-value = -100
flux.slice-end-value = -1
flux.slice-step-value = 1
flux.slice-begin-value-offset = 0
flux.slice-end-value-offset = 0

flux.slice-has-state-query=true
flux.slice-state-query="""
select
    case when count(*) = 100 then 'OK' else 'NOK' end
from
(
    select
        status,
        row_number() over(partition by event_date order by insert_date desc) rang
    from mon.export_history
    where job_instanceid = '${hivevar:job_instanceid}'
    and event_date between date_sub(current_date, 100) and date_sub(current_date, 1)
) R
where status = 'OK' and rang = 1
"""
flux.slice-has-filter-query = true
flux.slice-filter-query = """
select
    date_format(datecode,'yyyy-MM-dd')
from
dim.dt_dates
where datecode between date_sub(current_date, 100) and date_sub(current_date, 1)
and datecode in
(
    select event_date
    from
    (
        select
            *,
            row_number() over(partition by event_date order by insert_date desc) rang
        from mon.export_history
        where job_instanceid = '${hivevar:job_instanceid}'
        and event_date between date_sub(current_date, 100) and date_sub(current_date, 1)
    ) T
    where status = 'OK' and rang = 1
)
"""
flux.slice-date-format = "yyyy-MM-dd"

flux.has-pre-queries = true
flux.has-exec-queries = true
flux.has-post-queries = true

flux.inline.pre-exec-queries += """
SELECT IF(
    T_2.NB_EXPORT < 1
    , 'OK'
    , 'NOK'
)
FROM
(
    SELECT COUNT(*) NB_EXPORT FROM
    (SELECT * FROM (SELECT * FROM MON.EXPORT_HISTORY WHERE EVENT_DATE='###SLICE_VALUE###' AND JOB_INSTANCEID='${hivevar:job_instanceid}' ORDER BY INSERT_DATE DESC LIMIT 1)  T where T.STATUS = 'OK') M
) T_2
"""

flux.pre-exec-queries += "/PROD/SCRIPTS/FT/IN_ZTE/prequery_spark_completude.hql"

flux.inline.exec-queries += """
select
MSISDN,
CASE
WHEN device_rank = 7 THEN '5G'
WHEN device_rank = 6 THEN '4G'
WHEN device_rank = 5 THEN '3G'
WHEN device_rank = 4 THEN '2.75G'
WHEN device_rank = 3 THEN '2.5G'
WHEN device_rank = 2 THEN '2G'
ELSE NULL END TECHNOLOGIE,
DATA_VOLUME,
IMEI,
'###SLICE_VALUE###' EVENT_DATE
from
(
select
msisdn,
data_volume/1024/1024 data_volume,
imei,
(
CASE
WHEN TRIM(UPPER(nvl(trim(B.TEK_RADIO), ''))) = '5G' THEN 7
WHEN TRIM(UPPER(nvl(trim(B.TEK_RADIO), ''))) IN ('LTE CA', 'LTE') THEN 6
WHEN TRIM(UPPER(nvl(trim(B.TEK_RADIO), ''))) IN ('3G', 'HSDPA', '3G EDGE', 'HSPA', 'HSPA+', 'HSUPA', 'UMTS') THEN 5
WHEN TRIM(UPPER(nvl(trim(B.TEK_RADIO), ''))) IN ('EDGE') THEN 4
WHEN TRIM(UPPER(nvl(trim(B.TEK_RADIO), ''))) IN ('GPRS') THEN 3
WHEN TRIM(UPPER(nvl(trim(B.TEK_RADIO), ''))) IN ('2G', 'GSM') THEN 2
WHEN TRIM(UPPER(trim(B.LTE))) = 'YES' THEN 6
WHEN TRIM(UPPER(trim(B.HSDPA_FLAG))) = 'T' THEN 5
WHEN TRIM(UPPER(trim(B.HSUPA_FLAG))) = 'T' THEN 5
WHEN TRIM(UPPER(trim(B.UMTS_FLAG))) = 'T' THEN 5
WHEN TRIM(UPPER(trim(B.EDGE_FLAG))) = 'T' THEN 4
WHEN TRIM(UPPER(trim(B.GPRS_FLAG))) = 'T' THEN 3
WHEN TRIM(UPPER(trim(B.GSM_BAND_FLAG))) = 'T' THEN 2
WHEN TRIM(UPPER(trim(C.TECHNOLOGIE))) = '4G' THEN 6
WHEN TRIM(UPPER(trim(C.TECHNOLOGIE))) = '3G' THEN 5
WHEN TRIM(UPPER(trim(C.TECHNOLOGIE))) = '2.75G' THEN 4
WHEN TRIM(UPPER(trim(C.TECHNOLOGIE))) = '2.5G' THEN 3
WHEN TRIM(UPPER(trim(C.TECHNOLOGIE))) = '2G' THEN 2
ELSE 1
END
) device_rank
from
(
select 
SUBSTRING(calling_nbr,-9) msisdn,
sum(BYTE_DOWN)+sum(BYTE_UP) data_volume,
max(calling_imei) imei
from CDR.SPARK_IT_ZTE_DATA
WHERE START_DATE = '###SLICE_VALUE###' and upper(trim(rating_group))='3002'
group by SUBSTRING(calling_nbr,-9)
) A 
LEFT JOIN 
( 
select tac, 
max(TEK_RADIO) TEK_RADIO,
max(LTE) LTE,
max(HSDPA_FLAG) HSDPA_FLAG,
max(HSUPA_FLAG) HSUPA_FLAG,
max(UMTS_FLAG) UMTS_FLAG,
max(EDGE_FLAG) EDGE_FLAG,
max(GPRS_FLAG) GPRS_FLAG,
max(GSM_BAND_FLAG) GSM_BAND_FLAG
from DIM.DT_NEW_HANDSET_REF 
group by tac
) B
ON lpad(TRIM(SUBSTR(A.IMEI, 1, 8)), 8, 0) = TRIM(B.TAC)
left join 
(
select tac_code, max(TECHNOLOGIE) TECHNOLOGIE
from DIM.DT_HANDSET_REF L1
group by tac_code
) C on lpad(TRIM(SUBSTR(A.IMEI, 1, 8)), 8, 0) = lpad(TRIM(SUBSTR(C.TAC_CODE, 1, 8)), 8, 0)
) L
"""

flux.inline.post-exec-queries += "INSERT INTO MON.EXPORT_HISTORY VALUES ('${hivevar:job_instanceid}', 'OK', CURRENT_TIMESTAMP, '###SLICE_VALUE###')"


flux.hdfs.output-format = "csv"
flux.hdfs.output-has-header = "true"
flux.hdfs.output-separator = "|"
flux.hdfs.output-mode = "overwrite"
flux.hdfs.output-path = "/PROD/EXPORT/EXPORT_CBM_FACEBOOK_FLEX_DATA_TRAFFIC"
