
flux.yarn.queue = "compute"
flux.log-level = "ERROR"

flux.input-type = "HIVE"
flux.output-type = "HDFS"

flux.spark.setup-conf += {"key": "spark.sql.crossJoin.enabled", "value": "true"}
flux.spark.setup-conf += {"key": "hive.exec.dynamic.partition.mode","value": "nonstrict"}
flux.spark.setup-var +=  {"key": "job_instanceid", "value": "LOAD_EXPORT_CBM_LOCALISATION_7_DAYS"}
flux.spark.setup-var +=  {"key": "day_of_week_to_spool", "value": 1}

flux.name = "LOAD_EXPORT_CBM_LOCALISATION_7_DAYS"

flux.has-date-processing = true
flux.slice-value-type = "DAILY"
flux.slice-begin-value = -7
flux.slice-end-value = -1
flux.slice-step-value = 1
flux.slice-begin-value-offset = 0
flux.slice-end-value-offset = 0
flux.slice-has-state-query=true
flux.slice-state-query="""
select
    case when count(*) = 1 then 'OK' else 'NOK' end
from
(
    select
        status,
        row_number() over(partition by event_date order by insert_date desc) rang
    from mon.export_history
    where job_instanceid = '${hivevar:job_instanceid}'
    and event_date between date_sub(current_date, 7) and date_sub(current_date, 1) and dayofweek(event_date) = ${hivevar:day_of_week_to_spool}
) R
where status = 'OK' and rang = 1
"""
flux.slice-has-filter-query = true
flux.slice-filter-query = """
select date_format(datecode, 'yyyy-MM-dd')
from dim.dt_dates
where datecode between date_sub(current_date, 7) and date_sub(current_date, 1) and dayofweek(datecode) != ${hivevar:day_of_week_to_spool}
"""
flux.slice-date-format = "yyyy-MM-dd"

flux.has-pre-queries = true
flux.has-exec-queries = true
flux.has-post-queries = true

flux.inline.pre-exec-queries += """
SELECT IF(
    T_1.FT_EXIST = 7
    AND T_2.NB_EXPORT < 1
    , 'OK'
    , 'NOK'
)
FROM
(SELECT COUNT(distinct event_date) FT_EXIST FROM mon.spark_ft_client_site_traffic_hour WHERE event_date between date_sub('###SLICE_VALUE###', 6) and '###SLICE_VALUE###') T_1,
(
    SELECT COUNT(*) NB_EXPORT FROM
    (SELECT * FROM (SELECT * FROM MON.EXPORT_HISTORY WHERE EVENT_DATE='###SLICE_VALUE###' AND JOB_INSTANCEID='${hivevar:job_instanceid}' ORDER BY INSERT_DATE DESC LIMIT 1)  T where T.STATUS = 'OK') M
) T_2
"""

flux.inline.exec-queries += """
select
    msisdn

    , a.site_name
    , d.townname townname
    , d.administrative_region administrative_region
    , d.commercial_region commercial_region
    , d.zone_pmo zone_pmo
    , d.category_site category_site
    , d.region_business region_business

    , '###SLICE_VALUE###' event_date
from
(
    select
        distinct msisdn
        , first_value(site_name) over(partition by msisdn order by count_on desc) site_name
    from
    (
        select
            msisdn
            , upper(trim(site_name)) site_name
            , count(*) count_on
        from mon.spark_ft_client_site_traffic_hour
        where event_date between date_sub('###SLICE_VALUE###', 6) and '###SLICE_VALUE###' and length(msisdn) = 9 and site_name is not null
        group by msisdn, upper(trim(site_name))
    ) a00
) a
left join
(
    select
        upper(trim(site_name)) site_name
        , max(townname) townname
        , max(region) administrative_region
        , max(commercial_region) commercial_region
        , max(zonepmo) zone_pmo
        , concat_ws('|', collect_set(distinct technologie)) category_site
        , max(region_bus) region_business
    from dim.spark_dt_gsm_cell_code
    group by upper(trim(site_name))
) d on a.site_name = d.site_name
"""

flux.inline.post-exec-queries += "INSERT INTO MON.EXPORT_HISTORY VALUES ('${hivevar:job_instanceid}', 'OK', CURRENT_TIMESTAMP, '###SLICE_VALUE###')"

flux.hdfs.output-format = "csv"
flux.hdfs.output-has-header = "true"
flux.hdfs.output-separator = ";"
flux.hdfs.output-mode = "overwrite"
flux.hdfs.output-path = "/PROD/EXPORT/EXPORT_CBM_LOCALISATION_7_DAYS"
