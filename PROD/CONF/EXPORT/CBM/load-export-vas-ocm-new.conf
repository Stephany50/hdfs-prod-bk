flux.yarn.queue = "compute"
flux.log-level = "ERROR"

flux.input-type = "HIVE"
flux.output-type = "HDFS"
flux.spark.setup-conf += {"key": "spark.sql.crossJoin.enabled", "value": "true"}
flux.spark.setup-conf += {"key": "hive.exec.dynamic.partition.mode","value": "nonstrict"}

flux.spark.setup-var +=  {"key": "job_instanceid", "value": "LOAD_EXPORT_CBM_VAS_OCM_NEW"}
flux.spark.setup-var +=  {"key": "cdr_type","value": "ZTE_ADJUSTMENT_CDR"}
flux.spark.setup-var +=  {"key": "date_offset","value": "7"}
flux.spark.setup-var +=  {"key": "it_table_name","value": "CDR.SPARK_IT_ZTE_ADJUSTMENT"}
flux.spark.setup-var +=  {"key": "it_partition_column","value": "FILE_DATE"}
flux.spark.setup-var +=  {"key": "flux_type","value": "PREPAID"}
flux.spark.setup-var +=  {"key": "check_file_regex","value": "IN_ZTE_CHECK_FILELIST_2"}


flux.name = "LOAD_EXPORT_CBM_VAS_OCM_NEW"

flux.has-date-processing = true

flux.slice-value-type = "DAILY"
flux.slice-begin-value = -15
flux.slice-end-value = -1
flux.slice-step-value = 1
flux.slice-begin-value-offset = 0
flux.slice-end-value-offset = 0
flux.slice-has-state-query=true
flux.slice-state-query="""
select
    case when count(*) = 15 then 'OK' else 'NOK' end
from
(
    select
        status,
        row_number() over(partition by event_date order by insert_date desc) rang
    from mon.export_history
    where job_instanceid = '${hivevar:job_instanceid}'
    and event_date between date_sub(current_date, 15) and date_sub(current_date, 1)
) R
where status = 'OK' and rang = 1
"""
flux.slice-has-filter-query = true
flux.slice-filter-query = """
select
    date_format(datecode,'yyyy-MM-dd')
from
dim.dt_dates
where datecode between date_sub(current_date, 15) and date_sub(current_date, 1)
and datecode in
(
    select event_date
    from
    (
        select
            *,
            row_number() over(partition by event_date order by insert_date desc) rang
        from mon.export_history
        where job_instanceid = '${hivevar:job_instanceid}'
        and event_date between date_sub(current_date, 15) and date_sub(current_date, 1)
    ) T
    where status = 'OK' and rang = 1
)
"""
flux.slice-date-format = "yyyy-MM-dd"

flux.has-pre-queries = true
flux.has-exec-queries = true
flux.has-post-queries = true

flux.inline.pre-exec-queries += """
SELECT IF(
    T_1.FT_EXIST > 0
    and T_3.FT_EXIST > 0
    and T_4.FT_EXIST > 0
    AND T_2.NB_EXPORT < 1
    , 'OK'
    , 'NOK'
)
FROM
(SELECT COUNT(*) FT_EXIST FROM MON.SPARK_FT_VAS_REVENUE_DETAIL WHERE TRANSACTION_DATE  ='###SLICE_VALUE###') T_1,
(SELECT COUNT(*) FT_EXIST FROM mon.spark_ft_cra_gprs WHERE session_date  ='###SLICE_VALUE###') T_3,
(SELECT COUNT(*) FT_EXIST FROM mon.SPARK_FT_OVERDRAFT WHERE TRANSACTION_DATE  ='###SLICE_VALUE###') T_4,
(
    SELECT COUNT(*) NB_EXPORT FROM
    (SELECT * FROM (SELECT * FROM MON.EXPORT_HISTORY WHERE EVENT_DATE='###SLICE_VALUE###' AND JOB_INSTANCEID='${hivevar:job_instanceid}' ORDER BY INSERT_DATE DESC LIMIT 1)  T where T.STATUS = 'OK') M
) T_2
"""
flux.pre-exec-queries += "/PROD/SCRIPTS/FT/IN_ZTE/prequery_spark_completude.hql"

flux.inline.exec-queries += """
select
    msisdn,
    service,
    code,
    partner,
    billing,
    source,
    current_timestamp() insert_date,
    '###SLICE_VALUE###' event_date
from
(
    select
        served_party_msisdn msisdn,
        sdp_gos_serv_name service,
        null code,
        null partner,
        TOTAL_COST billing,
        null bundle,
        'CRA_GPRS' source
    from
    (
        select
            served_party_msisdn,
            sdp_gos_serv_name,
            sum(TOTAL_COST) TOTAL_COST
        from
        (
            select
                served_party_msisdn,
                TOTAL_COST,
                sdp_gos_serv_name,
                SERVED_PARTY_OFFER
            from mon.spark_ft_cra_gprs
            where session_date = '###SLICE_VALUE###'
        ) a00 left join DIM.DT_OFFER_PROFILES a01
        on a00.SERVED_PARTY_OFFER = a01.PROFILE_CODE
        where a01.OPERATOR_CODE In ('OCM')
        group by served_party_msisdn, sdp_gos_serv_name
    ) a0
    UNION all
    SELECT
        msisdn,
        service,
        A1.code,
        partner,
        sum(billing) billing,
        frequency bundle,
        'VOICE_SMS' source
    FROM
    (
        SELECT
            served_party MSISDN,
            other_party CODE,
            NVL(MAIN_RATED_AMOUNT, 0) + NVL(PROMO_RATED_AMOUNT, 0) BILLING
        FROM MON.SPARK_FT_VAS_REVENUE_DETAIL
        WHERE TRANSACTION_DATE = '###SLICE_VALUE###'
    ) A1
    LEFT JOIN tmp.dim_vas_services B1
    ON trim(A1.CODE) = trim(B1.code) and billing = price
    group by msisdn, A1.CODE, service, partner, frequency
    UNION all
    select
        substr(acc_nbr, -9, 9) msisdn,
        nvl(B3.usage_description, B2.usage_description) service,
        null code,
        null partner,
        sum(charge)/100 billing,
        null bundle,
        'IT_ZTE_ADJUSTMENT' source
    from
    (
        select *
        from CDR.SPARK_IT_ZTE_ADJUSTMENT
        where create_date = '###SLICE_VALUE###'
            and channel_id in (13, 15, 28, 37)
    ) A2
    left join dim.DT_ZTE_USAGE_TYPE B2 on A2.CHANNEL_ID = B2.USAGE_CODE
    left join DIM.DT_USAGES B3 on B2.GLOBAL_USAGE_CODE = B3.USAGE_CODE
    group by substr(acc_nbr, -9, 9), nvl(B3.usage_description, B2.usage_description)
    union all
    select
        SERVED_PARTY_MSISDN msisdn,
        'SOS Credit Fees' service,
        null code,
        null partner,
        FEE billing,
        null bundle,
        'FT_OVERDRAFT' source
    FROM MON.SPARK_FT_OVERDRAFT
    WHERE TRANSACTION_DATE = '###SLICE_VALUE###' AND NVL(FEE_FLAG,'ND') ='YES'
) a
"""

flux.inline.post-exec-queries += "INSERT INTO MON.EXPORT_HISTORY VALUES ('${hivevar:job_instanceid}', 'OK', CURRENT_TIMESTAMP, '###SLICE_VALUE###')"


flux.hdfs.output-format = "csv"
flux.hdfs.output-has-header = "true"
flux.hdfs.output-separator = ";"
flux.hdfs.output-mode = "overwrite"
flux.hdfs.output-path = "/PROD/EXPORT/EXPORT_CBM_VAS_OCM_NEW"
