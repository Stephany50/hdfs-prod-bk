flux.yarn.queue = "compute"
flux.log-level = "ERROR"

flux.input-type = "HIVE"
flux.output-type = "HDFS"
flux.spark.setup-conf += {"key": "spark.sql.crossJoin.enabled", "value": "true"}
flux.spark.setup-conf += {"key": "hive.exec.dynamic.partition.mode","value": "nonstrict"}
flux.spark.setup-conf += {"key": "spark.sql.files.ignoreCorruptFiles","value": "true"}
flux.spark.setup-var +=  {"key": "job_instanceid", "value": "LOAD_EXPORT_TDD_ONBOARDING"}

flux.name = "LOAD_EXPORT_TDD_ONBOARDING"

flux.has-date-processing = true

flux.slice-value-type = "DAILY"
flux.slice-begin-value = -7
flux.slice-end-value = -1
flux.slice-step-value = 1
flux.slice-begin-value-offset = 0
flux.slice-end-value-offset = 0
flux.slice-has-state-query=true
flux.slice-state-query="""
select
case when count(*) = 15 then 'OK' else 'NOK' end
from
(
select
status,
row_number() over(partition by event_date order by insert_date desc) rang
from mon.export_history
where job_instanceid = '${hivevar:job_instanceid}'
and event_date between date_sub(current_date, 15) and date_sub(current_date, 1)
) R
where status = 'OK' and rang = 1
"""
flux.slice-has-filter-query = true
flux.slice-filter-query = """
select
date_format(datecode,'yyyy-MM-dd')
from
dim.dt_dates
where datecode between date_sub(current_date, 15) and date_sub(current_date, 1)
and datecode in
(
select event_date
from
(
select
*,
row_number() over(partition by event_date order by insert_date desc) rang
from mon.export_history
where job_instanceid = '${hivevar:job_instanceid}'
and event_date between date_sub(current_date, 15) and date_sub(current_date, 1)
) T
where status = 'OK' and rang = 1
)
"""
flux.slice-date-format = "yyyy-MM-dd"

flux.has-pre-queries = true
flux.has-exec-queries = true
flux.has-post-queries = true

flux.inline.exec-queries += "add jar hdfs:///PROD/UDF/hive-udf-1.0.jar"
flux.inline.exec-queries += "DROP TEMPORARY  FUNCTION IF EXISTS GET_NNP_MSISDN_9DIGITS"
flux.inline.exec-queries += "create temporary function GET_NNP_MSISDN_9DIGITS as 'cm.orange.bigdata.udf.GetNnpMsisdn9Digits'"

flux.inline.pre-exec-queries += """
SELECT IF(
T_1.AGG_EXIST > 0 AND
T_2.NB_EXPORT < 1
,"OK","NOK")
FROM
(SELECT COUNT(*) MON.SPARK_FT_CONTRACT_SNAPSHOT WHERE event_date = DATE_ADD('###SLICE_VALUE###', 1)) T_1,
(
select count(*) NB_EXPORT from
(select * from (SELECT * FROM MON.EXPORT_HISTORY where event_date='###SLICE_VALUE###' and JOB_INSTANCEID='LOAD_EXPORT_TDD_ONBOARDING' ORDER BY INSERT_DATE DESC LIMIT 1)  T where T.STATUS = 'OK') M
) T_2

"""

flux.inline.exec-queries += """
SELECT 
access_key,
B.principal_in AS principal_in,
B.principal_ussd AS principal_ussd,
profile,
activation_date
FROM 
(
SELECT 
access_key,
profile,
activation_date
FROM MON.SPARK_FT_CONTRACT_SNAPSHOT
WHERE event_date = DATE_ADD('###SLICE_VALUE###', 1)
AND profile LIKE '%INFINITY%'
AND activation_date = '###SLICE_VALUE###'
) A 
LEFT JOIN 
(
SELECT * FROM MON.SPARK_PERSONAL_TDD
) B 
ON GET_NNP_MSISDN_9DIGITS(A.access_key) = GET_NNP_MSISDN_9DIGITS(B.acc_nbr)
"""

flux.inline.post-exec-queries += "INSERT INTO MON.EXPORT_HISTORY VALUES ('${hivevar:job_instanceid}', 'OK', CURRENT_TIMESTAMP, '###SLICE_VALUE###')"


flux.hdfs.output-format = "csv"
flux.hdfs.output-has-header = "true"
flux.hdfs.output-separator = ";"
flux.hdfs.output-mode = "overwrite"
flux.hdfs.output-path = "/PROD/EXPORT/EXPORT_ONBOARDING"
