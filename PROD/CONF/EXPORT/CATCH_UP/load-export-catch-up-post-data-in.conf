flux.yarn.queue = "compute"
flux.log-level = "ERROR"

flux.input-type = "HIVE"
flux.output-type = "HDFS"

flux.spark.setup-conf += {"key": "spark.sql.crossJoin.enabled", "value": "true"}
flux.spark.setup-conf += {"key": "hive.exec.dynamic.partition.mode","value": "nonstrict"}

flux.spark.setup-var +=  {"key": "job_instanceid", "value": "LOAD_EXPORT_CATCH_UP_DATA_POST"}

flux.spark.setup-var +=  {"key": "cdr_type","value": "ZTE_DATA_POST_CDR"}
flux.spark.setup-var +=  {"key": "it_table_name","value": "CDR.SPARK_IT_ZTE_DATA_POST"}
flux.spark.setup-var +=  {"key": "it_partition_column","value": "START_DATE"}
flux.spark.setup-var +=  {"key": "date_offset","value": 3}

flux.name = "LOAD_EXPORT_CATCH_UP_DATA_POST"

flux.has-date-processing = true

flux.slice-value-type = "DAILY"
flux.slice-begin-value = -15
flux.slice-end-value = -1
flux.slice-step-value = 1
flux.slice-begin-value-offset = 0
flux.slice-end-value-offset = 0
flux.slice-has-state-query=false
flux.slice-state-query="""
select
    case when DIS_DATE = 15 then 'OK' else 'NOK' end
from
(
SELECT 
COUNT(DISTINCT CASE WHEN DIS_FILE = 0 THEN CHECK_DATE END) DIS_DATE
FROM (
	SELECT 
	CHECK_DATE, COUNT(DISTINCT FILE_NAME) DIS_FILE
	FROM (
		SELECT
		 A.FILE_NAME, A.CHECK_DATE
		FROM
		 (
			SELECT replace(CDR_NAME, 'pla_', '') FILE_NAME, CDR_DATE CHECK_DATE 
				FROM CDR.SPARK_IT_ZTE_CHECK_FILE 
				WHERE CDR_DATE BETWEEN DATE_SUB('###SLICE_VALUE###', 15) AND '###SLICE_VALUE###' AND CDR_TYPE = '${hivevar:cdr_type}'
				GROUP BY CDR_DATE, replace(CDR_NAME, 'pla_', '')
			UNION
			SELECT replace(FILE_NAME, 'pla_', '') FILE_NAME, FILE_DATE CHECK_DATE  
				FROM CDR.SPARK_IT_ZTE_CHECK_FILE_ALL 
				WHERE FILE_DATE BETWEEN DATE_SUB('###SLICE_VALUE###', 15) AND '###SLICE_VALUE###' AND FILE_TYPE = '${hivevar:cdr_type}'
				GROUP BY FILE_DATE, replace(CDR_NAME, 'pla_', '') 
		 ) A
		 LEFT JOIN (
			SELECT ${hivevar:it_partition_column} CHECK_DATE, ORIGINAL_FILE_NAME  
				FROM ${hivevar:it_table_name} B
				WHERE ${hivevar:it_partition_column} BETWEEN DATE_SUB('###SLICE_VALUE###', 15) AND '###SLICE_VALUE###'
				GROUP BY ${hivevar:it_partition_column}, ORIGINAL_FILE_NAME
		 ) B
		 ON A.FILE_NAME = B.ORIGINAL_FILE_NAME AND A.CHECK_DATE = B.CHECK_DATE
		 WHERE B.ORIGINAL_FILE_NAME IS NULL
	 ) TAB
	 GROUP BY CHECK_DATE
 ) TAB1
 ) T
"""
flux.slice-has-filter-query = false
flux.slice-filter-query = """ 
SELECT date_format(CHECK_DATE, 'yyyy-MM-dd') 
FROM (
	SELECT 
	CHECK_DATE, COUNT(DISTINCT FILE_NAME) DIS_FILE
	FROM (
		SELECT
		A.FILE_NAME, A.CHECK_DATE
		FROM
		(
			SELECT replace(CDR_NAME, 'pla_', '') FILE_NAME, CDR_DATE CHECK_DATE 
				FROM CDR.SPARK_IT_ZTE_CHECK_FILE 
				WHERE CDR_DATE BETWEEN DATE_SUB('###SLICE_VALUE###', 15) AND '###SLICE_VALUE###' AND CDR_TYPE = '${hivevar:cdr_type}'
				GROUP BY CDR_DATE, replace(CDR_NAME, 'pla_', '')
			UNION
			SELECT replace(FILE_NAME, 'pla_', '') FILE_NAME, FILE_DATE CHECK_DATE  
				FROM CDR.SPARK_IT_ZTE_CHECK_FILE_ALL 
				WHERE FILE_DATE BETWEEN DATE_SUB('###SLICE_VALUE###', 15) AND '###SLICE_VALUE###' AND FILE_TYPE = '${hivevar:cdr_type}'
				GROUP BY FILE_DATE, replace(CDR_NAME, 'pla_', '') 
		) A
		LEFT JOIN (
			SELECT ${hivevar:it_partition_column} CHECK_DATE, ORIGINAL_FILE_NAME  
				FROM ${hivevar:it_table_name} B
				WHERE ${hivevar:it_partition_column} BETWEEN DATE_SUB('###SLICE_VALUE###', 15) AND '###SLICE_VALUE###'
				GROUP BY ${hivevar:it_partition_column}, ORIGINAL_FILE_NAME
		) B
		ON A.FILE_NAME = B.ORIGINAL_FILE_NAME AND A.CHECK_DATE = B.CHECK_DATE
		WHERE B.ORIGINAL_FILE_NAME IS NULL
	) TAB
	GROUP BY CHECK_DATE
) T
WHERE DIS_FILE=0
"""
flux.slice-date-format = "yyyy-MM-dd"

flux.has-pre-queries = true
flux.has-exec-queries = true
flux.has-post-queries = true

flux.pre-exec-queries += "/PROD/SCRIPTS/EXPORT/CATCH_UP/prequery_export_catch_up_in.hql"

flux.exec-queries += "/PROD/SCRIPTS/EXPORT/CATCH_UP/query_export_catch_up_in.hql"

flux.hdfs.output-format = "csv"
flux.hdfs.output-has-header = "true"
flux.hdfs.output-separator = ";"
flux.hdfs.output-mode = "overwrite"
flux.hdfs.output-path = "/PROD/EXPORT/CATCH_UP/DATA_POST_IN"
