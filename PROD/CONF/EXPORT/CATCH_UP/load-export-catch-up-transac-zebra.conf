flux.yarn.queue = "compute"
flux.log-level = "ERROR"

flux.input-type = "HIVE"
flux.output-type = "HDFS"

flux.spark.setup-conf += {"key": "spark.sql.crossJoin.enabled", "value": "true"}
flux.spark.setup-conf += {"key": "hive.exec.dynamic.partition.mode","value": "nonstrict"}
flux.spark.setup-conf += {"key": "spark.sql.files.ignoreCorruptFiles","value": "true"}

flux.spark.setup-var +=  {"key": "cdr_zebra_name","value": "Transac"}
flux.spark.setup-var +=  {"key": "it_table_name","value": "CDR.SPARK_IT_ZEBRA_TRANSAC"}
flux.spark.setup-var +=  {"key": "it_partition_column","value": "TRANSFER_DATE"}
flux.spark.setup-var +=  {"key": "date_offset","value": 7}
flux.spark.setup-var +=  {"key": "job_instanceid", "value": "LOAD_EXPORT_CATCH_UP_TRANSACZEBRA"}

flux.name = "LOAD_EXPORT_CATCH_UP_TRANSACZEBRA"

flux.has-date-processing = true

flux.slice-value-type = "DAILY"
flux.slice-begin-value = -1
flux.slice-end-value = -1
flux.slice-step-value = 1
flux.slice-begin-value-offset = 0
flux.slice-end-value-offset = 0
flux.slice-has-state-query=true
flux.slice-state-query="""
select
    case when DIS_DATE = 1 then 'OK' else 'NOK' end
from
(
	SELECT
		COUNT(DISTINCT CASE WHEN DIS_FILE = 0 THEN CDR_DATE END) DIS_DATE
	FROM
	(
		SELECT
			CDR_DATE
			, COUNT(DISTINCT FILE_NAME) DIS_FILE
		FROM
		(
			SELECT
				FILE_NAME
				, CDR_DATE
			FROM
			(
				SELECT 
				reverse(split(reverse(CDR_NAME), '[/]')[0]) FILE_NAME
				, CDR_DATE
				FROM CDR.SPARK_IT_ZEBRA_CHECKFILE 
				WHERE CDR_DATE between date_sub('###SLICE_VALUE###', 0) and '###SLICE_VALUE###' and CDR_NAME like '%${hivevar:cdr_zebra_name}%'
				GROUP BY reverse(split(reverse(CDR_NAME), '[/]')[0]), CDR_DATE
			) A
			LEFT JOIN
			(
			SELECT
				ORIGINAL_FILE_NAME
				, ${hivevar:it_partition_column} CHECK_DATE
			FROM ${hivevar:it_table_name} 
			WHERE ${hivevar:it_partition_column} BETWEEN date_sub('###SLICE_VALUE###', 0) AND '###SLICE_VALUE###' 
			GROUP BY ORIGINAL_FILE_NAME, ${hivevar:it_partition_column}
			) B
			ON A.CDR_DATE = B.CHECK_DATE AND split(B.ORIGINAL_FILE_NAME, '_')[0] = split(A.FILE_NAME, '\\.')[0]
			WHERE B.ORIGINAL_FILE_NAME IS NULL
		) TAB
		GROUP BY CDR_DATE
	) T
) U
"""
flux.slice-has-filter-query = true
flux.slice-filter-query = """ 
SELECT date_format(CDR_DATE, 'yyyy-MM-dd') 
FROM 
(
	SELECT
		CDR_DATE
		, COUNT(DISTINCT FILE_NAME) DIS_FILE
	FROM
	(
		SELECT
			FILE_NAME
			, CDR_DATE
		FROM
		(
			SELECT 
			reverse(split(reverse(CDR_NAME), '[/]')[0]) FILE_NAME
			, CDR_DATE
			FROM CDR.SPARK_IT_ZEBRA_CHECKFILE 
			WHERE CDR_DATE between date_sub('###SLICE_VALUE###', 0) and '###SLICE_VALUE###' and CDR_NAME like '%${hivevar:cdr_zebra_name}%'
			GROUP BY reverse(split(reverse(CDR_NAME), '[/]')[0]), CDR_DATE
		) A
		LEFT JOIN
		(
			SELECT
				ORIGINAL_FILE_NAME
				, ${hivevar:it_partition_column} CHECK_DATE
			FROM ${hivevar:it_table_name} 
			WHERE ${hivevar:it_partition_column} BETWEEN date_sub('###SLICE_VALUE###', 0) AND '###SLICE_VALUE###' 
			GROUP BY ORIGINAL_FILE_NAME, ${hivevar:it_partition_column}
		) B
		ON A.CDR_DATE = B.CHECK_DATE AND split(B.ORIGINAL_FILE_NAME, '_')[0] = split(A.FILE_NAME, '\\.')[0]
		WHERE B.ORIGINAL_FILE_NAME IS NULL
	) TAB
	GROUP BY CDR_DATE
) T
WHERE DIS_FILE=0
"""
flux.slice-date-format = "yyyy-MM-dd"

flux.has-pre-queries = true
flux.has-exec-queries = true
flux.has-post-queries = true

flux.pre-exec-queries += "/PROD/SCRIPTS/EXPORT/CATCH_UP/prequery_export_catch_up_zebra.hql"

flux.exec-queries += "/PROD/SCRIPTS/EXPORT/CATCH_UP/query_export_catch_up_zebra.hql"

flux.hdfs.output-format = "csv"
flux.hdfs.output-has-header = "true"
flux.hdfs.output-separator = ";"
flux.hdfs.output-mode = "overwrite"
flux.hdfs.output-path = "/PROD/EXPORT/CATCH_UP/TRANSACZEBRA"
