
flux.yarn.queue = "compute"
flux.log-level = "ERROR"

flux.input-type = "HIVE"
flux.output-type = "HIVE"

flux.spark.setup-conf = []

flux.setup-conf = []

flux.spark.setup-conf += {"key": "spark.sql.crossJoin.enabled", "value": "true"}
flux.spark.setup-conf += {"key": "hive.exec.dynamic.partition.mode","value": "nonstrict"}

flux.name = "LOAD_SPARK_FT_MSISDN_REVENU_FOR_DAILY_DROP_SUBS"

flux.has-date-processing = true

flux.slice-value-type = "DAILY"
flux.slice-begin-value = -126
flux.slice-end-value = -80
flux.slice-step-value = 1
flux.slice-begin-value-offset = 0
flux.slice-end-value-offset = 0
flux.slice-has-state-query=false
flux.slice-state-query="""
select
    if(count(*)=20,'OK','NOK')
from dim.dt_dates
where datecode between date_sub(current_date, 20) and date_sub(current_date, 1)
    and datecode in (select distinct event_date from mon.spark_ft_msisdn_revenu_for_daily_drop_subs where event_date between date_sub(current_date, 20) and date_sub(current_date, 1))
"""
flux.slice-has-filter-query = false
flux.slice-filter-query = """
select
    date_format(datecode,'yyyy-MM-dd')
from dim.dt_dates
where datecode between date_sub(current_date, 20) and date_sub(current_date, 1)
    and datecode in (select distinct event_date from mon.spark_ft_msisdn_revenu_for_daily_drop_subs where event_date between date_sub(current_date, 20) and date_sub(current_date, 1))
"""
flux.slice-date-format = "yyyy-MM-dd"

flux.has-pre-queries = true
flux.has-exec-queries = true
flux.has-post-queries = false

flux.inline.pre-exec-queries += """
SELECT IF(
    T_1.FT_EXISTS = 0
    AND T_2.FT_EXISTS > 1
    AND T_3.FT_EXISTS > 1
    , 'OK'
    , 'NOK'
)
FROM
(SELECT COUNT(*) FT_EXISTS FROM mon.spark_ft_msisdn_revenu_for_daily_drop_subs WHERE EVENT_DATE='###SLICE_VALUE###') T_1,
(SELECT COUNT(*) FT_EXISTS FROM mon.spark_ft_msisdn_subs_bal WHERE EVENT_DATE='###SLICE_VALUE###') T_2,
(SELECT COUNT(*) FT_EXISTS FROM mon.spark_ft_msisdn_revenu_for_daily_drop_subs WHERE EVENT_DATE=date_sub('###SLICE_VALUE###', 1)) T_3
"""
flux.inline.exec-queries += """
insert into mon.spark_ft_msisdn_revenu_for_daily_drop_subs
select
    z.*
    , current_timestamp insert_date
    , '###SLICE_VALUE###' event_date
from
(
    select
        msisdn
        , revenu_for_bal*(
            (case when dt_balance_usage.Data_Local is not null then nvl(ref_souscription.coeff_data, 0) else 0 end)
            + (case when dt_balance_usage.Data_roaming is not null then nvl(ref_souscription.coeff_roaming_data, 0) else 0 end)
        )/100/a.validite revenu_data_per_day
        , revenu_for_bal*(
            (case when dt_balance_usage.Voice_Onnet is not null then nvl(ref_souscription.coeff_onnet, 0) else 0 end)
            + (case when dt_balance_usage.Voice_Offnet is not null then nvl(ref_souscription.coeff_offnet, 0) else 0 end)
            + (case when dt_balance_usage.Voice_International is not null then nvl(ref_souscription.coeff_inter, 0) else 0 end)
            + (case when dt_balance_usage.Voice_Roaming is not null then nvl(ref_souscription.coeff_roaming_voix, 0) else 0 end)
        )/100/a.validite revenu_voix_per_day
        , revenu_for_bal*(
            (case when dt_balance_usage.SMS_Onnet is not null or dt_balance_usage.SMS_Offnet is not null or dt_balance_usage.SMS_International is not null then nvl(ref_souscription.coef_sms, 0) else 0 end)
            + (case when dt_balance_usage.SMS_Roaming is not null then nvl(ref_souscription.coeff_roaming_sms, 0) else 0 end)
        )/100/a.validite revenu_sms_per_day
        , revenu_for_bal*if(
            (
                (case when dt_balance_usage.Voice_Onnet is not null then nvl(ref_souscription.coeff_onnet, 0) else 0 end)
                + (case when dt_balance_usage.Voice_Offnet is not null then nvl(ref_souscription.coeff_offnet, 0) else 0 end)
                + (case when dt_balance_usage.Voice_International is not null then nvl(ref_souscription.coeff_inter, 0) else 0 end)
                + (case when dt_balance_usage.Voice_Roaming is not null then nvl(ref_souscription.coeff_roaming_voix, 0) else 0 end)
                + (case when dt_balance_usage.SMS_Onnet is not null or dt_balance_usage.SMS_Offnet is not null or dt_balance_usage.SMS_International is not null then nvl(ref_souscription.coef_sms, 0) else 0 end)
                + (case when dt_balance_usage.SMS_Roaming is not null then nvl(ref_souscription.coeff_roaming_sms, 0) else 0 end)
                + (case when dt_balance_usage.Data_Local is not null then nvl(ref_souscription.coeff_data, 0) else 0 end)
                + (case when dt_balance_usage.Data_roaming is not null then nvl(ref_souscription.coeff_roaming_data, 0) else 0 end)
            ) == 0, 100, 0
        )/100 other_revenu_per_day
        , (a.validite - 1) remaining_days
    from
    (
        select
            msisdn
            , bdle_name
            , revenu_for_bal
            , validite
            , BEN_ACCT_ID
        from mon.spark_ft_msisdn_subs_bal
        where event_date = '###SLICE_VALUE###'
    ) a
    left join dim.dt_politique_forfaits d on trim(upper(a.bdle_name)) = trim(upper(d.OFFER_NAME)) and a.BEN_ACCT_ID = d.std_code
    left join dim.dt_balance_usage dt_balance_usage ON a.BEN_ACCT_ID = cast(dt_balance_usage.Acct_res_id as bigint)
    left join DIM.DT_CBM_REF_SOUSCRIPTION_PRICE ref_souscription on trim(upper(a.bdle_name)) = trim(upper(ref_souscription.BDLE_NAME))
    where upper(d.comments) like '%QUOTIDIEN%'
    union all
    select
        msisdn
        , revenu_data_per_day
        , revenu_voix_per_day
        , revenu_sms_per_day
        , other_revenu_per_day
        , (remaining_days - 1) remaining_days
    from mon.spark_ft_msisdn_revenu_for_daily_drop_subs
    where event_date = date_sub('###SLICE_VALUE###', 1) and remaining_days > 0
) z
"""


