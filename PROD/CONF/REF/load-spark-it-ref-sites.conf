flux.yarn.queue = "collect"
flux.log-level = "ERROR"

flux.input-type = "HIVE" // Possible values are HDFS, HIVE
flux.output-type = "HIVE" // Possible values are HDFS, HIVE, JDBC

flux.spark.setup-conf = []

flux.setup-conf = []


flux.spark.setup-conf += {"key": "spark.sql.crossJoin.enabled", "value": "true"}
flux.spark.setup-conf += {"key": "hive.exec.dynamic.partition.mode","value": "nonstrict"}
flux.spark.setup-conf += {"key": "spark.sql.files.ignoreCorruptFiles","value": "true"}


flux.name = "LOAD_SPARK_IT_DIM_REF_SITES"

flux.has-date-processing = false

flux.hdfs.move-to-tt = true
flux.hdfs.src-temp-tt-dir-regex = "/PROD/RAW/REF_SITES/*sites*"
flux.hdfs.dest-temp-tt-dir = "/PROD/TT/REF_SITES"

flux.hdfs.move-to-arch = true
flux.hdfs.src-arch-dir-regex = "/PROD/TT/REF_SITES/*"
flux.hdfs.dest.arch-dir = "/PROD/ARCH/REF_SITES"
flux.hdfs.dest.has-sub-dir = true
flux.hdfs.dest.has-sub-dir-extractor-regex = "(_.*_)"

flux.has-pre-queries = true
flux.has-exec-queries = true
flux.has-post-queries = false


flux.inline.pre-exec-queries += "SELECT IF(COUNT_TT>20000,'OK','NOK' ) STATUS FROM (SELECT COUNT(*) COUNT_TT  FROM CDR.tt_dim_ref_sites) a"


flux.inline.exec-queries += "SET hive.exec.dynamic.partition=true"
flux.inline.exec-queries += "SET hive.exec.dynamic.partition.mode=nonstrict"
flux.inline.exec-queries += "SET hive.enforce.bucketing=false"
flux.inline.exec-queries += "SET hive.enforce.sorting=false"

flux.inline.exec-queries += "truncate table dim.spark_dt_gsm_cell_code"

flux.exec-queries += "/PROD/SCRIPTS/IT/REF/REF_SITES/insert_into_spark_it_ref_sites.hql"
flux.exec-queries += "/PROD/SCRIPTS/IT/REF/REF_SITES/insert_into_spark_dt_gsm_cell_code.hql"

