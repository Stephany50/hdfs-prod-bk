INSERT INTO MON.SPARK_FT_PULSE_SPIDER_POINT

CREATE TABLE TMP.TT_SOUSCRIPTION_PARRAINE as

SELECT MSISDN_PARRAIN, REGISTER_TIME, C.*, CASE WHEN TRANSACTION_DATETIME BETWEEN REGISTER_TIME AND FROM_UNIXTIME(UNIX_TIMESTAMP(REGISTER_TIME,'yyyy-MM-dd HH:mm:ss')+48*3600) THEN 'OK' else 'NOK' END STATUT
FROM CDR.SPARK_IT_PULSE_SPIDER_PARRAIN T
LEFT JOIN (
SELECT SERVED_PARTY_MSISDN, TRANSACTION_DATE, TRANSACTION_TIME, SUBSCRIPTION_SERVICE_DETAILS, RATED_AMOUNT, --SUBSCRIPTION_CHANNEL, SUBSCRIPTION_SERVICE,
    FROM_UNIXTIME(UNIX_TIMESTAMP(concat(TRANSACTION_DATE,' ', TRANSACTION_TIME),'yyyy-MM-dd HHmmss')) TRANSACTION_DATETIME, BEGIN_DATE, END_DATE,
    ROW_NUMBER() OVER (PARTITION BY SERVED_PARTY_MSISDN order by TRANSACTION_TIME) RN, COUNT(*) OVER (PARTITION BY SERVED_PARTY_MSISDN order by TRANSACTION_TIME) NBRE_SUBS
FROM MON.SPARK_FT_SUBSCRIPTION A
JOIN CDR.SPARK_IT_PULSE_SPIDER_FORFAIT B ON (IPP_NAME = SUBSCRIPTION_SERVICE_DETAILS or IPP_CODE = SUBSCRIPTION_SERVICE_DETAILS)
WHERE TRANSACTION_DATE='###SLICE_VALUE###'
    AND ORIGINAL_FILE_DATE = ( SELECT MAX(ORIGINAL_FILE_DATE) FROM CDR.SPARK_IT_PULSE_SPIDER_FORFAIT WHERE ORIGINAL_FILE_DATE BETWEEN SUBSTR('###SLICE_VALUE###',1,7)||'-01' AND '###SLICE_VALUE###' )
    AND TRANSACTION_DATE BETWEEN BEGIN_DATE AND END_DATE
) C ON SERVED_PARTY_MSISDN = MSISDN_PARRAINE and RN=1
WHERE T.ORIGINAL_FILE_DATE BETWEEN DATE_SUB('###SLICE_VALUE###',2) and '###SLICE_VALUE###'
    --AND TRANSACTION_DATETIME BETWEEN REGISTER_TIME AND FROM_UNIXTIME(UNIX_TIMESTAMP(REGISTER_TIME,'yyyy-MM-dd HH:mm:ss')+48*3600)
ORDER BY SERVED_PARTY_MSISDN
-- ajouter un contrôle sur le fait si on déjà pris en compte une souscription pour  validation

select transactiontion
from TMP.TT_SOUSCRIPTION_PARRAINE
where rn=1 and statut='OK'

INSERT INTO MON.SPARK_FT_PULSE_SPIDER_POINT
SELECT SUBSTR(NVL(TRANSACTION_DATE, '###SLICE_VALUE###'), 1,7) EVENT_MONTH, a.MSISDN_PARRAIN,
    nvl(B.MONTANT,0.00) MONTANT, nvl(B.NOMBRE_POINTS,0) NOMBRE_POINTS, nvl(B.NOMBRE_SOUSCRIPTIONS,0) NOMBRE_SOUSCRIPTIONS, nvl(B.NOMBRE_SOUSCRIPTEURS,0) NOMBRE_SOUSCRIPTEURS,
    nvl(B.MONTANT,0.00)+nvl(C.CUMUL_MONTANT,0.00) CUMUL_MONTANT, nvl(B.NOMBRE_POINTS,0)+nvl(C.CUMUL_POINTS,0) CUMUL_POINTS, nvl(B.NOMBRE_SOUSCRIPTIONS,0)+nvl(C.CUMUL_SOUSCRIPTIONS,0) CUMUL_SOUSCRIPTIONS,
    nvl(B.NOMBRE_SOUSCRIPTEURS,0)+nvl(C.CUMUL_SOUSCRIPTEURS,0) CUMUL_SOUSCRIPTEURS, nvl(B.NOMBRE_POINTS,0)+nvl(D.CUMUL_ANNUEL_POINTS,0) CUMUL_ANNUEL_POINTS,
    current_timestamp INSERT_DATE, NVL(TRANSACTION_DATE, '###SLICE_VALUE###') EVENT_DATE
FROM (
    SELECT DISTINCT MSISDN_PARRAIN FROM CDR.SPARK_IT_PULSE_SPIDER_PARRAIN a
    WHERE a.ORIGINAL_FILE_DATE BETWEEN SUBSTR('###SLICE_VALUE###',1,7)||'-01' and '###SLICE_VALUE###' -- A COMMENTER
) A LEFT JOIN (
    SELECT TRANSACTION_DATE, MSISDN_PARRAIN, SUM(RATED_AMOUNT) MONTANT, (10*COUNT(*))+TRUNC(SUM(RATED_AMOUNT)/25) NOMBRE_POINTS,
        COUNT(*) NOMBRE_SOUSCRIPTIONS, COUNT(DISTINCT SERVED_PARTY_MSISDN) NOMBRE_SOUSCRIPTEURS
    FROM TMP.TT_SOUSCRIPTION_PARRAINE WHERE TRANSACTION_DATE = '###SLICE_VALUE###'
        AND RN=1 AND STATUT='OK' GROUP BY TRANSACTION_DATE, MSISDN_PARRAIN
) B ON A.MSISDN_PARRAIN = B.MSISDN_PARRAIN
LEFT JOIN MON.SPARK_FT_PULSE_SPIDER_POINT C ON A.MSISDN_PARRAIN = C.MSISDN_PARRAIN AND C.EVENT_DATE = date_sub('###SLICE_VALUE###',1) and C.EVENT_MONTH=SUBSTR('###SLICE_VALUE###',1,7)
LEFT JOIN MON.SPARK_FT_PULSE_SPIDER_POINT D ON A.MSISDN_PARRAIN = D.MSISDN_PARRAIN AND D.EVENT_DATE = date_sub('###SLICE_VALUE###',1)

-- un abonné ne peut être parrainé plus de 02 fois par mois/challenge
-- un parain ne peut pas parrainé la même personne plus d'1e fois par mois/challenge

Mettre en place une table compteur pour chaque numéro parrain et fiole afin de traiter ces problèmes.


SELECT TRANSACTION_DATE, TRANSACTION_TIME, SERVED_PARTY_MSISDN, SUBSCRIPTION_SERVICE_DETAILS, RATED_AMOUNT, SUBSCRIPTION_CHANNEL, SUBSCRIPTION_SERVICE, BEGIN_DATE, END_DATE
FROM MON.SPARK_FT_SUBSCRIPTION A
JOIN CDR.SPARK_IT_PULSE_SPIDER_FORFAIT B ON (IPP_NAME = SUBSCRIPTION_SERVICE_DETAILS or IPP_CODE = SUBSCRIPTION_SERVICE_DETAILS)
WHERE TRANSACTION_DATE='###SLICE_VALUE###'
    AND ORIGINAL_FILE_DATE = ( SELECT MAX(ORIGINAL_FILE_DATE) FROM CDR.SPARK_IT_PULSE_SPIDER_FORFAIT WHERE ORIGINAL_FILE_DATE BETWEEN SUBSTR('###SLICE_VALUE###',1,7)||'-01' AND '###SLICE_VALUE###' )
    AND TRANSACTION_DATE BETWEEN BEGIN_DATE AND END_DATE

FROM_UNIXTIME(UNIX_TIMESTAMP('2019-12-10 031005', 'yyyy-MM-dd HHmmss')+48*3600)