create FUNCTION     FN_BDI (p_slice_value IN VARCHAR2) RETURN VARCHAR2 IS
-- Desc: Calcul de la table FT_BDI
-- MAJ : christian.nankam@orange.com
-- Date : 21/02/2018
        N_RESULT NUMBER ;

        N_IS_CURR_SLICE_CAN_BE_DONE NUMBER;
        
        N_DATAMART_MONTH NUMBER;
        N_DATA_CONSO_MONTH NUMBER;
        N_DATAMART_OM NUMBER;
        N_ACC_ACTIVITY NUMBER;
        N_CONT_SNAP NUMBER;
        N_POST_MONTHLY NUMBER;

        S_SLICE_VALUE VARCHAR2(20) := TRIM (P_SLICE_VALUE);
        
        D_SLICE_VALUE DATE;
        
        S_PREV_DATE VARCHAR2(20);
        
        MOIS_1 VARCHAR2(20);
        MOIS_2 VARCHAR2(20);
        MOIS_3 VARCHAR2(20);
        --
BEGIN

        D_SLICE_VALUE := TO_DATE(S_SLICE_VALUE, 'YYYYMMDD');
        
        S_PREV_DATE := TO_CHAR(D_SLICE_VALUE - 1, 'YYYYMMDD');
        
        MOIS_1 := TO_CHAR(ADD_MONTHS(D_SLICE_VALUE, -1), 'YYYYMM');
        MOIS_2 := TO_CHAR(ADD_MONTHS(D_SLICE_VALUE, -2), 'YYYYMM');
        MOIS_3 := TO_CHAR(ADD_MONTHS(D_SLICE_VALUE, -3), 'YYYYMM');
        
--      vérification des conditions pour la correction
        SELECT 
           CASE
                -- OK
                WHEN
                    -- la journée n'est pas encore calcule
                    MON.FN_VALIDATE_DAY2DAY_EXIST ('MON.FT_BDI', 'EVENT_DATE'
                                                            , S_SLICE_VALUE, S_SLICE_VALUE, 10, '') = 0
                    /*AND
                    MON.FN_VALIDATE_DAY2DAY_EXIST ('MON.FT_BDI', 'EVENT_DATE'
                                                            , S_PREV_DATE, S_PREV_DATE, 10, '') = 1*/                      
                    AND
                    MON.FN_VALIDATE_DAY2DAY_EXIST ('CDR.IT_BDI', 'ORIGINAL_FILE_DATE'
                                                            , TO_CHAR(D_SLICE_VALUE+1, 'YYYYMMDD'), TO_CHAR(D_SLICE_VALUE+1, 'YYYYMMDD'), 10, '') = 1
                    --AND
                    --MON.FN_VALIDATE_DAY2DAY_EXIST
                       -- ('MON.FT_CONTRACT_SNAPSHOT',
                         --'EVENT_DATE',
                         --S_SLICE_VALUE,
                         --S_SLICE_VALUE,
                         --10,
                        -- ''
                        --) = 1
                    --AND
                    --MON.FN_VALIDATE_MONTH2MONTH_EXIST ('MON.FT_MARKETING_DATAMART_MONTH', 'EVENT_MONTH'
                                                            --, TO_CHAR(ADD_MONTHS(D_SLICE_VALUE, -1), 'YYYYMM'), --TO_CHAR(ADD_MONTHS(D_SLICE_VALUE, -1), 'YYYYMM'), 10, '') = 1
                    --AND
                    --MON.FN_VALIDATE_MONTH2MONTH_EXIST ('MON.FT_DATA_CONSO_MSISDN_MONTH', 'EVENT_MONTH'
                                                            --, TO_CHAR(ADD_MONTHS(D_SLICE_VALUE, -1), 'YYYYMM'), --TO_CHAR(ADD_MONTHS(D_SLICE_VALUE, -1), 'YYYYMM'), 10, '') = 1
                    --AND
                    --MON.FN_VALIDATE_MONTH2MONTH_EXIST ('MON.FT_DATAMART_OM_MONTH', 'MOIS'
                                                           -- , TO_CHAR(ADD_MONTHS(D_SLICE_VALUE, -1), 'YYYYMM'), --TO_CHAR(ADD_MONTHS(D_SLICE_VALUE, -1), 'YYYYMM'), 10, '') = 1              
                    /*AND
                    MON.FN_VALIDATE_MONTH2MONTH_EXIST ('MON.FT_MSISDN_POST_MONTHLY', 'MOIS'
                                                            , TO_CHAR(ADD_MONTHS(D_SLICE_VALUE, -1), 'YYYYMM'), TO_CHAR(ADD_MONTHS(D_SLICE_VALUE, -1), 'YYYYMM'), 10, '') = 1*/              
                    --AND
                    --MON.FN_VALIDATE_DAY2DAY_EXIST ('MON.FT_ACCOUNT_ACTIVITY', 'EVENT_DATE'
                                                            --, S_SLICE_VALUE, S_SLICE_VALUE, 10, '') = 1         
                THEN 1
                -- NOK 
                ELSE  0
           END  INTO n_result
        FROM DUAL;  

-- Test sur DataMart_Month afin de savoir si le mois m-1 est disponible
 SELECT 
   CASE
        -- OK
        WHEN                
           MON.FN_VALIDATE_MONTH2MONTH_EXIST ('MON.FT_MARKETING_DATAMART_MONTH', 'EVENT_MONTH'
                                                    , TO_CHAR(ADD_MONTHS(D_SLICE_VALUE, -1), 'YYYYMM'), TO_CHAR(ADD_MONTHS(D_SLICE_VALUE, -1), 'YYYYMM'), 10, '') = 1        
        THEN 1
        -- NOK 
        ELSE  0
   END  INTO N_DATAMART_MONTH
FROM DUAL; 

-- Test sur Conso_Month afin de savoir si le mois m-1 est disponible
 SELECT 
   CASE
        -- OK
        WHEN                
            MON.FN_VALIDATE_MONTH2MONTH_EXIST ('MON.FT_DATA_CONSO_MSISDN_MONTH', 'EVENT_MONTH'
                                              , TO_CHAR(ADD_MONTHS(D_SLICE_VALUE, -1), 'YYYYMM'), TO_CHAR(ADD_MONTHS(D_SLICE_VALUE, -1), 'YYYYMM'), 10, '') = 1
                    
        THEN 1
        -- NOK 
        ELSE  0
   END  INTO N_DATA_CONSO_MONTH
FROM DUAL;
-- Test sur la table FT_MSISDN_POST_MONTHLY 
 SELECT 
   CASE
        -- OK
        WHEN   
                     
           MON.FN_VALIDATE_MONTH2MONTH_EXIST ('MON.FT_MSISDN_POST_MONTHLY', 'MOIS'
                                 , TO_CHAR(ADD_MONTHS(D_SLICE_VALUE, -1), 'YYYYMM'), TO_CHAR(ADD_MONTHS(D_SLICE_VALUE, -1), 'YYYYMM'), 10, '') = 1       
        THEN 1
        -- NOK 
        ELSE  0
   END  INTO N_POST_MONTHLY
FROM DUAL;

--Test sur Datamart_OM afin de savoir si le mois m-1 est disponible
SELECT 
   CASE
        -- OK
        WHEN                
           MON.FN_VALIDATE_MONTH2MONTH_EXIST ('MON.FT_DATAMART_OM_MONTH', 'MOIS'
                   , TO_CHAR(ADD_MONTHS(D_SLICE_VALUE, -1), 'YYYYMM'), TO_CHAR(ADD_MONTHS(D_SLICE_VALUE, -1), 'YYYYMM'), 10, '') = 1              
                    
        THEN 1
        -- NOK 
        ELSE  0
   END  INTO N_DATAMART_OM
FROM DUAL;

--Test sur Post_Monthly
SELECT 
   CASE
        -- OK
        WHEN                
           MON.FN_VALIDATE_DAY2DAY_EXIST ('MON.FT_ACCOUNT_ACTIVITY', 'EVENT_DATE'
                                                            , S_SLICE_VALUE, S_SLICE_VALUE, 10, '') = 1             
                    
        THEN 1
        -- NOK 
        ELSE  0
   END  INTO N_ACC_ACTIVITY
FROM DUAL;

--Test sur ft_contract_snapshot
  SELECT 
   CASE
        -- OK
        WHEN                
           MON.FN_VALIDATE_DAY2DAY_EXIST ('MON.FT_CONTRACT_SNAPSHOT','EVENT_DATE',
                         S_SLICE_VALUE, S_SLICE_VALUE,10,'') = 1
        THEN 1
        -- NOK 
        ELSE  0
   END  INTO N_CONT_SNAP
FROM DUAL;
      
        
    IF n_result = 0 THEN
        RETURN 'NOK';
    END IF;

    -- VERIFIER:: jour <CDR.IT_ZEBRA_MASTER> NECESSAIRE EST BIEN RENSEIGNÉE ?
  -- SELECT MON.FN_IS_ZEBRA_MASTER_CLOSED(s_slice_value) INTO n_is_curr_slice_can_be_done FROM DUAL; 
    -- si le calcule pour slice ne peut être effectué
    IF n_is_curr_slice_can_be_done <> 1 THEN
       RETURN 'NOK';
    END IF ;

    EXECUTE IMMEDIATE 'TRUNCATE TABLE MON.TT_FT_BDI' ;   
    EXECUTE IMMEDIATE 'TRUNCATE TABLE MON.TT_FT_BDI_II';   
    COMMIT;
    
    INSERT INTO MON.TT_FT_BDI
    SELECT
        D_SLICE_VALUE EVENT_DATE,
        SUBSTR(A.MSISDN, -9, 9) MSISDN,
        A.TYPE_PIECE,
        A.NUMERO_PIECE,
        UPPER(A.NOM) NOM,
        (CASE 
            WHEN A.DATE_NAISSANCE IS NULL THEN NULL
            WHEN A.DATE_NAISSANCE LIKE '%-%' AND LENGTH(A.DATE_NAISSANCE)=10 THEN TO_DATE_DWH(A.DATE_NAISSANCE, 'YYYY-MM-DD')
            ELSE NULL END) DATE_NAISSANCE,
        (CASE 
            WHEN A.DATE_EXPIRATION IS NULL THEN NULL
            WHEN A.DATE_EXPIRATION LIKE '%-%' AND LENGTH(A.DATE_EXPIRATION)=10 THEN TO_DATE_DWH(A.DATE_EXPIRATION, 'YYYY-MM-DD')
            ELSE NULL END) DATE_EXPIRATION,
        UPPER(A.ADDRESSE) ADDRESSE,
        A.NUMERO_PIECE_TUTEUR,
        A.NOM_PARENT,
        (CASE 
            WHEN A.DATE_NAISSANCE_TUTEUR IS NULL THEN NULL
            WHEN A.DATE_NAISSANCE_TUTEUR LIKE '%-%' AND LENGTH(A.DATE_NAISSANCE_TUTEUR)=10 THEN TO_DATE_DWH(A.DATE_NAISSANCE_TUTEUR, 'YYYY-MM-DD')
            ELSE NULL END) DATE_NAISSANCE_TUTEUR,
        A.NOM_STRUCTURE,
        A.NUMERO_REGISTRE_COMMERCE,
        A.NUMERO_PIECE_REP_LEGAL,
        (CASE 
            WHEN A.DATE_ACTIVATION IS NULL THEN NULL
            WHEN LENGTH(A.DATE_ACTIVATION)>=19 THEN TO_DATE_DWH(SUBSTR(A.DATE_ACTIVATION, 0, 19), 'YYYY-MM-DD HH24:MI:SS')
            ELSE NULL END) DATE_ACTIVATION,
       (CASE 
            WHEN A.DATE_CHANGEMENT_STATUT IS NULL THEN NULL
            WHEN A.DATE_CHANGEMENT_STATUT LIKE '%-%' AND LENGTH(A.DATE_CHANGEMENT_STATUT) >= 18 THEN TO_DATE_DWH(SUBSTR(A.DATE_CHANGEMENT_STATUT, 0, 19), 'YYYY-MM-DD HH24:MI:SS')
            ELSE NULL END) DATE_CHANGEMENT_STATUT,
        UPPER(A.STATUT_BSCS) STATUT_BSCS,
        A.ODBINCOMINGCALLS,
        A.ODBOUTGOINGCALLS,
        A.IMEI, --AA.IMEI
        (CASE WHEN F.MSISDN IS NULL THEN 'NON' ELSE 'OUI' END) STATUT_DEROGATION,
        B.ADMINISTRATIVE_REGION REGION_ADMINISTRATIVE,
        B.COMMERCIAL_REGION REGION_COMMERCIALE,
        B.SITE_NAME SITE_NAME,
        B.TOWNNAME VILLE,
        B.LONGITUDE,
        B.LATITUDE,
        (Case when N_CONT_SNAP=1 THEN C.COMMERCIAL_OFFER  ELSE 'N/A'END) OFFRE_COMMERCIALE,
        ( Case when N_CONT_SNAP =1 THEN UPPER(NVL(C.OSP_CONTRACT_TYPE, C.OSP_ACCOUNT_TYPE)) ELSE'N/A'END) TYPE_CONTRAT,
        (Case when N_CONT_SNAP =1 THEN C.SEGMENTATION ELSE 'N/A' END) SEGMENTATION,
        NVL(D.REV_M_3, 0) + NVL(E.POST_REV_M_3, 0)  REV_M_3,
        NVL(D.REV_M_2, 0) + NVL(E.POST_REV_M_2, 0)  REV_M_2,
        (Case when (N_DATAMART_MONTH = 1 or N_POST_MONTHLY=1) then NVL(D.REV_M_1, 0) + NVL(E.POST_REV_M_1, 0) else -1 end)REV_M_1,
        (NVL(D.REV_M_3, 0) + NVL(D.REV_M_2, 0) + NVL(D.REV_M_1, 0) + NVL(E.POST_REV_M_3, 0) + NVL(E.POST_REV_M_2, 0) + NVL(E.POST_REV_M_1, 0))/3 REV_MOY,
        (Case when N_CONT_SNAP =1 THEN C.OSP_STATUS  ELSE 'N/A' END) STATUT_IN,
        (CASE WHEN A.NUMERO_PIECE = '' OR A.NUMERO_PIECE IS NULL THEN 'OUI' ELSE 'NON' END) NUMERO_PIECE_ABSENT,
        (CASE WHEN A.NUMERO_PIECE_TUTEUR = '' OR A.NUMERO_PIECE_TUTEUR IS NULL THEN 'OUI' ELSE 'NON' END) NUMERO_PIECE_TUT_ABSENT,
        (CASE WHEN LENGTH(A.NUMERO_PIECE) < 4 THEN 'OUI' ELSE 'NON' END) NUMERO_PIECE_INF_4,
        (CASE WHEN LENGTH(A.NUMERO_PIECE_TUTEUR) < 4 THEN 'OUI' ELSE 'NON' END) NUMERO_PIECE_TUT_INF_4,
        (
            CASE WHEN TRIM(A.NUMERO_PIECE) IN ('000000000', '111111111', '222222222', '333333333', 
            '444444444', '555555555', '666666666', '777777777', '888888888', '999999999', 
            '012345678','122222222', '123456789', '100010001', '1122334455') OR LENGTH(A.NUMERO_PIECE) > 21 OR TRIM(A.NUMERO_PIECE) LIKE '112233445%' THEN 'OUI' ELSE 'NON' END
        ) NUMERO_PIECE_NON_AUTHORISE,
        (
            CASE WHEN TRIM(A.NUMERO_PIECE_TUTEUR) IN ('000000000', '111111111', '222222222', '333333333', 
            '444444444', '555555555', '666666666', '777777777', '888888888', '999999999', 
            '012345678','122222222', '123456789', '100010001', '1122334455') OR LENGTH(A.NUMERO_PIECE) > 21 OR A.NUMERO_PIECE = A.NUMERO_PIECE_TUTEUR OR TRIM(A.NUMERO_PIECE) LIKE '112233445%' THEN 'OUI' ELSE 'NON' END
        ) NUMERO_PIECE_TUT_NON_AUTH,
        (CASE WHEN SUBSTR(A.MSISDN, -9, 9) = A.NUMERO_PIECE THEN 'OUI' ELSE 'NON' END) NUMERO_PIECE_EGALE_MSISDN,
        (CASE WHEN SUBSTR(A.MSISDN, -9, 9) = A.NUMERO_PIECE_TUTEUR THEN 'OUI' ELSE 'NON' END) NUMERO_PIECE_TUT_EGALE_MSISDN,
        (CASE WHEN LENGTH(TRIM(TRANSLATE(LOWER(A.NUMERO_PIECE), 'abcdefghijklmnopqrstuvwxyz1234567890-/',''))) > 0 THEN 'OUI' ELSE 'NON' END) NUMERO_PIECE_A_CARACT_NON_AUTH,
        (CASE WHEN LENGTH(TRIM(TRANSLATE(LOWER(A.NUMERO_PIECE_TUTEUR), 'abcdefghijklmnopqrstuvwxyz1234567890-/',''))) > 0 THEN 'OUI' ELSE 'NON' END) NUMERO_PIECE_TUT_CARAC_NON_A,
        (CASE WHEN LENGTH(TRIM(TRANSLATE(LOWER(A.NUMERO_PIECE), 'abcdefghijklmnopqrstuvwxyz-',''))) = 0 THEN 'OUI' ELSE 'NON' END) NUMERO_PIECE_UNIQUEMENT_LETTRE,
        (CASE WHEN LENGTH(TRIM(TRANSLATE(LOWER(A.NUMERO_PIECE_TUTEUR), 'abcdefghijklmnopqrstuvwxyz-',''))) = 0 THEN 'OUI' ELSE 'NON' END) NUMERO_PIECE_TUT_UNIQ_LETTRE,
        (CASE WHEN A.NOM = '' OR A.NOM IS NULL THEN 'OUI' ELSE 'NON' END) NOM_ABSENT,
        (CASE WHEN A.NOM_PARENT = '' OR A.NOM_PARENT IS NULL THEN 'OUI' ELSE 'NON' END) NOM_PARENT_ABSENT,
        (CASE WHEN LENGTH(TRIM(TRANSLATE(LOWER(A.NOM),'aeiou',' ')))= 0 
            OR LENGTH(TRIM(TRANSLATE(LOWER(A.NOM),'bcdfghjklmnpqrstvwxz',' ')))= 0 
            OR LENGTH(TRIM(TRANSLATE(A.NOM,'1234567890.',' '))) = 0 
            OR LENGTH(A.NOM) <= 1 
            --OR NOT(isConsecutiveCharNormal(A.NOM,2))
            OR LOWER(TRIM(A.NOM)) IN ('orange', 'vendeur', 'madame', 'monsieur', 'delta', 'phone', 'inconnu', 'inconnue', 'anonyme', 'unknown') 
            OR LENGTH(TRIM(TRANSLATE(LOWER(A.NOM),'asdfghjklqwertyuiopzxcvbnm1234567890çéèàäëüïöîôûâê-.''',' ')))> 0 THEN 'OUI' ELSE 'NON' END) NOM_DOUTEUX,
        (CASE WHEN LENGTH(TRIM(TRANSLATE(LOWER(A.NOM_PARENT),'aeiou',' ')))= 0 
            OR LENGTH(TRIM(TRANSLATE(LOWER(A.NOM_PARENT),'bcdfghjklmnpqrstvwxz',' ')))= 0 
            OR LENGTH(TRIM(TRANSLATE(A.NOM_PARENT,'1234567890.',' '))) = 0
            OR LENGTH(A.NOM_PARENT) <= 1  
            --OR NOT(isConsecutiveCharNormal(A.NOM,2))
            OR LOWER(TRIM(A.NOM_PARENT)) IN ('orange', 'vendeur', 'madame', 'monsieur', 'delta', 'phone', 'inconnu', 'inconnue', 'anonyme', 'unknown') 
            OR LENGTH(TRIM(TRANSLATE(LOWER(A.NOM_PARENT),'asdfghjklqwertyuiopzxcvbnm1234567890çéèàäëüïöîôûâê-.''',' ')))> 0 THEN 'OUI' ELSE 'NON' END) NOM_PARENT_DOUTEUX,
        (CASE WHEN A.DATE_NAISSANCE = '' OR A.DATE_NAISSANCE IS NULL THEN 'OUI' ELSE 'NON' END) DATE_NAISSANCE_ABSENT,
        (CASE WHEN A.DATE_NAISSANCE_TUTEUR = '' OR A.DATE_NAISSANCE_TUTEUR IS NULL THEN 'OUI' ELSE 'NON' END) DATE_NAISSANCE_TUT_ABSENT,
        (CASE WHEN A.DATE_EXPIRATION = '' OR A.DATE_EXPIRATION IS NULL THEN 'OUI' ELSE 'NON' END) DATE_EXPIRATION_ABSENT,
        (CASE WHEN A.ADDRESSE = '' OR A.ADDRESSE IS NULL THEN 'OUI' ELSE 'NON' END) ADDRESSE_ABSENT,
        (CASE WHEN LENGTH(TRIM(TRANSLATE(LOWER(A.ADDRESSE), 'abcdefghijklmnopqrstuvwxyz1234567890çéèàäëüïöîôûâê-./'':',''))) > 0 
        OR LENGTH(TRIM(TRANSLATE(A.ADDRESSE, '1234567890-./'':',''))) = 0
        OR LENGTH(TRIM(TRANSLATE(LOWER(A.ADDRESSE), 'bcdfghjklmnpqrstvwxzç-./'':',''))) = 0 
        OR LENGTH(TRIM(TRANSLATE(LOWER(A.ADDRESSE), 'aeiouéèàäëüïöîôûâê-./'':',''))) = 0
        OR LENGTH(TRIM(A.ADDRESSE)) < 2
        --OR NOT(isConsecutiveCharNormal(i.ADDRESSE,5))
        OR TRIM(LOWER(A.ADDRESSE)) IN ('n/a', 'nan', 'unknown', 'inconnue', 'sans adresse','sans','non renseignée') THEN 'OUI' ELSE 'NON' END) ADDRESSE_DOUTEUSE,
        (CASE WHEN A.TYPE_PERSONNE = '' OR A.TYPE_PERSONNE IS NULL THEN 'OUI' ELSE 'NON' END) TYPE_PERSONNE_INCONNU,
        (CASE WHEN
            NOT(A.DATE_NAISSANCE = '' OR A.DATE_NAISSANCE IS NULL ) -- date de naissance non nulle
            AND A.DATE_NAISSANCE LIKE '%-%' AND LENGTH(A.DATE_NAISSANCE)=10
            AND DECODE(A.DATE_NAISSANCE, NULL, SYSDATE, TO_DATE_DWH(A.DATE_NAISSANCE, 'YYYY-MM-DD')) > ADD_MONTHS(TRUNC(SYSDATE), -18 * 12) -- age < 21 au moment de la construction de la bdi
            AND (
                A.NUMERO_PIECE_TUTEUR IS NULL -- sans identité du tuteur
                OR A.NUMERO_PIECE_TUTEUR = '' -- sans identité du tuteur
                OR A.NUMERO_PIECE = A.NUMERO_PIECE_TUTEUR -- numero pièce égal numéro tuteur
                OR A.DATE_NAISSANCE_TUTEUR IS NULL -- sans date de naissance du tuteur
                OR A.DATE_NAISSANCE_TUTEUR = '' -- sans date de naissance du tuteur
                OR A.DATE_NAISSANCE_TUTEUR NOT LIKE '%-%' OR LENGTH(A.DATE_NAISSANCE_TUTEUR)<10
                OR DECODE(A.DATE_NAISSANCE_TUTEUR, NULL, SYSDATE, TO_DATE_DWH(A.DATE_NAISSANCE_TUTEUR, 'YYYY-MM-DD')) > ADD_MONTHS(TRUNC(SYSDATE), -18 * 12) -- tuteur mineur
            ) THEN 'OUI' ELSE 'NON' END) MINEUR_MAL_IDENTIFIE,
            SYSDATE INSERT_DATE,
            (CASE WHEN A.ADDRESSE IS NULL THEN 'OUI' ELSE 'NON' END) ADRESSE_ABSENT,
            (CASE WHEN G.MSISDN IS NOT NULL THEN 'OUI' ELSE 'NON' END) EST_PREMIUM,
            A.TYPE_PIECE_TUTEUR,
            A.ADRESSE_TUTEUR,
            A.ACCEPTATION_CGV,
            A.CONTRAT_SOUCRIPTION,
            A.DISPONIBILITE_SCAN,
            A.PLAN_LOCALISATION,
            A.TYPE_PERSONNE TYPE_PERSONNE_I,
            A.DATE_VALIDATION_BO        ,
            A.STATUT_VALIDATION_BO      ,
            A.MOTIF_REJET_BO           
    FROM (
        SELECT *
        FROM
        (
            SELECT A.*
            FROM CDR.IT_BDI A
            WHERE ORIGINAL_FILE_DATE = D_SLICE_VALUE + 1
            --AND (MSISDN IS NOT NULL  OR LENGTH(MSISDN) <> 9)
        )
    ) A
    LEFT JOIN 
    (
        SELECT AA.*, BB.LONGITUDE, BB.LATITUDE
        FROM
        (
            SELECT * 
            FROM FT_CLIENT_LAST_SITE_DAY 
            WHERE EVENT_DATE = (SELECT MAX(EVENT_DATE) FROM FT_CLIENT_LAST_SITE_DAY)
        ) AA
        LEFT JOIN 
        (
            SELECT *
            FROM
            (
                SELECT DISTINCT 
                    SITE_NAME, 
                    LONGITUDE, 
                    LATITUDE, 
                    ROW_NUMBER() OVER (PARTITION BY SITE_NAME ORDER BY SITE_NAME DESC) AS RANG 
                FROM DIM.DT_GSM_CELL_CODE 
            ) WHERE RANG = 1
            ) BB ON AA.SITE_NAME = BB.SITE_NAME
    ) B ON A.MSISDN = B.MSISDN
    LEFT JOIN (SELECT * FROM (SELECT * FROM FT_CONTRACT_SNAPSHOT WHERE EVENT_DATE = D_SLICE_VALUE) A LEFT JOIN DIM.DT_OFFER_PROFILES B ON A.COMMERCIAL_OFFER=B.PROFILE_CODE) C ON SUBSTR(A.MSISDN, -9, 9) = C.ACCESS_KEY
    LEFT JOIN (
        SELECT
            MDM.MSISDN,
            SUM(CASE WHEN MDM.EVENT_MONTH = MOIS_3 THEN NVL (MDM.MAIN_RATED_TEL_AMOUNT,0)+NVL (MDM.MAIN_RATED_SMS_AMOUNT,0)+NVL (MDM.DATA_MAIN_RATED_AMOUNT,0)+NVL (MDM.TOTAL_SUBS_REVENUE,0)+NVL (MDM.DATA_GOS_MAIN_RATED_AMOUNT,0)+NVL (MDM.SOS_FEES,0)+NVL (MDM.P2P_REFILL_FEES,0) ELSE 0 END) REV_M_3,
            SUM(CASE WHEN MDM.EVENT_MONTH = MOIS_2 THEN NVL (MDM.MAIN_RATED_TEL_AMOUNT,0)+NVL (MDM.MAIN_RATED_SMS_AMOUNT,0)+NVL (MDM.DATA_MAIN_RATED_AMOUNT,0)+NVL (MDM.TOTAL_SUBS_REVENUE,0)+NVL (MDM.DATA_GOS_MAIN_RATED_AMOUNT,0)+NVL (MDM.SOS_FEES,0)+NVL (MDM.P2P_REFILL_FEES,0) ELSE 0 END) REV_M_2,
            SUM(CASE WHEN MDM.EVENT_MONTH = MOIS_1 THEN NVL (MDM.MAIN_RATED_TEL_AMOUNT,0)+NVL (MDM.MAIN_RATED_SMS_AMOUNT,0)+NVL (MDM.DATA_MAIN_RATED_AMOUNT,0)+NVL (MDM.TOTAL_SUBS_REVENUE,0)+NVL (MDM.DATA_GOS_MAIN_RATED_AMOUNT,0)+NVL (MDM.SOS_FEES,0)+NVL (MDM.P2P_REFILL_FEES,0) ELSE 0 END) REV_M_1
        FROM FT_MARKETING_DATAMART_MONTH MDM
        WHERE EVENT_MONTH IN (MOIS_3, MOIS_2, MOIS_1)
        GROUP BY MSISDN
    ) D ON SUBSTR(A.MSISDN, -9, 9) = D.MSISDN
    LEFT JOIN (
        SELECT
            MDM.MSISDN,
            SUM(CASE WHEN MDM.MOIS = MOIS_3 THEN NVL (MDM.MAIN_REVENU_TOTAL,0) + NVL (MDM.PROMO_REVENU_TOTAL,0) ELSE 0 END) POST_REV_M_3,
            SUM(CASE WHEN MDM.MOIS = MOIS_2 THEN NVL (MDM.MAIN_REVENU_TOTAL,0) + NVL (MDM.PROMO_REVENU_TOTAL,0) ELSE 0 END) POST_REV_M_2,
            SUM(CASE WHEN MDM.MOIS = MOIS_1 THEN NVL (MDM.MAIN_REVENU_TOTAL,0) + NVL (MDM.PROMO_REVENU_TOTAL,0) ELSE 0 END) POST_REV_M_1
        FROM FT_MSISDN_POST_MONTHLY MDM
        WHERE MOIS IN (MOIS_3, MOIS_2, MOIS_1)
        GROUP BY MSISDN
    ) E ON SUBSTR(A.MSISDN, -9, 9) = E.MSISDN
    LEFT JOIN (SELECT DISTINCT MSISDN FROM DIM.DT_BDI_DEROGATION) F ON SUBSTR(A.MSISDN, -9, 9) = F.MSISDN
    LEFT JOIN (SELECT DISTINCT MSISDN FROM DIM.DT_REF_SEGMENTATION_CLIENT) G ON A.MSISDN = G.MSISDN;

    COMMIT;
    
    INSERT INTO TT_FT_BDI_II
    SELECT 
       -- A.*,
   A.EVENT_DATE      ,
  A.MSISDN                          ,
  A.TYPE_PIECE                      ,
  A.NUMERO_PIECE                    ,
  A.NOM                             ,
  A.DATE_NAISSANCE                  ,
  A.DATE_EXPIRATION                 ,
  A.ADDRESSE                        ,
  A.NUMERO_PIECE_TUTEUR             ,
  A.NOM_PARENT                      ,
  A.DATE_NAISSANCE_TUTEUR           ,
  A.NOM_STRUCTURE                   ,
  A.NUMERO_REGISTRE_COMMERCE      ,
  A.NUMERO_PIECE_REP_LEGAL          ,
  A.DATE_ACTIVATION                 ,
  A.DATE_CHANGEMENT_STATUT          ,
  A.STATUT_BSCS                     ,
  A.ODBINCOMINGCALLS                ,
  A.ODBOUTGOINGCALLS                ,
  A.IMEI                           ,
  A.STATUT_DEROGATION              ,
  A.REGION_ADMINISTRATIVE           ,
  A.REGION_COMMERCIALE              ,
  A.SITE_NAME                       ,
  A.VILLE                           ,
  A.LONGITUDE                      ,
  A.LATITUDE                        ,
  A.OFFRE_COMMERCIALE               ,
  A.TYPE_CONTRAT                    ,
  A.SEGMENTATION                    ,
  A.REV_M_3                        ,
  A.REV_M_2                        ,
  A.REV_M_1                        ,
  A.REV_MOY                        ,
  A.STATUT_IN                       ,
  A.NUMERO_PIECE_ABSENT            ,
  A.NUMERO_PIECE_TUT_ABSENT        ,
  A.NUMERO_PIECE_INF_4             ,
  A.NUMERO_PIECE_TUT_INF_4         ,
  A.NUMERO_PIECE_NON_AUTHORISE     ,
  A.NUMERO_PIECE_TUT_NON_AUTH      ,
  A.NUMERO_PIECE_EGALE_MSISDN      ,
  A.NUMERO_PIECE_TUT_EGALE_MSISDN  ,
  A.NUMERO_PIECE_A_CARACT_NON_AUTH ,
  A.NUMERO_PIECE_TUT_CARAC_NON_A   ,
  A.NUMERO_PIECE_UNIQUEMENT_LETTRE ,
  A.NUMERO_PIECE_TUT_UNIQ_LETTRE   ,
  A.NOM_ABSENT                     ,
  A.NOM_PARENT_ABSENT              ,
  A.NOM_DOUTEUX                    ,
  A.NOM_PARENT_DOUTEUX             ,
  A.DATE_NAISSANCE_ABSENT          ,
  A.DATE_NAISSANCE_TUT_ABSENT      ,
  A.DATE_EXPIRATION_ABSENT         ,
  A.ADDRESSE_ABSENT                ,
  A.ADDRESSE_DOUTEUSE              ,
  A.TYPE_PERSONNE_INCONNU          ,
 A.MINEUR_MAL_IDENTIFIE           ,
  A.INSERT_DATE                     ,
  A.ADRESSE_ABSENT                  ,
  A.EST_PREMIUM                     ,
  A.TYPE_PIECE_TUTEUR               ,
  A.ADRESSE_TUTEUR                  ,
  A.ACCEPTATION_CGV                 ,
  A.CONTRAT_SOUCRIPTION             ,
  A.DISPONIBILITE_SCAN              ,
  A.PLAN_LOCALISATION               ,
  A.TYPE_PERSONNE_I                 ,
        (CASE
            WHEN UPPER(A.TYPE_PERSONNE_I) = 'PM' THEN
                (
                    CASE 
                        WHEN UPPER(A.OFFRE_COMMERCIALE) IN ('POSTPAID DATALIVE', 'POSTPAID GPRSTRACKING', 'POSTPAID SMARTRACK', 'PREPAID DATALIVE') THEN 'MACHINE_2_MACHINE'
                        ELSE 'PERSONNE_MORALE' END
                )
            WHEN UPPER(A.TYPE_PERSONNE_I) = 'PP' AND A.DATE_NAISSANCE IS NOT NULL AND A.DATE_NAISSANCE > ADD_MONTHS(A.EVENT_DATE, -18 * 12) THEN 'MINEUR'
            WHEN UPPER(A.TYPE_PERSONNE_I) = 'PP' AND A.DATE_NAISSANCE IS NOT NULL AND A.DATE_NAISSANCE <= ADD_MONTHS(A.EVENT_DATE, -18 * 12) THEN 'MAJEUR'
            ELSE UPPER(A.TYPE_PERSONNE_I) END) TYPE_PERSONNE,
        (CASE WHEN H.MSISDN IS NOT NULL THEN H.EVENT_DATE ELSE A.EVENT_DATE END) DATE_ACQUISITION,
        (CASE WHEN A.DATE_NAISSANCE > TRUNC(SYSDATE) THEN 'OUI' ELSE 'NON' END) DATE_NAISSANCE_DOUTEUX,
        (CASE WHEN A.DATE_NAISSANCE_TUTEUR > TRUNC(SYSDATE) OR EXTRACT(YEAR FROM SYSDATE) - EXTRACT(YEAR FROM A.DATE_NAISSANCE_TUTEUR) < 21 THEN 'OUI' ELSE 'NON' END) DATE_NAISSANCE_TUT_DOUTEUX,
        (CASE WHEN A.DATE_EXPIRATION <= A.DATE_ACTIVATION OR A.DATE_EXPIRATION > ADD_MONTHS(TRUNC(SYSDATE), 120) THEN 'OUI' ELSE 'NON' END) DATE_EXPIRATION_DOUTEUSE,
        (CASE WHEN A.DATE_EXPIRATION IS NULL OR  A.DATE_EXPIRATION < D_SLICE_VALUE THEN 'OUI' ELSE 'NON' END) CNI_EXPIRE,
        (CASE WHEN F.NUMERO_PIECE IS NOT NULL AND A.TYPE_PERSONNE_I='PP' THEN 'OUI' ELSE 'NON' END) MULTI_SIM,
        (CASE WHEN E.MSISDN IS NULL THEN 'NON' ELSE 'OUI' END) EST_PRESENT_OM,
        (CASE WHEN D.MSISDN IS NULL THEN 'NON' ELSE 'OUI' END) EST_PRESENT_ZEB,
        (Case when N_ACC_ACTIVITY = 1 then (CASE WHEN C.MSISDN IS NULL THEN 'NON' WHEN A.OFFRE_COMMERCIALE LIKE 'POST%' THEN 'OUI' ELSE DECODE(C.COMGP_STATUS,'ACTIF','OUI','INACT','NON','UNKNOWN') END) else 'N/A' end)  EST_PRESENT_ART,
        (Case when N_ACC_ACTIVITY = 1 then (CASE WHEN C.MSISDN IS NULL THEN 'NON' WHEN A.OFFRE_COMMERCIALE LIKE 'POST%' THEN 'OUI' ELSE DECODE(C.GP_STATUS,'ACTIF','OUI','INACT','NON','UNKNOWN') END) else 'N/A' end) EST_PRESENT_GP,
        (CASE WHEN A.STATUT_IN IN ('ACTIVE', 'INACTIVE') THEN 'OUI' ELSE 'NON' END) EST_PRESENT_OCM, -- Parc Commercial        
        (CASE WHEN TRUNC(SYSDATE) - E.DATE_DERNIERE_ACTIVITE_OM <= 90 THEN 'OUI' ELSE 'NON' END) EST_ACTIF_OM,
        (CASE WHEN G.MSISDN IS NULL THEN 'NON' ELSE 'OUI' END) EST_CLIENT_VIP,
        --Insertion Datamart OM
         NVL(E.REV_OM_M_3, 0)  REV_OM_M_3,
         NVL(E.REV_OM_M_2, 0)  REV_OM_M_2,
        (Case when N_DATAMART_OM = 1 then NVL(E.REV_OM_M_1, 0) else -1 end) REV_OM_M_1,
        (CASE WHEN TRUNC(SYSDATE) - B.LAST_ACTIVE_DAY <= 90 THEN 'OUI' ELSE 'NON' END) EST_ACTIF_DATA,
        --Insertion Conso_Month
        NVL(B.TRAF_M_3, 0)   TRAFFIC_DATA_M_3,
        NVL(B.TRAF_M_2, 0)  TRAFFIC_DATA_M_2,
        (Case when N_DATA_CONSO_MONTH = 1 then NVL(B.TRAF_M_1, 0) else -1 end) TRAFFIC_DATA_M_1,
         A.DATE_VALIDATION_BO              ,
        A.STATUT_VALIDATION_BO            ,
       A.MOTIF_REJET_BO                     
    FROM TT_FT_BDI A
    LEFT JOIN
    (
        SELECT
            MSISDN,
            MAX(LAST_ACTIVE_DAY) LAST_ACTIVE_DAY,
            SUM(CASE WHEN EVENT_MONTH = MOIS_3 THEN BYTES_RECEIVED + BYTES_SENT ELSE 0 END) TRAF_M_3,
            SUM(CASE WHEN EVENT_MONTH = MOIS_2 THEN BYTES_RECEIVED + BYTES_SENT ELSE 0 END) TRAF_M_2,
            SUM(CASE WHEN EVENT_MONTH = MOIS_1 THEN BYTES_RECEIVED + BYTES_SENT ELSE 0 END) TRAF_M_1
        FROM FT_DATA_CONSO_MSISDN_MONTH
        WHERE EVENT_MONTH IN (MOIS_3, MOIS_2, MOIS_1)
        GROUP BY MSISDN
    ) B ON A.MSISDN = B.MSISDN
    LEFT JOIN
    (
        SELECT DISTINCT MSISDN, COMGP_STATUS, GP_STATUS
        FROM FT_ACCOUNT_ACTIVITY
        WHERE EVENT_DATE = D_SLICE_VALUE
    ) C ON A.MSISDN = C.MSISDN
    LEFT JOIN
    (
        SELECT DISTINCT PRIMARY_MSISDN MSISDN
        FROM CDR.IT_ZEBRA_MASTER
        WHERE GENERATED_DATE ='07/01/2019' --select max(generated_date) from CDR.IT_ZEBRA_MASTER --a modifier 
    ) D ON A.MSISDN = D.MSISDN
    LEFT JOIN
    (
        SELECT
            MSISDN,
            MAX(DATE_DERNIERE_ACTIVITE_OM) DATE_DERNIERE_ACTIVITE_OM,
            MAX(CASE WHEN MOIS = MOIS_3 THEN ARPU_OM ELSE 0 END) REV_OM_M_3,
            MAX(CASE WHEN MOIS = MOIS_2 THEN ARPU_OM ELSE 0 END) REV_OM_M_2,
            MAX(CASE WHEN MOIS = MOIS_1 THEN ARPU_OM ELSE 0 END) REV_OM_M_1
        FROM FT_DATAMART_OM_MONTH
        WHERE MOIS IN (MOIS_3, MOIS_2, MOIS_1)
        GROUP BY MSISDN
    ) E ON A.MSISDN = E.MSISDN
    LEFT JOIN
    (
        SELECT NUMERO_PIECE
        FROM TT_FT_BDI 
        WHERE NOT(ODBOUTGOINGCALLS = '1' AND ODBINCOMINGCALLS = '1') -- EST_SUSPENDU
        GROUP BY NUMERO_PIECE
        HAVING COUNT(*) > 3
    ) F ON A.NUMERO_PIECE = F.NUMERO_PIECE
    LEFT JOIN (SELECT DISTINCT MSISDN FROM DIM.DT_BDI_VIP) G ON A.MSISDN = G.MSISDN
    LEFT JOIN (SELECT DISTINCT MSISDN, EVENT_DATE FROM FT_BDI WHERE EVENT_DATE = D_SLICE_VALUE - 1) H ON A.MSISDN = H.MSISDN;

    COMMIT;
    
    INSERT/*append*/ INTO FT_BDI
    SELECT DISTINCT
        A.EVENT_DATE    EVENT_DATE,
        A.MSISDN    MSISDN,
        A.TYPE_PIECE    TYPE_PIECE,
        A.NUMERO_PIECE    NUMERO_PIECE,
        A.NOM    NOM,
        A.DATE_NAISSANCE    DATE_NAISSANCE,
        A.DATE_EXPIRATION    DATE_EXPIRATION,
        A.ADDRESSE    ADDRESSE,
        A.NUMERO_PIECE_TUTEUR    NUMERO_PIECE_TUTEUR,
        A.NOM_PARENT    NOM_PARENT,
        A.DATE_NAISSANCE_TUTEUR    DATE_NAISSANCE_TUTEUR,
        A.NOM_STRUCTURE    NOM_STRUCTURE,
        A.NUMERO_REGISTRE_COMMERCE    NUMERO_REGISTRE_COMMERCE,
        A.NUMERO_PIECE_REP_LEGAL    NUMERO_PIECE_REP_LEGAL,
        A.DATE_ACTIVATION    DATE_ACTIVATION,
        A.DATE_CHANGEMENT_STATUT    DATE_CHANGEMENT_STATUT,
        A.STATUT_BSCS    STATUT_BSCS,
        A.ODBINCOMINGCALLS    ODBINCOMINGCALLS,
        A.ODBOUTGOINGCALLS    ODBOUTGOINGCALLS,
        A.IMEI    IMEI,
        A.STATUT_DEROGATION    STATUT_DEROGATION,
        A.REGION_ADMINISTRATIVE    REGION_ADMINISTRATIVE,
        A.REGION_COMMERCIALE    REGION_COMMERCIALE,
        A.SITE_NAME    SITE_NAME,
        A.VILLE    VILLE,
        A.LONGITUDE    LONGITUDE,
        A.LATITUDE    LATITUDE,
        A.OFFRE_COMMERCIALE    OFFRE_COMMERCIALE,
        A.TYPE_CONTRAT    TYPE_CONTRAT,
        A.SEGMENTATION    SEGMENTATION,
        A.REV_M_3    REV_M_3,
        A.REV_M_2    REV_M_2,
        A.REV_M_1    REV_M_1,
        A.REV_MOY    REV_MOY,
        A.STATUT_IN    STATUT_IN,
        A.NUMERO_PIECE_ABSENT    NUMERO_PIECE_ABSENT,
        A.NUMERO_PIECE_TUT_ABSENT    NUMERO_PIECE_TUT_ABSENT,
        A.NUMERO_PIECE_INF_4    NUMERO_PIECE_INF_4,
        A.NUMERO_PIECE_TUT_INF_4    NUMERO_PIECE_TUT_INF_4,
        A.NUMERO_PIECE_NON_AUTHORISE    NUMERO_PIECE_NON_AUTHORISE,
        A.NUMERO_PIECE_TUT_NON_AUTH    NUMERO_PIECE_TUT_NON_AUTH,
        A.NUMERO_PIECE_EGALE_MSISDN    NUMERO_PIECE_EGALE_MSISDN,
        A.NUMERO_PIECE_TUT_EGALE_MSISDN    NUMERO_PIECE_TUT_EGALE_MSISDN,
        A.NUMERO_PIECE_A_CARACT_NON_AUTH    NUMERO_PIECE_A_CARACT_NON_AUTH,
        A.NUMERO_PIECE_TUT_CARAC_NON_A    NUMERO_PIECE_TUT_CARAC_NON_A,
        A.NUMERO_PIECE_UNIQUEMENT_LETTRE    NUMERO_PIECE_UNIQUEMENT_LETTRE,
        A.NUMERO_PIECE_TUT_UNIQ_LETTRE    NUMERO_PIECE_TUT_UNIQ_LETTRE,
        A.NOM_ABSENT    NOM_ABSENT,
        A.NOM_PARENT_ABSENT    NOM_PARENT_ABSENT,
        A.NOM_DOUTEUX    NOM_DOUTEUX,
        A.NOM_PARENT_DOUTEUX    NOM_PARENT_DOUTEUX,
        A.DATE_NAISSANCE_ABSENT    DATE_NAISSANCE_ABSENT,
        A.DATE_NAISSANCE_TUT_ABSENT    DATE_NAISSANCE_TUT_ABSENT,
        A.DATE_EXPIRATION_ABSENT    DATE_EXPIRATION_ABSENT,
        A.ADDRESSE_ABSENT    ADDRESSE_ABSENT,
        A.ADDRESSE_DOUTEUSE    ADDRESSE_DOUTEUSE,
        A.TYPE_PERSONNE_INCONNU    TYPE_PERSONNE_INCONNU,
        A.MINEUR_MAL_IDENTIFIE    MINEUR_MAL_IDENTIFIE,
        A.INSERT_DATE    INSERT_DATE,
        A.TYPE_PERSONNE    TYPE_PERSONNE,
        A.DATE_ACQUISITION    DATE_ACQUISITION,
        A.DATE_NAISSANCE_DOUTEUX    DATE_NAISSANCE_DOUTEUX,
        A.DATE_NAISSANCE_TUT_DOUTEUX    DATE_NAISSANCE_TUT_DOUTEUX,
        A.DATE_EXPIRATION_DOUTEUSE    DATE_EXPIRATION_DOUTEUSE,
        A.CNI_EXPIRE    CNI_EXPIRE,
        A.MULTI_SIM    MULTI_SIM,
        A.EST_PRESENT_OM    EST_PRESENT_OM,
        A.EST_PRESENT_ZEB    EST_PRESENT_ZEB,
        A.EST_PRESENT_ART    EST_PRESENT_ART,
        A.EST_PRESENT_GP    EST_PRESENT_GP,
        A.EST_PRESENT_OCM    EST_PRESENT_OCM,
        A.EST_ACTIF_OM    EST_ACTIF_OM,
        A.EST_CLIENT_VIP    EST_CLIENT_VIP,
        A.REV_OM_M_3    REV_OM_M_3,
        A.REV_OM_M_2    REV_OM_M_2,
        A.REV_OM_M_1    REV_OM_M_1,
        A.EST_ACTIF_DATA    EST_ACTIF_DATA,
        A.TRAFFIC_DATA_M_3    TRAFFIC_DATA_M_3,
        A.TRAFFIC_DATA_M_2    TRAFFIC_DATA_M_2,
        A.TRAFFIC_DATA_M_1    TRAFFIC_DATA_M_1,
        A.CONFORM_OCM_P_MORALE_M2M    CONFORM_OCM_P_MORALE_M2M,
        A.CONFORM_ART_P_MORALE_M2M    CONFORM_ART_P_MORALE_M2M,
        A.CONFORM_OCM_P_MORALE_FLOTTE    CONFORM_OCM_P_MORALE_FLOTTE,
        A.CONFORM_ART_P_MORALE_FLOTTE    CONFORM_ART_P_MORALE_FLOTTE,
        A.CONFORM_OCM_P_PHY_MAJEUR    CONFORM_OCM_P_PHY_MAJEUR,
        A.CONFORM_ART_P_PHY_MAJEUR    CONFORM_ART_P_PHY_MAJEUR,
        A.CONFORM_OCM_P_PHY_MINEUR    CONFORM_OCM_P_PHY_MINEUR,
        A.CONFORM_ART_P_PHY_MINEUR    CONFORM_ART_P_PHY_MINEUR,
        A.EST_SUSPENDU    EST_SUSPENDU,
        A.NOM_STRUCTURE_ABSENT    NOM_STRUCTURE_ABSENT,
        A.NUMERO_REGISTRE_ABSENT    NUMERO_REGISTRE_ABSENT,
        A.NUMERO_REGISTRE_DOUTEUX    NUMERO_REGISTRE_DOUTEUX,
        DECODE(A.TYPE_PERSONNE, NULL, A.CONFORM_ART_P_PHY_MAJEUR, 'MAJEUR', A.CONFORM_ART_P_PHY_MAJEUR, 'PP', A.CONFORM_ART_P_PHY_MAJEUR, 'MINEUR', A.CONFORM_ART_P_PHY_MINEUR, 'PERSONNE_MORALE', A.CONFORM_ART_P_MORALE_FLOTTE, 'MACHINE_2_MACHINE', A.CONFORM_ART_P_MORALE_M2M) CONFORME_ART,
        DECODE(A.TYPE_PERSONNE, NULL, A.CONFORM_ART_P_PHY_MAJEUR, 'MAJEUR', A.CONFORM_ART_P_PHY_MAJEUR, 'PP', A.CONFORM_OCM_P_PHY_MAJEUR, 'MINEUR', A.CONFORM_OCM_P_PHY_MINEUR, 'PERSONNE_MORALE', A.CONFORM_OCM_P_MORALE_FLOTTE, 'MACHINE_2_MACHINE', A.CONFORM_OCM_P_MORALE_M2M) CONFORME_OCM,
        A.IMEI_ABSENT    IMEI_ABSENT,
        A.ADRESSE_ABSENT    ADRESSE_ABSENT,
        A.EST_PREMIUM    EST_PREMIUM,
        A.ADRESSE_TUTEUR    ADRESSE_TUTEUR,
        A.TYPE_PIECE_TUTEUR     TYPE_PIECE_TUTEUR,
        A.ACCEPTATION_CGV   ACCEPTATION_CGV,
        A.CONTRAT_SOUCRIPTION   CONTRAT_SOUCRIPTION,
        A.DISPONIBILITE_SCAN    DISPONIBILITE_SCAN,
        A.PLAN_LOCALISATION     PLAN_LOCALISATION,
        B.IDENTIFICATEUR IDENTIFICATEUR,
        B.PROFESSION_IDENTIFICATEUR PROFESSION_IDENTIFICATEUR,
        A.DATE_VALIDATION_BO        ,
        A.STATUT_VALIDATION_BO      ,
        A.MOTIF_REJET_BO ,
    (Case when A.STATUT_VALIDATION_BO='1'   then 'VERIFIE ET VALIDE' 
          when A.STATUT_VALIDATION_BO='3'    then 'VERIFIE ET CORRIGE'
          when A.STATUT_VALIDATION_BO= '-1'  then 'VERIFIE ET NON CONFORME NIVEAU 1'
          when A.STATUT_VALIDATION_BO= '-2'  then 'VERIFIE ET NON CONFORME NIVEAU 2' 
          when A.STATUT_VALIDATION_BO= '-3'  then 'VERIFIE ET NON CONFORME NIVEAU 3' 
          when A.STATUT_VALIDATION_BO= '-4'  then 'PRET POUR LA SUSPENSION'
          when A.STATUT_VALIDATION_BO= '-5'  then 'SUSPENDU APPEL SORTANT BO'
          when A.STATUT_VALIDATION_BO= '-6'  then 'SUSPENDU HORS BO' 
          when A.STATUT_VALIDATION_BO= '-7'  then 'MODIFIER AVANT LA SUSPENSION' else 'NON VERIFIE' end) STATUT_VALIDATION_BOO         
    FROM
    (
        SELECT 
            A.*,
            (CASE 
                WHEN A.TYPE_PERSONNE = 'MACHINE_2_MACHINE' THEN
                    (
                        CASE WHEN (
                                A.NOM_STRUCTURE IS NOT NULL AND
                                (A.NUMERO_REGISTRE_COMMERCE IS NOT NULL AND UPPER(A.NUMERO_REGISTRE_COMMERCE) <> 'NON RENSEIGNE')
                                --NUMERO_PIECE_REP_LEGAL IS NOT NULL
                            ) THEN 'OUI' ELSE 'NON'
                    END) 
                ELSE NULL
            END) CONFORM_OCM_P_MORALE_M2M,
            (CASE 
                WHEN A.TYPE_PERSONNE = 'MACHINE_2_MACHINE' THEN
                    (
                        CASE WHEN (
                                A.NOM_STRUCTURE IS NOT NULL AND
                                (A.NUMERO_REGISTRE_COMMERCE IS NOT NULL AND UPPER(A.NUMERO_REGISTRE_COMMERCE) <> 'NON RENSEIGNE')
                                --NUMERO_PIECE_REP_LEGAL IS NOT NULL
                            ) THEN 'OUI' ELSE 'NON'
                    END) 
                ELSE NULL
            END) CONFORM_ART_P_MORALE_M2M,
            (CASE 
                WHEN A.TYPE_PERSONNE = 'PERSONNE_MORALE' THEN
                    (
                        CASE WHEN (
                                    A.NOM_STRUCTURE IS NOT NULL AND
                                    (A.NUMERO_REGISTRE_COMMERCE IS NOT NULL AND UPPER(NUMERO_REGISTRE_COMMERCE) <> 'NON RENSEIGNE') AND
                                    NUMERO_PIECE_REP_LEGAL IS NOT NULL AND
                                    A.NOM_ABSENT = 'NON' AND A.NOM_DOUTEUX = 'NON' AND
                                    A.IMEI IS NOT NULL AND
                                    A.NUMERO_PIECE_ABSENT = 'NON' AND A.NUMERO_PIECE_INF_4 = 'NON' AND A.NUMERO_PIECE_NON_AUTHORISE = 'NON' AND A.NUMERO_PIECE_EGALE_MSISDN = 'NON' AND A.NUMERO_PIECE_A_CARACT_NON_AUTH = 'NON' AND A.NUMERO_PIECE_UNIQUEMENT_LETTRE = 'NON'
                            ) THEN 'OUI' ELSE 'NON'
                    END) 
                ELSE NULL
            END) CONFORM_OCM_P_MORALE_FLOTTE,
            (CASE 
                WHEN A.TYPE_PERSONNE = 'PERSONNE_MORALE' THEN
                    (
                        CASE WHEN (
                                    A.NOM_STRUCTURE IS NOT NULL AND
                                    (A.NUMERO_REGISTRE_COMMERCE IS NOT NULL AND UPPER(NUMERO_REGISTRE_COMMERCE) <> 'NON RENSEIGNE') AND
                                    NUMERO_PIECE_REP_LEGAL IS NOT NULL AND
                                    NOM_ABSENT = 'NON' AND A.NOM_DOUTEUX = 'NON' AND
                                    A.IMEI IS NOT NULL AND
                                    A.NUMERO_PIECE_ABSENT = 'NON' AND A.NUMERO_PIECE_INF_4 = 'NON' AND A.NUMERO_PIECE_NON_AUTHORISE = 'NON' AND A.NUMERO_PIECE_EGALE_MSISDN = 'NON' AND A.NUMERO_PIECE_A_CARACT_NON_AUTH = 'NON' AND A.NUMERO_PIECE_UNIQUEMENT_LETTRE = 'NON'
                            ) THEN 'OUI' ELSE 'NON'
                    END) 
                ELSE NULL
            END) CONFORM_ART_P_MORALE_FLOTTE,
            (CASE 
                WHEN A.TYPE_PERSONNE = 'MAJEUR' OR A.TYPE_PERSONNE IS NULL OR A.TYPE_PERSONNE = 'PP' THEN
                    (
                        CASE WHEN (
                                --A.STATUT_BSCS = 'ACTIF' AND
                                A.DATE_ACTIVATION IS NOT NULL AND
                                A.NOM_ABSENT = 'NON' AND A.NOM_DOUTEUX = 'NON' AND
                                A.NUMERO_PIECE_ABSENT = 'NON' AND A.NUMERO_PIECE_INF_4 = 'NON' AND A.NUMERO_PIECE_NON_AUTHORISE = 'NON' AND A.NUMERO_PIECE_EGALE_MSISDN = 'NON' AND A.NUMERO_PIECE_A_CARACT_NON_AUTH = 'NON' AND A.NUMERO_PIECE_UNIQUEMENT_LETTRE = 'NON' AND
                                A.DATE_EXPIRATION_DOUTEUSE = 'NON' AND
                                A.TYPE_PIECE IS NOT NULL AND
                                A.DATE_NAISSANCE_ABSENT = 'NON' AND A.DATE_NAISSANCE_DOUTEUX = 'NON' AND
                                A.CNI_EXPIRE = 'NON' AND
                                A.MULTI_SIM = 'NON' AND
                                A.ADDRESSE IS NOT NULL AND
                                A.IMEI IS NOT NULL 
                            ) THEN 'OUI' ELSE 'NON'
                    END) 
                ELSE NULL
            END) CONFORM_OCM_P_PHY_MAJEUR,
            (CASE 
                WHEN A.TYPE_PERSONNE = 'MAJEUR' OR A.TYPE_PERSONNE IS NULL OR A.TYPE_PERSONNE = 'PP' THEN
                    (
                        CASE WHEN (
                                --A.STATUT_BSCS = 'ACTIF' AND
                                A.DATE_ACTIVATION IS NOT NULL AND
                                A.NOM_ABSENT = 'NON' AND A.NOM_DOUTEUX = 'NON' AND
                                A.NUMERO_PIECE_ABSENT = 'NON' AND A.NUMERO_PIECE_INF_4 = 'NON' AND A.NUMERO_PIECE_NON_AUTHORISE = 'NON' AND A.NUMERO_PIECE_EGALE_MSISDN = 'NON' AND A.NUMERO_PIECE_A_CARACT_NON_AUTH = 'NON' AND A.NUMERO_PIECE_UNIQUEMENT_LETTRE = 'NON' AND
                                A.DATE_EXPIRATION_DOUTEUSE = 'NON' AND
                                A.TYPE_PIECE IS NOT NULL AND
                                A.DATE_NAISSANCE_ABSENT = 'NON' AND A.DATE_NAISSANCE_DOUTEUX = 'NON' AND
                                A.CNI_EXPIRE = 'NON' AND
                                A.MULTI_SIM = 'NON' AND
                                A.ADDRESSE IS NOT NULL AND
                                A.IMEI IS NOT NULL 
                            ) THEN 'OUI' ELSE 'NON'
                    END) 
                ELSE NULL
            END) CONFORM_ART_P_PHY_MAJEUR,
            (CASE 
                WHEN A.TYPE_PERSONNE = 'MINEUR' THEN
                    (
                        CASE WHEN (
                                --A.STATUT_BSCS = 'ACTIF' AND
                                A.DATE_ACTIVATION IS NOT NULL AND
                                A.NOM_ABSENT = 'NON' AND A.NOM_DOUTEUX = 'NON' AND
                                A.NUMERO_PIECE_ABSENT = 'NON' AND A.NUMERO_PIECE_INF_4 = 'NON' AND A.NUMERO_PIECE_NON_AUTHORISE = 'NON' AND A.NUMERO_PIECE_EGALE_MSISDN = 'NON' AND A.NUMERO_PIECE_A_CARACT_NON_AUTH = 'NON' AND A.NUMERO_PIECE_UNIQUEMENT_LETTRE = 'NON' AND
                                A.DATE_EXPIRATION_DOUTEUSE = 'NON' AND
                                A.TYPE_PIECE IS NOT NULL AND
                                A.DATE_NAISSANCE_ABSENT = 'NON' AND A.DATE_NAISSANCE_DOUTEUX = 'NON' AND
                                A.NOM_PARENT_ABSENT = 'NON' AND A.NOM_PARENT_DOUTEUX = 'NON' AND
                                A.NUMERO_PIECE_TUT_ABSENT = 'NON' AND A.NUMERO_PIECE_TUT_INF_4 = 'NON' AND A.NUMERO_PIECE_TUT_NON_AUTH = 'NON' AND A.NUMERO_PIECE_TUT_EGALE_MSISDN = 'NON' AND A.NUMERO_PIECE_TUT_CARAC_NON_A = 'NON' AND A.NUMERO_PIECE_TUT_UNIQ_LETTRE = 'NON' AND
                                A.DATE_NAISSANCE_TUTEUR IS NOT NULL AND
                                A.CNI_EXPIRE = 'NON' AND
                                A.MULTI_SIM = 'NON' AND
                                A.ADDRESSE IS NOT NULL AND
                                A.IMEI IS NOT NULL
                            ) THEN 'OUI' ELSE 'NON'
                    END) 
                ELSE NULL
            END) CONFORM_OCM_P_PHY_MINEUR,
            (CASE 
                WHEN A.TYPE_PERSONNE = 'MINEUR' THEN
                    (
                        CASE WHEN (
                                --A.STATUT_BSCS = 'ACTIF' AND
                                A.DATE_ACTIVATION IS NOT NULL AND
                                A.NOM_ABSENT = 'NON' AND A.NOM_DOUTEUX = 'NON' AND
                                A.NUMERO_PIECE_ABSENT = 'NON' AND A.NUMERO_PIECE_INF_4 = 'NON' AND A.NUMERO_PIECE_NON_AUTHORISE = 'NON' AND A.NUMERO_PIECE_EGALE_MSISDN = 'NON' AND A.NUMERO_PIECE_A_CARACT_NON_AUTH = 'NON' AND A.NUMERO_PIECE_UNIQUEMENT_LETTRE = 'NON' AND
                                A.DATE_EXPIRATION_DOUTEUSE = 'NON' AND
                                A.TYPE_PIECE IS NOT NULL AND
                                A.DATE_NAISSANCE_ABSENT = 'NON' AND A.DATE_NAISSANCE_DOUTEUX = 'NON' AND
                                A.NOM_PARENT_ABSENT = 'NON' AND A.NOM_PARENT_DOUTEUX = 'NON' AND
                                A.NUMERO_PIECE_TUT_ABSENT = 'NON' AND A.NUMERO_PIECE_TUT_INF_4 = 'NON' AND A.NUMERO_PIECE_TUT_NON_AUTH = 'NON' AND A.NUMERO_PIECE_TUT_EGALE_MSISDN = 'NON' AND A.NUMERO_PIECE_TUT_CARAC_NON_A = 'NON' AND A.NUMERO_PIECE_TUT_UNIQ_LETTRE = 'NON' AND
                                A.DATE_NAISSANCE_TUTEUR IS NOT NULL AND
                                A.CNI_EXPIRE = 'NON' AND
                                A.MULTI_SIM = 'NON' AND
                                A.ADDRESSE IS NOT NULL AND
                                A.IMEI IS NOT NULL 
                            ) THEN 'OUI' ELSE 'NON'
                    END) 
                ELSE NULL
            END) CONFORM_ART_P_PHY_MINEUR,
            (CASE WHEN A.ODBOUTGOINGCALLS = '1' AND A.ODBINCOMINGCALLS = '1' THEN 'OUI' ELSE (CASE WHEN A.ODBOUTGOINGCALLS = '1' THEN'OUI' ELSE 'NON' END ) END) EST_SUSPENDU,            
            (CASE WHEN A.NOM_STRUCTURE IS NULL THEN 'OUI' ELSE 'NON' END) NOM_STRUCTURE_ABSENT,
            (CASE WHEN A.NUMERO_REGISTRE_COMMERCE IS NULL THEN 'OUI' ELSE 'NON' END) NUMERO_REGISTRE_ABSENT,
            (CASE WHEN UPPER(A.NUMERO_REGISTRE_COMMERCE) = 'NON RENSEIGNE' THEN 'OUI' ELSE 'NON' END) NUMERO_REGISTRE_DOUTEUX,
            (CASE WHEN A.IMEI IS NULL THEN 'OUI' ELSE 'NON' END) IMEI_ABSENT
        FROM MON.TT_FT_BDI_II A
        --LEFT JOIN (SELECT DISTINCT MSISDN FROM TT_BDI_SUSPENDED) B ON A.MSISDN = B.MSISDN
    ) A
    LEFT JOIN (SELECT MSISDN, IDENTIFICATEUR, PROFESSION_IDENTIFICATEUR FROM DIM.DT_BASE_IDENTIFICATION) B ON A.MSISDN = B.MSISDN;
        
    COMMIT;
    
    /* Delete previous days data*/
    /*DELETE 
    FROM FT_BDI
    WHERE EVENT_DATE < D_SLICE_VALUE;*/
    
    COMMIT;
    
    EXECUTE IMMEDIATE 'TRUNCATE TABLE MON.TT_FT_BDI' ;   
    EXECUTE IMMEDIATE 'TRUNCATE TABLE MON.TT_FT_BDI_II' ;   
    COMMIT;
    
    -- Empty Aggregat table for date
    
    DELETE 
    FROM FT_A_BDI_V2
    WHERE EVENT_DATE = D_SLICE_VALUE;
    
    COMMIT;
    
    -- Insert data into aggregat table
    INSERT INTO/*append*/ FT_A_BDI_V2
    SELECT
        A.EVENT_DATE,
        NVL(A.TYPE_PERSONNE, 'NA') TYPE_PERSONNE,
        A.REGION_ADMINISTRATIVE REGION,
        A.VILLE,
        A.SITE_NAME SITE,
        MAX(A.LONGITUDE) LONGITUDE,
        MAX(A.LATITUDE) LATITUDE,
        SUM(CASE WHEN A.EST_PRESENT_OCM = 'OUI' THEN 1 ELSE 0 END) NB_PARC_COMMERCIAL,
        SUM(CASE WHEN A.EST_PRESENT_GP = 'OUI' THEN 1 ELSE 0 END) NB_PARC_GROUPE,
        SUM(CASE WHEN A.EST_PRESENT_ART = 'OUI' THEN 1 ELSE 0 END) NB_PARC_ART,
        COUNT(DISTINCT A.MSISDN) NB_BDI,
        SUM(CASE WHEN A.STATUT_BSCS = 'ACTIF' THEN 1 ELSE 0 END) NB_ACTIF_HLR,
        SUM(CASE WHEN A.EST_PREMIUM = 'OUI' THEN 1 ELSE 0 END) NB_PREMIUM,
        SUM(CASE WHEN A.EST_CLIENT_VIP = 'OUI' THEN 1 ELSE 0 END) NB_VIP,
        SUM(CASE WHEN A.STATUT_DEROGATION = 'OUI' THEN 1 ELSE 0 END) NB_AVEC_DEROGATION,
        SUM(CASE WHEN TRUNC(A.DATE_ACTIVATION) = A.EVENT_DATE THEN 1 ELSE 0 END) NB_ACTIVATION,
        SUM(CASE WHEN TRUNC(A.DATE_ACTIVATION) = A.EVENT_DATE AND A.CONFORME_ART = 'NON' THEN 1 ELSE 0 END) NB_ACTIVATION_MAL_IDENTIF,
        SUM(CASE WHEN A.CONFORME_ART = 'NON' THEN 1 ELSE 0 END) NB_MAL_IDENTIF,
        SUM(CASE WHEN A.MULTI_SIM = 'OUI' THEN 1 ELSE 0 END) NB_MAL_IDENTIF_MULTI_SIM,
        SUM(CASE WHEN A.CNI_EXPIRE = 'OUI' THEN 1 ELSE 0 END) NB_MAL_IDENTIF_CNI_EXPIRE,
        SUM(CASE WHEN A.CONFORME_ART = 'NON' AND A.EST_PRESENT_OM = 'OUI' THEN 1 ELSE 0 END) NB_MAL_IDENTIF_OM,
        SUM(CASE WHEN A.CONFORME_ART = 'NON' AND A.EST_PRESENT_ZEB = 'OUI' THEN 1 ELSE 0 END) NB_MAL_IDENTIF_ZEB,
        SUM(CASE WHEN A.CONFORME_ART = 'NON' AND A.EST_PREMIUM = 'OUI' THEN 1 ELSE 0 END) NB_MAL_IDENTIF_PREMIUM,
        SUM(CASE WHEN A.CONFORME_ART = 'NON' AND A.EST_CLIENT_VIP = 'OUI' THEN 1 ELSE 0 END) NB_MAL_IDENTIF_VIP,
        SUM(CASE WHEN A.CONFORME_ART = 'NON' AND A.STATUT_DEROGATION = 'OUI' THEN 1 ELSE 0 END) NB_MAL_IDENTIF_DEROGATION,
        SUM(CASE WHEN A.CONFORME_ART = 'OUI' AND B.CONFORME_ART = 'NON'  THEN 1 ELSE 0 END) NB_CORRECTION,
        0 NB_SANS_SCAN
    FROM 
    (
        SELECT *
        FROM FT_BDI
        WHERE EVENT_DATE =D_SLICE_VALUE
        AND EST_SUSPENDU ='NON'
    ) A
    LEFT JOIN 
    (
        SELECT *
        FROM FT_BDI
        WHERE EVENT_DATE = (SELECT MAX(EVENT_DATE) FROM FT_A_BDI WHERE EVENT_DATE < D_SLICE_VALUE)
        AND EST_SUSPENDU ='NON'
    ) B ON A.MSISDN = B.MSISDN
    GROUP BY A.EVENT_DATE, A.REGION_ADMINISTRATIVE, A.VILLE, A.SITE_NAME, NVL(A.TYPE_PERSONNE, 'NA');

    COMMIT;
    
  RETURN 'OK';
 END FN_BDI;
/

