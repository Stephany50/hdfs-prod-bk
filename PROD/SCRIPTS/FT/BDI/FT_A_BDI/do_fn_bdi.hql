truncate table TMP.TT_FT_BDI;

truncate table TMP.TT_FT_BDI_II;

truncate table TMP.TT_MULTISIMS;

truncate table TMP.TT_SCANS_FANTAISISTES;

truncate table TMP.TT_MAJ;

truncate table TMP.TT_MIN;

insert into TMP.TT_FT_BDI
SELECT
SUBSTR(trim(A.MSISDN), -9, 9) AS MSISDN,
trim(A.TYPE_PIECE) AS TYPE_PIECE,
trim(A.NUMERO_PIECE) AS NUMERO_PIECE,
UPPER(trim(A.NOM_PRENOM)) AS NOM_PRENOM,
UPPER(trim(A.NOM)) AS NOM,
UPPER(trim(A.PRENOM)) AS PRENOM,
(CASE
WHEN trim(A.DATE_NAISSANCE) IS NULL OR trim(A.DATE_NAISSANCE) = '' THEN NULL
WHEN trim(A.DATE_NAISSANCE) LIKE '%-%'
THEN cast(substr(trim(A.DATE_NAISSANCE),1,10) as DATE)
WHEN trim(A.DATE_NAISSANCE) LIKE '%/%'
THEN cast(translate(substr(trim(A.DATE_NAISSANCE),1,10),'/','-') as DATE)
ELSE NULL
END) DATE_NAISSANCE,
(CASE
WHEN trim(A.DATE_EXPIRATION) IS NULL OR trim(A.DATE_EXPIRATION) = '' THEN NULL
WHEN trim(A.DATE_EXPIRATION) LIKE '%-%'
THEN cast(substr(trim(A.DATE_EXPIRATION),1,10) AS DATE)
WHEN trim(A.DATE_EXPIRATION) LIKE '%/%'
THEN cast(translate(substr(trim(A.DATE_EXPIRATION),1,10),'/','-')  AS DATE)
ELSE NULL
END) DATE_EXPIRATION,
UPPER(trim(A.ADDRESSE)) AS ADRESSE,
trim(A.NUMERO_PIECE_TUTEUR) AS NUMERO_PIECE_TUTEUR,
trim(A.NOM_PARENT) AS NOM_PARENT,
(CASE
WHEN trim(A.DATE_NAISSANCE_TUTEUR) IS NULL OR trim(A.DATE_NAISSANCE_TUTEUR) = '' THEN NULL
WHEN trim(A.DATE_NAISSANCE_TUTEUR) LIKE '%-%'
THEN cast(substr(trim(A.DATE_NAISSANCE_TUTEUR),1,10)  AS DATE)
WHEN trim(A.DATE_NAISSANCE_TUTEUR) LIKE '%/%'
THEN cast(translate(substr(trim(A.DATE_NAISSANCE_TUTEUR),1,10),'/','-')  AS DATE)
ELSE NULL
END) DATE_NAISSANCE_TUTEUR,
trim(A.NOM_STRUCTURE) AS NOM_STRUCTURE,
trim(A.NUMERO_REGISTRE_COMMERCE) AS NUMERO_REGISTRE_COMMERCE,
trim(A.NUMERO_PIECE_REP_LEGAL) AS NUMERO_PIECE_REP_LEGAL,
(CASE
WHEN trim(A.DATE_ACTIVATION) IS NULL OR trim(A.DATE_ACTIVATION) = '' THEN NULL
WHEN trim(A.DATE_ACTIVATION) like '%/%'
THEN  cast(translate(SUBSTR(trim(A.DATE_ACTIVATION), 1, 19),'/','-') AS TIMESTAMP)
WHEN trim(A.DATE_ACTIVATION) like '%-%' THEN  cast(SUBSTR(trim(A.DATE_ACTIVATION), 1, 19) AS TIMESTAMP)
ELSE NULL
END) DATE_ACTIVATION,
(CASE
WHEN trim(A.DATE_CHANGEMENT_STATUT) IS NULL OR trim(A.DATE_CHANGEMENT_STATUT) = '' THEN NULL
WHEN trim(A.DATE_CHANGEMENT_STATUT) like '%/%'
THEN  cast(translate(SUBSTR(trim(A.DATE_CHANGEMENT_STATUT), 1, 19),'/','-') AS TIMESTAMP)
WHEN trim(A.DATE_CHANGEMENT_STATUT) like '%-%'
THEN  cast(SUBSTR(trim(A.DATE_CHANGEMENT_STATUT), 1, 19) AS TIMESTAMP)
ELSE NULL
END) DATE_CHANGEMENT_STATUT,
UPPER(trim(A.STATUT_BSCS)) AS STATUT_BSCS,
trim(A.ODBINCOMINGCALLS) AS ODBINCOMINGCALLS,
trim(A.ODBOUTGOINGCALLS) AS ODBOUTGOINGCALLS,
trim(A.IMEI) AS IMEI,
(CASE WHEN F.MSISDN IS NULL OR trim(F.MSISDN) = '' THEN 'NON' ELSE 'OUI' END) STATUT_DEROGATION,
trim(B.ADMINISTRATIVE_REGION) AS REGION_ADMINISTRATIVE,
trim(B.COMMERCIAL_REGION) AS REGION_COMMERCIALE,
trim(B.SITE_NAME) AS SITE_NAME,
trim(B.TOWNNAME) AS VILLE,
trim(B.LONGITUDE) AS LONGITUDE,
trim(B.LATITUDE) AS LATITUDE,
(Case when C.access_key is not null AND trim(C.access_key) <> ''
THEN trim(C.COMMERCIAL_OFFER)  ELSE 'N/A'
END) OFFRE_COMMERCIALE,
( Case when trim(C.access_key) is not null AND trim(C.access_key) <> ''
THEN UPPER(NVL(C.OSP_CONTRACT_TYPE, C.OSP_ACCOUNT_TYPE)) ELSE 'N/A'
END) TYPE_CONTRAT,
(Case when trim(C.access_key) is not null AND trim(C.access_key) <> ''
THEN trim(C.SEGMENTATION) ELSE 'N/A'
END) SEGMENTATION,
0  REV_M_3,
0  REV_M_2,
0 REV_M_1,
0 REV_MOY,
(Case when trim(C.access_key) is not null AND trim(C.access_key) <> ''
THEN trim(C.OSP_STATUS)
ELSE 'N/A' END) AS STATUT_IN,
(CASE WHEN trim(A.NUMERO_PIECE) = '' OR A.NUMERO_PIECE IS NULL THEN 'OUI' ELSE 'NON' END) NUMERO_PIECE_ABSENT,
(CASE WHEN trim(A.NUMERO_PIECE_TUTEUR) = '' OR A.NUMERO_PIECE_TUTEUR IS NULL THEN 'OUI' ELSE 'NON' END) NUMERO_PIECE_TUT_ABSENT,
(CASE WHEN not(trim(A.NUMERO_PIECE) is null or trim(A.NUMERO_PIECE) = '') AND LENGTH(trim(A.NUMERO_PIECE)) < 4
THEN 'OUI' ELSE 'NON' END) NUMERO_PIECE_INF_4,
(CASE WHEN not(trim(A.NUMERO_PIECE_TUTEUR) is null or trim(A.NUMERO_PIECE_TUTEUR) = '') AND
LENGTH(trim(A.NUMERO_PIECE_TUTEUR)) < 4 THEN 'OUI' ELSE 'NON' END) NUMERO_PIECE_TUT_INF_4,
(
CASE WHEN TRIM(A.NUMERO_PIECE) IN ('000000000', '111111111', '222222222', '333333333',
'444444444', '555555555', '666666666', '777777777', '888888888', '999999999',
'012345678','122222222', '123456789', '100010001', '1122334455') OR
LENGTH(trim(A.NUMERO_PIECE)) > 21 OR TRIM(A.NUMERO_PIECE) LIKE '112233445%' THEN 'OUI' ELSE 'NON' END
) NUMERO_PIECE_NON_AUTHORISE,
(
CASE WHEN TRIM(A.NUMERO_PIECE_TUTEUR) IN ('000000000', '111111111', '222222222', '333333333',
'444444444', '555555555', '666666666', '777777777', '888888888', '999999999',
'012345678','122222222', '123456789', '100010001', '1122334455') OR LENGTH(TRIM(A.NUMERO_PIECE_TUTEUR)) > 21 OR
trim(A.NUMERO_PIECE) = trim(A.NUMERO_PIECE_TUTEUR) OR TRIM(A.NUMERO_PIECE_TUTEUR) LIKE '112233445%' THEN 'OUI' ELSE 'NON' END
) NUMERO_PIECE_TUT_NON_AUTH,
(CASE WHEN trim(A.MSISDN) = trim(A.NUMERO_PIECE) THEN 'OUI' ELSE 'NON' END) NUMERO_PIECE_EGALE_MSISDN,
(CASE WHEN trim(A.MSISDN) = trim(A.NUMERO_PIECE_TUTEUR) THEN 'OUI' ELSE 'NON' END) NUMERO_PIECE_TUT_EGALE_MSISDN,
(CASE WHEN TRIM(TRANSLATE(LOWER(trim(A.NUMERO_PIECE)), 'abcdefghijklmnopqMCMLXXXIVrstuvwxyz1234567890-/',' ')) is not null
AND TRIM(TRANSLATE(LOWER(trim(A.NUMERO_PIECE)), 'abcdefghijklmnopqMCMLXXXIVrstuvwxyz1234567890-/',' ')) <> ''
THEN 'OUI' ELSE 'NON'
END) NUMERO_PIECE_A_CARACT_NON_AUTH,
(CASE WHEN TRIM(TRANSLATE(LOWER(trim(A.NUMERO_PIECE_TUTEUR)), 'abcdefghijklmnopMCMLXXXIVqrstuvwxyz1234567890-/',' ')) is not null
AND TRIM(TRANSLATE(LOWER(trim(A.NUMERO_PIECE_TUTEUR)), 'abcdefghijklmnopMCMLXXXIVqrstuvwxyz1234567890-/',' ')) <> ''
THEN 'OUI' ELSE 'NON'
END) NUMERO_PIECE_TUT_CARAC_NON_A,
(CASE WHEN TRIM(TRANSLATE(LOWER(trim(A.NUMERO_PIECE)), 'abcdefghijklmnopqrMCMLXXXIVstuvwxyz-',' ')) = ''
OR TRIM(TRANSLATE(LOWER(trim(A.NUMERO_PIECE)), 'abcdefghijklmnopqrMCMLXXXIVstuvwxyz-',' ')) is null
THEN 'OUI' ELSE 'NON'
END) NUMERO_PIECE_UNIQUEMENT_LETTRE,
(CASE WHEN TRIM(TRANSLATE(LOWER(trim(A.NUMERO_PIECE_TUTEUR)), 'abcdefghijklMCMLXXXIVmnopqrstuvwxyz-',' ')) = ''
OR TRIM(TRANSLATE(LOWER(trim(A.NUMERO_PIECE_TUTEUR)), 'abcdefghijklMCMLXXXIVmnopqrstuvwxyz-',' ')) is null
THEN 'OUI' ELSE 'NON'
END) NUMERO_PIECE_TUT_UNIQ_LETTRE,
(CASE WHEN trim(A.NOM_PRENOM) = '' OR A.NOM_PRENOM IS NULL THEN 'OUI' ELSE 'NON' END) NOM_PRENOM_ABSENT,
(CASE WHEN trim(A.NOM_PARENT) = '' OR A.NOM_PARENT IS NULL THEN 'OUI' ELSE 'NON' END) NOM_PARENT_ABSENT,
(CASE WHEN (TRIM(TRANSLATE(LOWER(trim(A.NOM_PRENOM)),'aeiou',' ')) = ''
OR TRIM(TRANSLATE(LOWER(trim(A.NOM_PRENOM)),'aeiou',' ')) is null)
OR (TRIM(TRANSLATE(LOWER(trim(A.NOM_PRENOM)),'bcdfghjklmnpqrstvwxz',' '))  = ''
OR TRIM(TRANSLATE(LOWER(trim(A.NOM_PRENOM)),'bcdfghjklmnpqrstvwxz',' ')) is null)
OR (TRIM(TRANSLATE(trim(A.NOM_PRENOM),'1234567890.',' '))  = ''
OR TRIM(TRANSLATE(trim(A.NOM_PRENOM),'1234567890.',' ')) is null)
OR (LENGTH(trim(A.NOM_PRENOM)) <= 1 and trim(A.NOM_PRENOM) is not null and trim(A.NOM_PRENOM) <> '')
OR LOWER(TRIM(A.NOM_PRENOM)) IN ('orange', 'vendeur', 'madame', 'monsieur', 'delta', 'phone', 'inconnu', 'inconnue', 'anonyme', 'unknown')
OR (TRIM(TRANSLATE(LOWER(trim(A.NOM_PRENOM)),'*/\?,)([@]_%#}&{    asdfghjklqwertyuiopzxcvbnm1MCMLXXXIV234567890¿çéèàäëüïöîôûâê-.''',' ')) is not null
AND TRIM(TRANSLATE(LOWER(trim(A.NOM_PRENOM)),'*/\?,)([@]_%#}&{    asdfghjklqwertyuiopzxcvbnm1MCMLXXXIV234567890¿çéèàäëüïöîôûâê-.''',' ')) <> ''
)
THEN 'OUI' ELSE 'NON'
END) NOM_PRENOM_DOUTEUX,
(CASE WHEN (TRIM(TRANSLATE(LOWER(trim(A.NOM_PARENT)),'aeiou',' ')) = ''
OR TRIM(TRANSLATE(LOWER(trim(A.NOM_PARENT)),'aeiou',' ')) is null)
OR (TRIM(TRANSLATE(LOWER(trim(A.NOM_PARENT)),'bcdfghjklmnpqrstvwxz',' ')) = ''
OR TRIM(TRANSLATE(LOWER(trim(A.NOM_PARENT)),'bcdfghjklmnpqrstvwxz',' ')) is null
)
OR (TRIM(TRANSLATE(trim(A.NOM_PARENT),'1234567890.',' ')) = ''
OR TRIM(TRANSLATE(trim(A.NOM_PARENT),'1234567890.',' ')) is null)
OR (LENGTH(trim(A.NOM_PARENT)) <= 1 and trim(A.NOM_PARENT) is not null and trim(A.NOM_PARENT) <> '')
OR LOWER(TRIM(A.NOM_PARENT)) IN ('orange', 'vendeur', 'madame', 'monsieur', 'delta', 'phone', 'inconnu', 'inconnue', 'anonyme', 'unknown')
OR (TRIM(TRANSLATE(LOWER(trim(A.NOM_PARENT)),'*/\?,)([@]_%#}&{    asdfghjklqwertyuiopzxMCMLXXXIVcvbnm1234567890¿çéèàäëüïöîôûâê-.''',' ')) <> ''
AND TRIM(TRANSLATE(LOWER(trim(A.NOM_PARENT)),'*/\?,)([@]_%#}&{    asdfghjklqwertyuiopzxMCMLXXXIVcvbnm1234567890¿çéèàäëüïöîôûâê-.''',' ')) is not null
)
THEN 'OUI' ELSE 'NON'
END) NOM_PARENT_DOUTEUX,
(CASE WHEN trim(A.DATE_NAISSANCE) = '' OR A.DATE_NAISSANCE IS NULL THEN 'OUI' ELSE 'NON' END) DATE_NAISSANCE_ABSENT,
(CASE WHEN trim(A.DATE_NAISSANCE_TUTEUR) = '' OR A.DATE_NAISSANCE_TUTEUR IS NULL THEN 'OUI' ELSE 'NON' END) DATE_NAISSANCE_TUT_ABSENT,
(CASE WHEN trim(A.DATE_EXPIRATION) = '' OR A.DATE_EXPIRATION IS NULL THEN 'OUI' ELSE 'NON' END) DATE_EXPIRATION_ABSENT,
(CASE WHEN trim(A.ADDRESSE ) = '' OR A.ADDRESSE IS NULL THEN 'OUI' ELSE 'NON' END) ADRESSE_ABSENT,
(CASE WHEN (TRIM(TRANSLATE(LOWER(trim(A.ADDRESSE)), 'abcdefghijklmnopqrstuvwxyz123456MCMLXXXIV()[]_7890çéèàäëüïöî¿ôûâê,-./'':',' ')) is not null
AND TRIM(TRANSLATE(LOWER(trim(A.ADDRESSE)), 'abcdefghijklmnopqrstuvwxyz123456MCMLXXXIV()[]_7890çéèàäëüïöî¿ôûâê,-./'':',' ')) <> ''
)
OR (TRIM(TRANSLATE(trim(A.ADDRESSE), '1234567890-./'':',' ')) =  ''
OR TRIM(TRANSLATE(trim(A.ADDRESSE), '1234567890-./'':',' ')) is null
)
OR (TRIM(TRANSLATE(LOWER(trim(A.ADDRESSE)), 'bcdfghjklmnpqrstvwxzç-./,'':',' '))  =  ''
OR TRIM(TRANSLATE(LOWER(trim(A.ADDRESSE)), 'bcdfghjklmnpqrstvwxzç-./,'':',' ')) is null
)
OR (TRIM(TRANSLATE(LOWER(trim(A.ADDRESSE)), 'aeiouéèàäëüïöîôûâê-./'':',' '))   =  ''
OR TRIM(TRANSLATE(LOWER(trim(A.ADDRESSE)), 'aeiouéèàäëüïöîôûâê-./'':',' ')) is null
)
OR (LENGTH(TRIM(A.ADDRESSE)) < 2 AND not(TRIM(A.ADDRESSE) is null or TRIM(A.ADDRESSE) = ''))
OR TRIM(LOWER(trim(A.ADDRESSE))) IN ('n/a', 'nan', 'unknown', 'inconnue', 'sans adresse','sans','non renseignée') THEN 'OUI' ELSE 'NON'
END) ADRESSE_DOUTEUSE,
(CASE WHEN trim(A.TYPE_PERSONNE) = '' OR A.TYPE_PERSONNE IS NULL THEN 'OUI' ELSE 'NON' END) TYPE_PERSONNE_INCONNU,
(CASE WHEN
NOT(trim(A.DATE_NAISSANCE) = '' OR A.DATE_NAISSANCE IS NULL )
AND trim(A.DATE_NAISSANCE) LIKE '%-%' AND LENGTH(trim(A.DATE_NAISSANCE))=10
AND IF(trim(A.DATE_NAISSANCE) is null or trim(A.DATE_NAISSANCE) = ''
,to_date('2020-05-10')
,CASE WHEN trim(A.DATE_NAISSANCE) LIKE '%-%'
THEN substr(trim(A.DATE_NAISSANCE),1,10)
WHEN trim(A.DATE_NAISSANCE) LIKE '%/%'
THEN translate(substr(trim(A.DATE_NAISSANCE),1,10),'/','-')
END
) > add_months(to_date('2020-05-10'),-18*12)
AND (
trim(A.NUMERO_PIECE_TUTEUR) IS NULL
OR trim(A.NUMERO_PIECE_TUTEUR) = ''
OR trim(A.NUMERO_PIECE) = trim(A.NUMERO_PIECE_TUTEUR)
OR trim(A.DATE_NAISSANCE_TUTEUR) IS NULL
OR trim(A.DATE_NAISSANCE_TUTEUR)  = ''
OR trim(A.DATE_NAISSANCE_TUTEUR) NOT LIKE '%-%'
OR trim(A.DATE_NAISSANCE_TUTEUR) NOT LIKE '%/%'
OR LENGTH(trim(A.DATE_NAISSANCE_TUTEUR))<10
OR IF(TRIM(A.DATE_NAISSANCE_TUTEUR) is null OR TRIM(A.DATE_NAISSANCE_TUTEUR) = ''
,to_date('2020-05-10')
,CASE WHEN trim(A.DATE_NAISSANCE_TUTEUR) LIKE '%-%'
THEN substr(trim(A.DATE_NAISSANCE_TUTEUR),1,10)
WHEN trim(A.DATE_NAISSANCE_TUTEUR) LIKE '%/%'
THEN translate(substr(trim(A.DATE_NAISSANCE_TUTEUR),1,10),'/','-')
END
) > add_months(to_date('2020-05-10'),-18*12)
) THEN 'OUI' ELSE 'NON'
END) AS MINEUR_MAL_IDENTIFIE,
(CASE WHEN  NOT(trim(G.MSISDN) is null or trim(G.MSISDN) = '') THEN 'OUI' ELSE 'NON' END) EST_PREMIUM,
trim(A.TYPE_PIECE_TUTEUR) AS TYPE_PIECE_TUTEUR,
trim(A.ADRESSE_TUTEUR) AS ADRESSE_TUTEUR,
trim(A.ACCEPTATION_CGV) AS ACCEPTATION_CGV,
trim(A.CONTRAT_SOUCRIPTION) AS CONTRAT_SOUCRIPTION,
trim(A.DISPONIBILITE_SCAN) AS DISPONIBILITE_SCAN,
trim(A.PLAN_LOCALISATION) AS PLAN_LOCALISATION,
trim(A.TYPE_PERSONNE) AS TYPE_PERSONNE_I,
(CASE
WHEN trim(A.DATE_VALIDATION_BO) IS NULL OR trim(A.DATE_VALIDATION_BO) = '' THEN NULL
WHEN trim(A.DATE_VALIDATION_BO) like '%/%'
THEN  from_unixtime(unix_timestamp(translate(SUBSTR(trim(A.DATE_VALIDATION_BO), 1, 19),'/','-'),'yyyy-MM-dd HH:mm:ss'))
WHEN trim(A.DATE_VALIDATION_BO) like '%-%' THEN  from_unixtime(unix_timestamp(SUBSTR(trim(A.DATE_VALIDATION_BO), 1, 19),'yyyy-MM-dd HH:mm:ss'))
ELSE NULL
END) AS DATE_VALIDATION_BO,
trim(A.STATUT_VALIDATION_BO) As STATUT_VALIDATION_BO,
trim(A.MOTIF_REJET_BO) AS MOTIF_REJET_BO,
current_timestamp() AS INSERT_DATE,
to_date('2020-05-10') AS EVENT_DATE
FROM (
SELECT *
FROM CDR.SPARK_IT_BDI
WHERE ORIGINAL_FILE_DATE =  date_add(to_date('2020-05-10'), 1)
) A
LEFT JOIN
(
SELECT AA.*, BB.LONGITUDE, BB.LATITUDE
FROM
(
SELECT * FROM (
SELECT a.*, ROW_NUMBER() OVER (PARTITION  BY msisdn ORDER BY LAST_LOCATION_DAY DESC, insert_date desc) RN
FROM MON.SPARK_FT_CLIENT_LAST_SITE_DAY a
WHERE EVENT_DATE = to_date('2020-05-10')
) x WHERE RN=1
) AA
LEFT JOIN
(
SELECT *
FROM
(
SELECT DISTINCT
SITE_NAME,
LONGITUDE,
LATITUDE,
ROW_NUMBER() OVER (PARTITION BY SITE_NAME ORDER BY SITE_NAME DESC) AS RANG
FROM DIM.SPARK_DT_GSM_CELL_CODE
) y WHERE RANG = 1
) BB ON AA.SITE_NAME = BB.SITE_NAME
) B ON trim(A.MSISDN) = trim(B.MSISDN)
LEFT JOIN (SELECT * FROM (SELECT * FROM MON.SPARK_FT_CONTRACT_SNAPSHOT WHERE EVENT_DATE = to_date('2020-05-10')) A
LEFT JOIN (
select OFFER_PROFILE_ID, CUSTOMER_TYPE, CUSTOMER_PROFILE, OFFER_NAME, PROFILE_CODE, PROFILE_NAME, INITIAL_CREDIT, RESALE_OF_TRAFFIC, RATEPLAN_ID, PLATFORM, CRM_SEGMENTATION,
DECILE_TYPE, VALID_FROM_DATECODE, VALID_TO_DATECODE, IVR_NUMBER, PROFILE_ID, CONTRACT_TYPE, ESSBASE_SEGMENTATION, ESSBASE_RATEPLAN, OFFER_GROUP, OPERATOR_CODE AS OPERATOR_CODE_DIM,
HORIZON_DOMAIN_CODE, HORIZON_DOMAIN_DESC, HORIZON_MARKET_CODE, HORIZON_MARKET_DESC, HORIZON_OFFER_CODE, HORIZON_OFFER_DESC, SEGMENTATION, OFFRE_B_TO_B, CAT_OFFRE_B_TO_B
from DIM.SPARK_DT_OFFER_PROFILES) B ON A.COMMERCIAL_OFFER = B.PROFILE_CODE) C ON SUBSTR(trim(A.MSISDN), -9, 9) = trim(C.ACCESS_KEY)
LEFT JOIN (
SELECT
MDM.MSISDN,
SUM(CASE WHEN MDM.EVENT_MONTH = substr(add_months(to_date('2020-05-10'),-3),1,7) THEN NVL (MDM.MAIN_RATED_TEL_AMOUNT,0)+NVL (MDM.MAIN_RATED_SMS_AMOUNT,0)+
NVL (MDM.DATA_MAIN_RATED_AMOUNT,0)+NVL (MDM.TOTAL_SUBS_REVENUE,0)+NVL (MDM.DATA_GOS_MAIN_RATED_AMOUNT,0)+NVL (MDM.SOS_FEES,0)+
NVL (MDM.P2P_REFILL_FEES,0) ELSE 0 END) REV_M_3,
SUM(CASE WHEN MDM.EVENT_MONTH = substr(add_months(to_date('2020-05-10'),-2),1,7) THEN NVL (MDM.MAIN_RATED_TEL_AMOUNT,0)+NVL (MDM.MAIN_RATED_SMS_AMOUNT,0)+
NVL (MDM.DATA_MAIN_RATED_AMOUNT,0)+NVL (MDM.TOTAL_SUBS_REVENUE,0)+NVL (MDM.DATA_GOS_MAIN_RATED_AMOUNT,0)+NVL (MDM.SOS_FEES,0)+NVL (MDM.P2P_REFILL_FEES,0)
ELSE 0 END) REV_M_2,
SUM(CASE WHEN MDM.EVENT_MONTH = substr(add_months(to_date('2020-05-10'),-1),1,7) THEN NVL (MDM.MAIN_RATED_TEL_AMOUNT,0)+NVL (MDM.MAIN_RATED_SMS_AMOUNT,0)+
NVL (MDM.DATA_MAIN_RATED_AMOUNT,0)+NVL (MDM.TOTAL_SUBS_REVENUE,0)+NVL (MDM.DATA_GOS_MAIN_RATED_AMOUNT,0)+NVL (MDM.SOS_FEES,0)+NVL (MDM.P2P_REFILL_FEES,0)
ELSE 0 END) REV_M_1
FROM MON.SPARK_FT_MARKETING_DATAMART_MONTH MDM
WHERE EVENT_MONTH IN (substr(add_months(to_date('2020-05-10'),-1),1,7)
,substr(add_months(to_date('2020-05-10'),-2),1,7)
,substr(add_months(to_date('2020-05-10'),-3),1,7))
GROUP BY MSISDN
) D ON SUBSTR(trim(A.MSISDN), -9, 9) = trim(D.MSISDN)
LEFT JOIN (
SELECT
MDM.MSISDN,
SUM(CASE WHEN MDM.MOIS = substr(add_months(to_date('2020-05-10'),-3),1,7) THEN NVL (MDM.MAIN_REVENU_TOTAL,0) + NVL (MDM.PROMO_REVENU_TOTAL,0) ELSE 0 END) POST_REV_M_3,
SUM(CASE WHEN MDM.MOIS = substr(add_months(to_date('2020-05-10'),-2),1,7) THEN NVL (MDM.MAIN_REVENU_TOTAL,0) + NVL (MDM.PROMO_REVENU_TOTAL,0) ELSE 0 END) POST_REV_M_2,
SUM(CASE WHEN MDM.MOIS = substr(add_months(to_date('2020-05-10'),-1),1,7) THEN NVL (MDM.MAIN_REVENU_TOTAL,0) + NVL (MDM.PROMO_REVENU_TOTAL,0) ELSE 0 END) POST_REV_M_1
FROM MON.SPARK_FT_MSISDN_POST_MONTHLY MDM
WHERE MOIS IN (substr(add_months(to_date('2020-05-10'),-1),1,7)
,substr(add_months(to_date('2020-05-10'),-2),1,7)
,substr(add_months(to_date('2020-05-10'),-3),1,7))
GROUP BY MSISDN
) E ON SUBSTR(trim(A.MSISDN), -9, 9) = trim(E.MSISDN)
LEFT JOIN (SELECT DISTINCT MSISDN FROM DIM.SPARK_DT_BDI_DEROGATION) F ON SUBSTR(trim(A.MSISDN), -9, 9) = trim(F.MSISDN)
LEFT JOIN (SELECT DISTINCT MSISDN FROM DIM.SPARK_DT_REF_SEGMENTATION_CLIENT) G ON trim(A.MSISDN) = trim(G.MSISDN);

insert into TMP.TT_FT_BDI_II
SELECT
trim(A.MSISDN) AS MSISDN,
trim(A.TYPE_PIECE)  AS TYPE_PIECE,
trim(A.NUMERO_PIECE) AS NUMERO_PIECE,
trim(A.NOM_PRENOM) AS NOM_PRENOM,
trim(A.NOM) AS NOM,
trim(A.PRENOM) AS PRENOM,
A.DATE_NAISSANCE AS DATE_NAISSANCE,
A.DATE_EXPIRATION AS DATE_EXPIRATION,
trim(A.ADRESSE)  AS ADRESSE,
trim(A.NUMERO_PIECE_TUTEUR)  AS NUMERO_PIECE_TUTEUR,
trim(A.NOM_PARENT)  AS NOM_PARENT,
cast(A.DATE_NAISSANCE_TUTEUR as DATE) AS DATE_NAISSANCE_TUTEUR,
trim(A.NOM_STRUCTURE) AS   NOM_STRUCTURE,
trim(A.NUMERO_REGISTRE_COMMERCE)  AS NUMERO_REGISTRE_COMMERCE,
trim(A.NUMERO_PIECE_REP_LEGAL)  AS NUMERO_PIECE_REP_LEGAL,
A.DATE_ACTIVATION AS DATE_ACTIVATION,
A.DATE_CHANGEMENT_STATUT AS DATE_CHANGEMENT_STATUT,
trim(A.STATUT_BSCS)   AS STATUT_BSCS,
trim(A.ODBINCOMINGCALLS)  AS ODBINCOMINGCALLS,
trim(A.ODBOUTGOINGCALLS) AS ODBOUTGOINGCALLS,
trim(A.IMEI) AS IMEI,
trim(A.STATUT_DEROGATION) AS STATUT_DEROGATION,
trim(A.REGION_ADMINISTRATIVE) AS REGION_ADMINISTRATIVE,
trim(A.REGION_COMMERCIALE) AS REGION_COMMERCIALE,
trim(A.SITE_NAME) AS SITE_NAME,
trim(A.VILLE) AS VILLE,
trim(A.LONGITUDE)  AS  LONGITUDE,
trim(A.LATITUDE)  AS LATITUDE,
trim(A.OFFRE_COMMERCIALE)  AS OFFRE_COMMERCIALE,
trim(A.TYPE_CONTRAT)  AS TYPE_CONTRAT,
trim(A.SEGMENTATION)   AS  SEGMENTATION,
A.REV_M_3  AS REV_M_3,
A.REV_M_2  AS REV_M_2,
A.REV_M_1 AS REV_M_1,
A.REV_MOY As REV_MOY,
trim(A.STATUT_IN) AS STATUT_IN,
trim(A.NUMERO_PIECE_ABSENT)  AS  NUMERO_PIECE_ABSENT,
trim(A.NUMERO_PIECE_TUT_ABSENT)  As NUMERO_PIECE_TUT_ABSENT,
trim(A.NUMERO_PIECE_INF_4)  AS NUMERO_PIECE_INF_4,
trim(A.NUMERO_PIECE_TUT_INF_4)  AS  NUMERO_PIECE_TUT_INF_4,
trim(A.NUMERO_PIECE_NON_AUTHORISE)  AS NUMERO_PIECE_NON_AUTHORISE,
trim(A.NUMERO_PIECE_TUT_NON_AUTH)  AS NUMERO_PIECE_TUT_NON_AUTH,
trim(A.NUMERO_PIECE_EGALE_MSISDN)  AS NUMERO_PIECE_EGALE_MSISDN,
trim(A.NUMERO_PIECE_TUT_EGALE_MSISDN)  AS NUMERO_PIECE_TUT_EGALE_MSISDN,
trim(A.NUMERO_PIECE_A_CARACT_NON_AUTH)  AS NUMERO_PIECE_A_CARACT_NON_AUTH,
trim(A.NUMERO_PIECE_TUT_CARAC_NON_A)  AS NUMERO_PIECE_TUT_CARAC_NON_A,
trim(A.NUMERO_PIECE_UNIQUEMENT_LETTRE)  AS NUMERO_PIECE_UNIQUEMENT_LETTRE,
trim(A.NUMERO_PIECE_TUT_UNIQ_LETTRE)  AS NUMERO_PIECE_TUT_UNIQ_LETTRE,
trim(A.NOM_PRENOM_ABSENT)  AS NOM_PRENOM_ABSENT,
trim(A.NOM_PARENT_ABSENT)  AS NOM_PARENT_ABSENT,
trim(A.NOM_PRENOM_DOUTEUX)  As NOM_PRENOM_DOUTEUX,
trim(A.NOM_PARENT_DOUTEUX)  AS NOM_PARENT_DOUTEUX,
trim(A.DATE_NAISSANCE_ABSENT) AS DATE_NAISSANCE_ABSENT,
trim(A.DATE_NAISSANCE_TUT_ABSENT)  AS DATE_NAISSANCE_TUT_ABSENT,
trim(A.DATE_EXPIRATION_ABSENT)  AS  DATE_EXPIRATION_ABSENT,
trim(A.ADRESSE_ABSENT)  AS ADRESSE_ABSENT,
trim(A.ADRESSE_DOUTEUSE)  AS  ADRESSE_DOUTEUSE,
trim(A.TYPE_PERSONNE_INCONNU)  AS  TYPE_PERSONNE_INCONNU,
trim(A.MINEUR_MAL_IDENTIFIE)  AS MINEUR_MAL_IDENTIFIE,
trim(A.EST_PREMIUM)  AS EST_PREMIUM,
trim(A.TYPE_PIECE_TUTEUR)  AS TYPE_PIECE_TUTEUR,
trim(A.ADRESSE_TUTEUR)  As ADRESSE_TUTEUR,
trim(A.ACCEPTATION_CGV)  As ACCEPTATION_CGV,
trim(A.CONTRAT_SOUCRIPTION)  As CONTRAT_SOUCRIPTION,
trim(A.DISPONIBILITE_SCAN)  AS DISPONIBILITE_SCAN,
trim(A.PLAN_LOCALISATION)  As PLAN_LOCALISATION,
trim(A.TYPE_PERSONNE_I)  AS  TYPE_PERSONNE_I,
(CASE
WHEN UPPER(A.TYPE_PERSONNE_I) = 'PM' THEN
(
CASE
WHEN UPPER(A.OFFRE_COMMERCIALE) IN ('POSTPAID DATALIVE', 'POSTPAID GPRSTRACKING', 'POSTPAID SMARTRACK', 'PREPAID DATALIVE') THEN 'MACHINE_2_MACHINE'
ELSE 'PERSONNE_MORALE' END
)
WHEN UPPER(A.TYPE_PERSONNE_I) = 'PP' AND A.DATE_NAISSANCE IS NOT NULL AND A.DATE_NAISSANCE > add_months(A.EVENT_DATE,-18*12) THEN 'MINEUR'
WHEN UPPER(A.TYPE_PERSONNE_I) = 'PP' AND A.DATE_NAISSANCE IS NOT NULL AND A.DATE_NAISSANCE <= add_months(A.EVENT_DATE,-18*12) THEN 'MAJEUR'
ELSE UPPER(A.TYPE_PERSONNE_I) END) TYPE_PERSONNE,
(CASE WHEN H.MSISDN IS NOT NULL AND trim(H.MSISDN) <> '' THEN H.EVENT_DATE ELSE A.EVENT_DATE END) DATE_ACQUISITION,
(CASE WHEN A.DATE_NAISSANCE > A.EVENT_DATE THEN 'OUI' ELSE 'NON' END) DATE_NAISSANCE_DOUTEUX,
(CASE WHEN A.DATE_NAISSANCE_TUTEUR > A.EVENT_DATE OR  cast((date_format(A.EVENT_DATE,'yyyy') - date_format(A
.DATE_NAISSANCE_TUTEUR,'yyyy')) as int)  < 21
THEN 'OUI' ELSE 'NON' END) DATE_NAISSANCE_TUT_DOUTEUX,
(CASE WHEN  A.DATE_EXPIRATION > add_months(A.EVENT_DATE,120) THEN 'OUI' ELSE 'NON' END)
DATE_EXPIRATION_DOUTEUSE,
(CASE WHEN A.DATE_EXPIRATION IS NULL OR  A.DATE_EXPIRATION < A.EVENT_DATE THEN 'OUI' ELSE 'NON' END) CNI_EXPIRE,
(CASE WHEN F.NUMERO_PIECE IS NOT NULL AND trim(F.NUMERO_PIECE) <> '' AND A.TYPE_PERSONNE_I='PP' THEN 'OUI' ELSE
'NON' END) MULTI_SIM,
(CASE WHEN I.MSISDN IS NULL OR trim(I.MSISDN) = '' THEN 'NON' ELSE 'OUI' END) EST_PRESENT_OM,
(CASE WHEN D.MSISDN IS NULL OR trim(D.MSISDN) = '' THEN 'NON' ELSE 'OUI' END) EST_PRESENT_ZEB,
IF(trim(C.MSISDN) is not null and trim(C.MSISDN) <> ''
,IF(trim(A.OFFRE_COMMERCIALE) like 'POST%'
,'OUI'
,case when trim(C.COMGP_STATUS) = 'ACTIF' then 'OUI'
when trim(C.COMGP_STATUS) = 'INACT' then 'NON'
else 'UNKNOWN'
end
)
,'NON'
) AS EST_PRESENT_ART,
IF(trim(C.MSISDN) is not null and trim(C.MSISDN) <> ''
,IF(trim(A.OFFRE_COMMERCIALE) like 'POST%'
,'OUI'
,case when trim(C.GP_STATUS) = 'ACTIF' then 'OUI'
when trim(C.GP_STATUS) = 'INACT' then 'NON'
else 'UNKNOWN'
end
)
,'NON'
) AS EST_PRESENT_GP,
(CASE WHEN trim(A.STATUT_IN) IN ('ACTIVE', 'INACTIVE') THEN 'OUI' ELSE 'NON' END) EST_PRESENT_OCM,
(case when datediff(to_date('2020-05-10'),E.DATE_DERNIERE_ACTIVITE_OM) <= 90 THEN 'OUI' ELSE 'NON' END) AS EST_ACTIF_OM,
(CASE WHEN G.MSISDN IS NULL OR trim(G.MSISDN) = '' THEN 'NON' ELSE 'OUI' END) EST_CLIENT_VIP,
NVL(E.REV_OM_M_3, 0)  REV_OM_M_3,
NVL(E.REV_OM_M_2, 0)  REV_OM_M_2,
(Case when E.MSISDN is not null and trim(E.MSISDN) <> '' then NVL(E.REV_OM_M_1, 0) else -1 end) REV_OM_M_1,
(CASE WHEN datediff(to_date('2020-05-10'),B.LAST_ACTIVE_DAY) <= 90 THEN 'OUI' ELSE 'NON' END) EST_ACTIF_DATA,
NVL(B.TRAF_M_3, 0)   TRAFFIC_DATA_M_3,
NVL(B.TRAF_M_2, 0)  TRAFFIC_DATA_M_2,
(Case when B.MSISDN IS NULL OR trim(B.MSISDN) = '' then NVL(B.TRAF_M_1, 0) else -1 end) TRAFFIC_DATA_M_1,
A.DATE_VALIDATION_BO  AS DATE_VALIDATION_BO,
A.STATUT_VALIDATION_BO  AS STATUT_VALIDATION_BO,
A.MOTIF_REJET_BO AS MOTIF_REJET_BO,
current_timestamp() AS insert_date,
A.EVENT_DATE AS EVENT_DATE
FROM TMP.TT_FT_BDI A
LEFT JOIN
(
SELECT
MSISDN,
MAX(LAST_ACTIVE_DAY) LAST_ACTIVE_DAY,
SUM(CASE WHEN EVENT_MONTH = substr(add_months(to_date('2020-05-10'),-3),1,7) THEN BYTES_RECEIVED + BYTES_SENT ELSE 0 END) TRAF_M_3,
SUM(CASE WHEN EVENT_MONTH = substr(add_months(to_date('2020-05-10'),-2),1,7) THEN BYTES_RECEIVED + BYTES_SENT ELSE 0 END) TRAF_M_2,
SUM(CASE WHEN EVENT_MONTH = substr(add_months(to_date('2020-05-10'),-1),1,7) THEN BYTES_RECEIVED + BYTES_SENT ELSE 0 END) TRAF_M_1
FROM MON.SPARK_FT_DATA_CONSO_MSISDN_MONTH
WHERE EVENT_MONTH IN (substr(add_months(to_date('2020-05-10'),-3),1,7), substr(add_months(to_date('2020-05-10'),-2),1,7), substr(add_months(to_date('2020-05-10'),-1),1,7))
GROUP BY MSISDN
) B ON substr(trim(A.MSISDN),-9,9) = substr(trim(B.MSISDN),-9,9)
LEFT JOIN
(
SELECT DISTINCT MSISDN, COMGP_STATUS, GP_STATUS
FROM MON.SPARK_FT_ACCOUNT_ACTIVITY
WHERE EVENT_DATE =to_date('2020-05-10')
) C ON substr(trim(A.MSISDN),-9,9) = substr(trim(C.MSISDN),-9,9)
LEFT JOIN
(
SELECT DISTINCT PRIMARY_MSISDN MSISDN
FROM CDR.SPARK_IT_ZEBRA_MASTER
WHERE transaction_date = to_date('2020-05-10')
) D ON substr(trim(A.MSISDN),-9,9) = substr(trim(D.MSISDN),-9,9)
LEFT JOIN
(
SELECT
MSISDN,
MAX(DATE_DERNIERE_ACTIVITE_OM) DATE_DERNIERE_ACTIVITE_OM,
MAX(CASE WHEN MOIS = substr(add_months(to_date('2020-05-10'),-3),1,7) THEN ARPU_OM ELSE 0 END) REV_OM_M_3,
MAX(CASE WHEN MOIS = substr(add_months(to_date('2020-05-10'),-2),1,7) THEN ARPU_OM ELSE 0 END) REV_OM_M_2,
MAX(CASE WHEN MOIS = substr(add_months(to_date('2020-05-10'),-1),1,7) THEN ARPU_OM ELSE 0 END) REV_OM_M_1
FROM MON.SPARK_FT_DATAMART_OM_MONTH
WHERE MOIS IN (substr(add_months(to_date('2020-05-10'),-3),1,7), substr(add_months(to_date('2020-05-10'),-2),1,7), substr(add_months(to_date('2020-05-10'),-1),1,7))
GROUP BY MSISDN
) E ON substr(trim(A.MSISDN),-9,9) = substr(trim(E.MSISDN),-9,9)
LEFT JOIN
(
SELECT NUMERO_PIECE
FROM TMP.TT_FT_BDI
WHERE NOT(ODBOUTGOINGCALLS = '1' AND ODBINCOMINGCALLS = '1')
GROUP BY NUMERO_PIECE
HAVING COUNT(*) > 3
) F ON trim(A.NUMERO_PIECE) = trim(F.NUMERO_PIECE)
LEFT JOIN (SELECT DISTINCT MSISDN FROM DIM.SPARK_DT_BDI_VIP) G ON substr(trim(A.MSISDN),-9,9) = substr(trim(G
.MSISDN),-9,9)
LEFT JOIN (SELECT DISTINCT MSISDN, DATE_ACTIVATION AS EVENT_DATE FROM MON.SPARK_FT_BDI WHERE EVENT_DATE =
DATE_SUB(to_date('2020-05-10'),1)) H ON substr(trim(A.MSISDN),-9,9) = substr(trim(H.MSISDN),-9,9)
LEFT JOIN (
select distinct msisdn
from MON.spark_ft_omny_account_snapshot
where event_date = to_date('2020-05-10')
) I ON substr(trim(A.MSISDN),-9,9) = substr(trim(I.MSISDN),-9,9);

insert into MON.SPARK_FT_BDI
select
ft2.MSISDN AS MSISDN,
ft2.TYPE_PIECE AS TYPE_PIECE,
ft2.NUMERO_PIECE AS NUMERO_PIECE,
ft2.NOM_PRENOM AS NOM_PRENOM,
ft2.NOM AS NOM,
ft2.PRENOM AS PRENOM,
ft2.DATE_NAISSANCE AS DATE_NAISSANCE,
ft2.DATE_EXPIRATION AS DATE_EXPIRATION,
ft2.ADRESSE AS ADRESSE,
ft2.NUMERO_PIECE_TUTEUR AS NUMERO_PIECE_TUTEUR,
ft2.NOM_PARENT AS NOM_PARENT,
ft2.DATE_NAISSANCE_TUTEUR AS DATE_NAISSANCE_TUTEUR,
ft2.NOM_STRUCTURE AS NOM_STRUCTURE,
ft2.NUMERO_REGISTRE_COMMERCE AS NUMERO_REGISTRE_COMMERCE,
ft2.NUMERO_PIECE_REP_LEGAL AS NUMERO_PIECE_REP_LEGAL,
ft2.DATE_ACTIVATION AS DATE_ACTIVATION,
ft2.DATE_CHANGEMENT_STATUT AS DATE_CHANGEMENT_STATUT,
ft2.STATUT_BSCS AS STATUT_BSCS,
ft2.ODBINCOMINGCALLS AS ODBINCOMINGCALLS,
ft2.ODBOUTGOINGCALLS AS ODBOUTGOINGCALLS,
ft2.IMEI AS IMEI,
ft2.STATUT_DEROGATION AS STATUT_DEROGATION,
ft2.REGION_ADMINISTRATIVE AS REGION_ADMINISTRATIVE,
ft2.REGION_COMMERCIALE AS REGION_COMMERCIALE,
ft2.SITE_NAME AS SITE_NAME,
ft2.VILLE AS VILLE,
ft2.LONGITUDE AS LONGITUDE,
ft2.LATITUDE AS LATITUDE,
ft2.OFFRE_COMMERCIALE AS OFFRE_COMMERCIALE,
ft2.TYPE_CONTRAT AS TYPE_CONTRAT,
ft2.SEGMENTATION AS SEGMENTATION,
ft2.REV_M_3 AS REV_M_3,
ft2.REV_M_2 AS REV_M_2,
ft2.REV_M_1 AS REV_M_1,
ft2.REV_MOY AS REV_MOY,
ft2.STATUT_IN AS STATUT_IN,
ft2.NUMERO_PIECE_ABSENT AS NUMERO_PIECE_ABSENT,
ft2.NUMERO_PIECE_TUT_ABSENT AS NUMERO_PIECE_TUT_ABSENT,
ft2.NUMERO_PIECE_INF_4 AS NUMERO_PIECE_INF_4,
ft2.NUMERO_PIECE_TUT_INF_4 AS NUMERO_PIECE_TUT_INF_4,
ft2.NUMERO_PIECE_NON_AUTHORISE AS NUMERO_PIECE_NON_AUTHORISE,
ft2.NUMERO_PIECE_TUT_NON_AUTH AS NUMERO_PIECE_TUT_NON_AUTH,
ft2.NUMERO_PIECE_EGALE_MSISDN AS NUMERO_PIECE_EGALE_MSISDN,
ft2.NUMERO_PIECE_TUT_EGALE_MSISDN AS NUMERO_PIECE_TUT_EGALE_MSISDN,
ft2.NUMERO_PIECE_A_CARACT_NON_AUTH AS NUMERO_PIECE_A_CARACT_NON_AUTH,
ft2.NUMERO_PIECE_TUT_CARAC_NON_A AS NUMERO_PIECE_TUT_CARAC_NON_A,
ft2.NUMERO_PIECE_UNIQUEMENT_LETTRE AS NUMERO_PIECE_UNIQUEMENT_LETTRE,
ft2.NUMERO_PIECE_TUT_UNIQ_LETTRE AS NUMERO_PIECE_TUT_UNIQ_LETTRE,
ft2.NOM_PRENOM_ABSENT AS NOM_PRENOM_ABSENT,
ft2.NOM_PARENT_ABSENT AS NOM_PARENT_ABSENT,
ft2.NOM_PRENOM_DOUTEUX AS NOM_PRENOM_DOUTEUX,
ft2.NOM_PARENT_DOUTEUX AS NOM_PARENT_DOUTEUX,
ft2.DATE_NAISSANCE_ABSENT AS DATE_NAISSANCE_ABSENT,
ft2.DATE_NAISSANCE_TUT_ABSENT AS DATE_NAISSANCE_TUT_ABSENT,
ft2.DATE_EXPIRATION_ABSENT AS DATE_EXPIRATION_ABSENT,
ft2.ADRESSE_ABSENT AS ADRESSE_ABSENT,
ft2.ADRESSE_DOUTEUSE AS ADRESSE_DOUTEUSE,
ft2.TYPE_PERSONNE_INCONNU AS TYPE_PERSONNE_INCONNU,
ft2.MINEUR_MAL_IDENTIFIE AS MINEUR_MAL_IDENTIFIE,
ft2.TYPE_PERSONNE AS TYPE_PERSONNE,
ft2.DATE_ACQUISITION AS DATE_ACQUISITION,
ft2.DATE_NAISSANCE_DOUTEUX AS DATE_NAISSANCE_DOUTEUX,
ft2.DATE_NAISSANCE_TUT_DOUTEUX AS DATE_NAISSANCE_TUT_DOUTEUX,
ft2.DATE_EXPIRATION_DOUTEUSE AS DATE_EXPIRATION_DOUTEUSE,
ft2.CNI_EXPIRE AS CNI_EXPIRE,
ft2.MULTI_SIM AS MULTI_SIM,
ft2.EST_PRESENT_OM AS EST_PRESENT_OM,
ft2.EST_PRESENT_ZEB AS EST_PRESENT_ZEB,
ft2.EST_PRESENT_ART AS EST_PRESENT_ART,
ft2.EST_PRESENT_GP AS EST_PRESENT_GP,
ft2.EST_PRESENT_OCM AS EST_PRESENT_OCM,
ft2.EST_ACTIF_OM AS EST_ACTIF_OM,
ft2.EST_CLIENT_VIP AS EST_CLIENT_VIP,
ft2.REV_OM_M_3 AS REV_OM_M_3,
ft2.REV_OM_M_2 AS REV_OM_M_2,
ft2.REV_OM_M_1 AS REV_OM_M_1,
ft2.EST_ACTIF_DATA AS EST_ACTIF_DATA,
ft2.TRAFFIC_DATA_M_3 AS TRAFFIC_DATA_M_3,
ft2.TRAFFIC_DATA_M_2 AS TRAFFIC_DATA_M_2,
ft2.TRAFFIC_DATA_M_1 AS TRAFFIC_DATA_M_1,
ft2.CONFORM_OCM_P_MORALE_M2M AS CONFORM_OCM_P_MORALE_M2M,
ft2.CONFORM_ART_P_MORALE_M2M AS CONFORM_ART_P_MORALE_M2M,
ft2.CONFORM_OCM_P_MORALE_FLOTTE AS CONFORM_OCM_P_MORALE_FLOTTE,
ft2.CONFORM_ART_P_MORALE_FLOTTE AS CONFORM_ART_P_MORALE_FLOTTE,
ft2.CONFORM_OCM_P_PHY_MAJEUR AS CONFORM_OCM_P_PHY_MAJEUR,
ft2.CONFORM_ART_P_PHY_MAJEUR AS CONFORM_ART_P_PHY_MAJEUR,
ft2.CONFORM_OCM_P_PHY_MINEUR AS CONFORM_OCM_P_PHY_MINEUR,
ft2.CONFORM_ART_P_PHY_MINEUR AS CONFORM_ART_P_PHY_MINEUR,
ft2.EST_SUSPENDU AS EST_SUSPENDU,
ft2.NOM_STRUCTURE_ABSENT AS NOM_STRUCTURE_ABSENT,
ft2.NUMERO_REGISTRE_ABSENT AS NUMERO_REGISTRE_ABSENT,
ft2.NUMERO_REGISTRE_DOUTEUX AS NUMERO_REGISTRE_DOUTEUX,
ft2.CONFORME_ART AS CONFORME_ART,
ft2.CONFORME_OCM AS CONFORME_OCM,
ft2.IMEI_ABSENT AS IMEI_ABSENT,
ft2.EST_PREMIUM AS EST_PREMIUM,
ft2.ADRESSE_TUTEUR AS ADRESSE_TUTEUR,
ft2.TYPE_PIECE_TUTEUR AS TYPE_PIECE_TUTEUR,
ft2.ACCEPTATION_CGV AS ACCEPTATION_CGV,
ft2.CONTRAT_SOUCRIPTION AS CONTRAT_SOUCRIPTION,
ft2.DISPONIBILITE_SCAN AS DISPONIBILITE_SCAN,
ft2.PLAN_LOCALISATION AS PLAN_LOCALISATION,
ft2.IDENTIFICATEUR AS IDENTIFICATEUR,
ft2.PROFESSION_IDENTIFICATEUR AS PROFESSION_IDENTIFICATEUR,
ft2.DATE_VALIDATION_BO AS DATE_VALIDATION_BO,
ft2.STATUT_VALIDATION_BO AS STATUT_VALIDATION_BO,
lower(ft2.MOTIF_REJET_BO) AS MOTIF_REJET_BO,
ft2.STATUT_VALIDATION_BOO AS STATUT_VALIDATION_BOO,
ft2.DISPONIBILITE_SCAN_SID AS DISPONIBILITE_SCAN_SID,
ft2.EST_CONFORME_MAJ_KYC AS EST_CONFORME_MAJ_KYC,
ft2.EST_CONFORME_MIN_KYC AS EST_CONFORME_MIN_KYC,
ft2.EST_SNAPPE AS EST_SNAPPE,
ft2.INSERT_DATE AS INSERT_DATE,
ft2.EVENT_DATE AS EVENT_DATE
from (
 select ft.*,
 row_number() over(partition by ft.msisdn order by ft.date_activation  DESC NULLS LAST) as RANG
 from (
 SELECT
        A.MSISDN    MSISDN,
        A.TYPE_PIECE    TYPE_PIECE,
        A.NUMERO_PIECE    NUMERO_PIECE,
        A.NOM_PRENOM   NOM_PRENOM,
        A.NOM   NOM,
        A.PRENOM    PRENOM,
        A.DATE_NAISSANCE    DATE_NAISSANCE,
        A.DATE_EXPIRATION    DATE_EXPIRATION,
        A.ADRESSE    ADRESSE,
        A.NUMERO_PIECE_TUTEUR    NUMERO_PIECE_TUTEUR,
        A.NOM_PARENT    NOM_PARENT,
        A.DATE_NAISSANCE_TUTEUR    DATE_NAISSANCE_TUTEUR,
        A.NOM_STRUCTURE    NOM_STRUCTURE,
        A.NUMERO_REGISTRE_COMMERCE    NUMERO_REGISTRE_COMMERCE,
        A.NUMERO_PIECE_REP_LEGAL    NUMERO_PIECE_REP_LEGAL,
        A.DATE_ACTIVATION    DATE_ACTIVATION,
        A.DATE_CHANGEMENT_STATUT    DATE_CHANGEMENT_STATUT,
        A.STATUT_BSCS    STATUT_BSCS,
        A.ODBINCOMINGCALLS    ODBINCOMINGCALLS,
        A.ODBOUTGOINGCALLS    ODBOUTGOINGCALLS,
        A.IMEI    IMEI,
        A.STATUT_DEROGATION    STATUT_DEROGATION,
        A.REGION_ADMINISTRATIVE    REGION_ADMINISTRATIVE,
        A.REGION_COMMERCIALE    REGION_COMMERCIALE,
        A.SITE_NAME    SITE_NAME,
        A.VILLE    VILLE,
        A.LONGITUDE    LONGITUDE,
        A.LATITUDE    LATITUDE,
        A.OFFRE_COMMERCIALE    OFFRE_COMMERCIALE,
        A.TYPE_CONTRAT    TYPE_CONTRAT,
        A.SEGMENTATION    SEGMENTATION,
        A.REV_M_3    REV_M_3,
        A.REV_M_2    REV_M_2,
        A.REV_M_1    REV_M_1,
        A.REV_MOY    REV_MOY,
        A.STATUT_IN    STATUT_IN,
        A.NUMERO_PIECE_ABSENT    NUMERO_PIECE_ABSENT,
        A.NUMERO_PIECE_TUT_ABSENT    NUMERO_PIECE_TUT_ABSENT,
        A.NUMERO_PIECE_INF_4    NUMERO_PIECE_INF_4,
        A.NUMERO_PIECE_TUT_INF_4    NUMERO_PIECE_TUT_INF_4,
        A.NUMERO_PIECE_NON_AUTHORISE    NUMERO_PIECE_NON_AUTHORISE,
        A.NUMERO_PIECE_TUT_NON_AUTH    NUMERO_PIECE_TUT_NON_AUTH,
        A.NUMERO_PIECE_EGALE_MSISDN    NUMERO_PIECE_EGALE_MSISDN,
        A.NUMERO_PIECE_TUT_EGALE_MSISDN    NUMERO_PIECE_TUT_EGALE_MSISDN,
        A.NUMERO_PIECE_A_CARACT_NON_AUTH    NUMERO_PIECE_A_CARACT_NON_AUTH,
        A.NUMERO_PIECE_TUT_CARAC_NON_A    NUMERO_PIECE_TUT_CARAC_NON_A,
        A.NUMERO_PIECE_UNIQUEMENT_LETTRE    NUMERO_PIECE_UNIQUEMENT_LETTRE,
        A.NUMERO_PIECE_TUT_UNIQ_LETTRE    NUMERO_PIECE_TUT_UNIQ_LETTRE,
        A.NOM_PRENOM_ABSENT    NOM_PRENOM_ABSENT,
        A.NOM_PARENT_ABSENT    NOM_PARENT_ABSENT,
        A.NOM_PRENOM_DOUTEUX    NOM_PRENOM_DOUTEUX,
        A.NOM_PARENT_DOUTEUX    NOM_PARENT_DOUTEUX,
        A.DATE_NAISSANCE_ABSENT    DATE_NAISSANCE_ABSENT,
        A.DATE_NAISSANCE_TUT_ABSENT    DATE_NAISSANCE_TUT_ABSENT,
        A.DATE_EXPIRATION_ABSENT    DATE_EXPIRATION_ABSENT,
        A.ADRESSE_ABSENT    ADRESSE_ABSENT,
        A.ADRESSE_DOUTEUSE    ADRESSE_DOUTEUSE,
        A.TYPE_PERSONNE_INCONNU    TYPE_PERSONNE_INCONNU,
        A.MINEUR_MAL_IDENTIFIE    MINEUR_MAL_IDENTIFIE,
        A.TYPE_PERSONNE    TYPE_PERSONNE,
        A.DATE_ACQUISITION    DATE_ACQUISITION,
        A.DATE_NAISSANCE_DOUTEUX    DATE_NAISSANCE_DOUTEUX,
        A.DATE_NAISSANCE_TUT_DOUTEUX    DATE_NAISSANCE_TUT_DOUTEUX,
        A.DATE_EXPIRATION_DOUTEUSE    DATE_EXPIRATION_DOUTEUSE,
        A.CNI_EXPIRE    CNI_EXPIRE,
        A.MULTI_SIM    MULTI_SIM,
        A.EST_PRESENT_OM    EST_PRESENT_OM,
        A.EST_PRESENT_ZEB    EST_PRESENT_ZEB,
        A.EST_PRESENT_ART    EST_PRESENT_ART,
        A.EST_PRESENT_GP    EST_PRESENT_GP,
        A.EST_PRESENT_OCM    EST_PRESENT_OCM,
        A.EST_ACTIF_OM    EST_ACTIF_OM,
        A.EST_CLIENT_VIP    EST_CLIENT_VIP,
        A.REV_OM_M_3    REV_OM_M_3,
        A.REV_OM_M_2    REV_OM_M_2,
        A.REV_OM_M_1    REV_OM_M_1,
        A.EST_ACTIF_DATA    EST_ACTIF_DATA,
        A.TRAFFIC_DATA_M_3    TRAFFIC_DATA_M_3,
        A.TRAFFIC_DATA_M_2    TRAFFIC_DATA_M_2,
        A.TRAFFIC_DATA_M_1    TRAFFIC_DATA_M_1,
        A.CONFORM_OCM_P_MORALE_M2M    CONFORM_OCM_P_MORALE_M2M,
        A.CONFORM_ART_P_MORALE_M2M    CONFORM_ART_P_MORALE_M2M,
        A.CONFORM_OCM_P_MORALE_FLOTTE    CONFORM_OCM_P_MORALE_FLOTTE,
        A.CONFORM_ART_P_MORALE_FLOTTE    CONFORM_ART_P_MORALE_FLOTTE,
        A.CONFORM_OCM_P_PHY_MAJEUR    CONFORM_OCM_P_PHY_MAJEUR,
        A.CONFORM_ART_P_PHY_MAJEUR    CONFORM_ART_P_PHY_MAJEUR,
        A.CONFORM_OCM_P_PHY_MINEUR    CONFORM_OCM_P_PHY_MINEUR,
        A.CONFORM_ART_P_PHY_MINEUR    CONFORM_ART_P_PHY_MINEUR,
        A.EST_SUSPENDU    EST_SUSPENDU,
        A.NOM_STRUCTURE_ABSENT    NOM_STRUCTURE_ABSENT,
        A.NUMERO_REGISTRE_ABSENT    NUMERO_REGISTRE_ABSENT,
        A.NUMERO_REGISTRE_DOUTEUX    NUMERO_REGISTRE_DOUTEUX,
        case when trim(A.TYPE_PERSONNE) is null
                OR trim(A.TYPE_PERSONNE)= ''
                OR trim(A.TYPE_PERSONNE) in ('PP','MAJEUR') then trim(A.CONFORM_ART_P_PHY_MAJEUR)
             when trim(A.TYPE_PERSONNE) =  'MINEUR'  then trim(A.CONFORM_ART_P_PHY_MINEUR)
             when trim(A.TYPE_PERSONNE) = 'PERSONNE_MORALE' then trim(A.CONFORM_ART_P_MORALE_FLOTTE)
             when trim(A.TYPE_PERSONNE) = 'MACHINE_2_MACHINE' then trim(A.CONFORM_ART_P_MORALE_M2M)
        END AS CONFORME_ART,
        case when trim(A.TYPE_PERSONNE) is null
                        OR trim(A.TYPE_PERSONNE)= ''
                        OR trim(A.TYPE_PERSONNE) in ('PP','MAJEUR') then trim(A.CONFORM_OCM_P_PHY_MAJEUR)
             when trim(A.TYPE_PERSONNE) =  'MINEUR'  then trim(A.CONFORM_OCM_P_PHY_MINEUR)
             when trim(A.TYPE_PERSONNE) = 'PERSONNE_MORALE' then trim(A.CONFORM_OCM_P_MORALE_FLOTTE)
             when trim(A.TYPE_PERSONNE) = 'MACHINE_2_MACHINE' then trim(A.CONFORM_OCM_P_MORALE_M2M)
        END AS CONFORME_OCM,
        A.IMEI_ABSENT    IMEI_ABSENT,
        A.EST_PREMIUM    EST_PREMIUM,
        A.ADRESSE_TUTEUR    ADRESSE_TUTEUR,
        A.TYPE_PIECE_TUTEUR     TYPE_PIECE_TUTEUR,
        A.ACCEPTATION_CGV   ACCEPTATION_CGV,
        A.CONTRAT_SOUCRIPTION   CONTRAT_SOUCRIPTION,
        A.DISPONIBILITE_SCAN    DISPONIBILITE_SCAN,
        A.PLAN_LOCALISATION     PLAN_LOCALISATION,
        B.IDENTIFICATEUR IDENTIFICATEUR,
        B.PROFESSION_IDENTIFICATEUR PROFESSION_IDENTIFICATEUR,
        A.DATE_VALIDATION_BO    DATE_VALIDATION_BO    ,
        A.STATUT_VALIDATION_BO     STATUT_VALIDATION_BO  ,
        A.MOTIF_REJET_BO  MOTIF_REJET_BO ,
    (Case when A.STATUT_VALIDATION_BO='1'   then 'VERIFIE ET VALIDE'
          when A.STATUT_VALIDATION_BO='2'   then   'VERIFIE ET REJETE NIVEAU 1'
          when A.STATUT_VALIDATION_BO='3'    then 'VERIFIE ET CORRIGE'
          when A.STATUT_VALIDATION_BO= '-1'  then 'VERIFIE ET NON CONFORME NIVEAU 1'
          when A.STATUT_VALIDATION_BO= '-2'  then 'VERIFIE ET NON CONFORME NIVEAU 2'
          when A.STATUT_VALIDATION_BO= '-3'  then 'VERIFIE ET NON CONFORME NIVEAU 3'
          when A.STATUT_VALIDATION_BO= '-4'  then 'PRET POUR LA SUSPENSION'
          when A.STATUT_VALIDATION_BO= '-5'  then 'SUSPENDU APPEL SORTANT BO'
          when A.STATUT_VALIDATION_BO= '-6'  then 'SUSPENDU HORS BO'
          when A.STATUT_VALIDATION_BO= '-7'  then 'MODIFIER AVANT LA SUSPENSION'
          when A.STATUT_VALIDATION_BO= '-8'  then  'ANNULE'
          when A.STATUT_VALIDATION_BO= '-9'  then  'DESACTIVE DANS BSCS'
          when (A.STATUT_VALIDATION_BO is null or A.STATUT_VALIDATION_BO = '' or
                  A.STATUT_VALIDATION_BO = '10'
                  ) and A.date_validation_bo is not null then 'STATUT INCONNU'
          else 'NON VERIFIE'
    end) STATUT_VALIDATION_BOO,
    'N/A' AS DISPONIBILITE_SCAN_SID,
    A.EST_CONFORME_MAJ_KYC AS EST_CONFORME_MAJ_KYC,
    A.EST_CONFORME_MIN_KYC As EST_CONFORME_MIN_KYC,
    case when trim(B.msisdn) is null or trim(B.msisdn) = '' then 'INEXISTANT'
         else trim(B.EST_SNAPPE)
    end AS EST_SNAPPE,
    current_timestamp() AS insert_date,
    A.EVENT_DATE  AS   EVENT_DATE
    FROM
    (
        SELECT
            A.*,
            (CASE
                WHEN trim(A.TYPE_PERSONNE) = 'MACHINE_2_MACHINE' THEN
                    (
                        CASE WHEN (
                                A.NOM_STRUCTURE IS NOT NULL AND trim(A.NOM_STRUCTURE) <> '' AND
                                (A.NUMERO_REGISTRE_COMMERCE IS NOT NULL AND trim(A.NUMERO_REGISTRE_COMMERCE) <> ''
                                 AND UPPER(trim(A.NUMERO_REGISTRE_COMMERCE)) <> 'NON RENSEIGNE')
                            ) THEN 'OUI' ELSE 'NON'
                    END)
                ELSE NULL
            END) CONFORM_OCM_P_MORALE_M2M,
            (CASE
                WHEN trim(A.TYPE_PERSONNE) = 'MACHINE_2_MACHINE' THEN
                    (
                        CASE WHEN (
                                A.NOM_STRUCTURE IS NOT NULL AND trim(A.NOM_STRUCTURE) <> '' AND
                                (A.NUMERO_REGISTRE_COMMERCE IS NOT NULL AND trim(A.NUMERO_REGISTRE_COMMERCE) <> '' AND
                                UPPER(trim(A.NUMERO_REGISTRE_COMMERCE)) <> 'NON RENSEIGNE')
                            ) THEN 'OUI' ELSE 'NON'
                    END)
                ELSE NULL
            END) CONFORM_ART_P_MORALE_M2M,
            (CASE
                WHEN trim(A.TYPE_PERSONNE) = 'PERSONNE_MORALE' THEN
                    (
                        CASE WHEN (
                                    A.NOM_STRUCTURE IS NOT NULL AND trim(A.NOM_STRUCTURE) <> '' AND
                                    (A.NUMERO_REGISTRE_COMMERCE IS NOT NULL AND trim(A.NUMERO_REGISTRE_COMMERCE) <> '' AND
                                     UPPER(trim(A.NUMERO_REGISTRE_COMMERCE)) <> 'NON RENSEIGNE') AND
                                    A.NUMERO_PIECE_REP_LEGAL IS NOT NULL AND trim(A.NUMERO_PIECE_REP_LEGAL) <> '' AND
                                    trim(A.NOM_PRENOM_ABSENT) = 'NON' AND A.NOM_PRENOM_DOUTEUX = 'NON' AND
                                    A.IMEI IS NOT NULL AND trim(A.IMEI) <> '' AND
                                    trim(A.NUMERO_PIECE_ABSENT) = 'NON' AND A.NUMERO_PIECE_INF_4 = 'NON' AND A.NUMERO_PIECE_NON_AUTHORISE =
                                    'NON'
                                    AND A.NUMERO_PIECE_EGALE_MSISDN = 'NON' AND A.NUMERO_PIECE_A_CARACT_NON_AUTH = 'NON' AND A.NUMERO_PIECE_UNIQUEMENT_LETTRE = 'NON'
                            ) THEN 'OUI' ELSE 'NON'
                    END)
                ELSE NULL
            END) CONFORM_OCM_P_MORALE_FLOTTE,
            (CASE
                WHEN trim(A.TYPE_PERSONNE) = 'PERSONNE_MORALE' THEN
                    (
                        CASE WHEN (
                                    A.NOM_STRUCTURE IS NOT NULL AND trim(A.NOM_STRUCTURE) <> '' AND
                                    (A.NUMERO_REGISTRE_COMMERCE IS NOT NULL AND trim(A.NUMERO_REGISTRE_COMMERCE) <> '' AND
                                     UPPER(trim(A.NUMERO_REGISTRE_COMMERCE)) <> 'NON RENSEIGNE') AND
                                    A.NUMERO_PIECE_REP_LEGAL IS NOT NULL AND
                                    NOM_PRENOM_ABSENT = 'NON' AND A.NOM_PRENOM_DOUTEUX = 'NON' AND
                                    A.IMEI IS NOT NULL AND trim(A.IMEI) <> '' AND
                                    A.NUMERO_PIECE_ABSENT = 'NON' AND A.NUMERO_PIECE_INF_4 = 'NON' AND A.NUMERO_PIECE_NON_AUTHORISE = 'NON'
                                    AND A.NUMERO_PIECE_EGALE_MSISDN = 'NON' AND A.NUMERO_PIECE_A_CARACT_NON_AUTH = 'NON' AND A.NUMERO_PIECE_UNIQUEMENT_LETTRE = 'NON'
                            ) THEN 'OUI' ELSE 'NON'
                    END)
                ELSE NULL
            END) CONFORM_ART_P_MORALE_FLOTTE,
            (CASE
                WHEN trim(A.TYPE_PERSONNE) = 'MAJEUR' OR A.TYPE_PERSONNE IS NULL OR trim(A.TYPE_PERSONNE) = '' OR
                A.TYPE_PERSONNE = 'PP' THEN
                    (
                        CASE WHEN (
                                A.DATE_ACTIVATION IS NOT NULL  AND
                                A.NOM_PRENOM_ABSENT = 'NON' AND A.NOM_PRENOM_DOUTEUX = 'NON' AND
                                A.NUMERO_PIECE_ABSENT = 'NON' AND A.NUMERO_PIECE_INF_4 = 'NON' AND A.NUMERO_PIECE_NON_AUTHORISE = 'NON'
                                AND A.NUMERO_PIECE_EGALE_MSISDN = 'NON' AND A.NUMERO_PIECE_A_CARACT_NON_AUTH = 'NON' AND A.NUMERO_PIECE_UNIQUEMENT_LETTRE = 'NON' AND
                                A.DATE_EXPIRATION_DOUTEUSE = 'NON' AND
                                A.TYPE_PIECE IS NOT NULL AND trim(A.TYPE_PIECE) <> '' AND
                                A.DATE_NAISSANCE_ABSENT = 'NON' AND A.DATE_NAISSANCE_DOUTEUX = 'NON' AND
                                A.CNI_EXPIRE = 'NON' AND
                                A.MULTI_SIM = 'NON' AND
                                A.ADRESSE IS NOT NULL AND trim(A.ADRESSE) <> '' AND
                                A.IMEI IS NOT NULL AND trim(A.IMEI) <> ''
                            ) THEN 'OUI' ELSE 'NON'
                    END)
                ELSE NULL
            END) CONFORM_OCM_P_PHY_MAJEUR,
            (CASE
                WHEN A.TYPE_PERSONNE = 'MAJEUR' OR A.TYPE_PERSONNE IS NULL OR trim(A.TYPE_PERSONNE) = '' OR A.TYPE_PERSONNE = 'PP' THEN
                    (
                        CASE WHEN (
                                A.DATE_ACTIVATION IS NOT NULL  AND
                                A.NOM_PRENOM_ABSENT = 'NON' AND A.NOM_PRENOM_DOUTEUX = 'NON' AND
                                A.NUMERO_PIECE_ABSENT = 'NON' AND A.NUMERO_PIECE_INF_4 = 'NON' AND A.NUMERO_PIECE_NON_AUTHORISE = 'NON'
                                AND A.NUMERO_PIECE_EGALE_MSISDN = 'NON' AND A.NUMERO_PIECE_A_CARACT_NON_AUTH = 'NON' AND A.NUMERO_PIECE_UNIQUEMENT_LETTRE = 'NON' AND
                                A.DATE_EXPIRATION_DOUTEUSE = 'NON' AND
                                A.TYPE_PIECE IS NOT NULL AND trim(A.TYPE_PIECE) <> '' AND
                                A.DATE_NAISSANCE_ABSENT = 'NON' AND A.DATE_NAISSANCE_DOUTEUX = 'NON' AND
                                A.CNI_EXPIRE = 'NON' AND
                                A.MULTI_SIM = 'NON' AND
                                A.ADRESSE IS NOT NULL AND trim(A.ADRESSE) <> ''  AND
                                A.IMEI IS NOT NULL AND trim(A.IMEI) <> ''
                            ) THEN 'OUI' ELSE 'NON'
                    END)
                ELSE NULL
            END) CONFORM_ART_P_PHY_MAJEUR,
            (CASE
                WHEN A.TYPE_PERSONNE = 'MINEUR' THEN
                    (
                        CASE WHEN (
                                A.DATE_ACTIVATION IS NOT NULL  AND
                                A.NOM_PRENOM_ABSENT = 'NON' AND A.NOM_PRENOM_DOUTEUX = 'NON' AND
                                A.NUMERO_PIECE_ABSENT = 'NON' AND A.NUMERO_PIECE_INF_4 = 'NON' AND A.NUMERO_PIECE_NON_AUTHORISE = 'NON'
                                AND A.NUMERO_PIECE_EGALE_MSISDN = 'NON' AND A.NUMERO_PIECE_A_CARACT_NON_AUTH = 'NON' AND A.NUMERO_PIECE_UNIQUEMENT_LETTRE = 'NON' AND
                                A.DATE_EXPIRATION_DOUTEUSE = 'NON' AND
                                A.TYPE_PIECE IS NOT NULL AND trim(A.TYPE_PIECE) <> '' AND
                                A.DATE_NAISSANCE_ABSENT = 'NON' AND A.DATE_NAISSANCE_DOUTEUX = 'NON' AND
                                A.NOM_PARENT_ABSENT = 'NON' AND A.NOM_PARENT_DOUTEUX = 'NON' AND
                                A.NUMERO_PIECE_TUT_ABSENT = 'NON' AND A.NUMERO_PIECE_TUT_INF_4 = 'NON' AND
                                A.NUMERO_PIECE_TUT_NON_AUTH = 'NON' AND A.NUMERO_PIECE_TUT_EGALE_MSISDN = 'NON' AND
                                A.NUMERO_PIECE_TUT_CARAC_NON_A = 'NON' AND A.NUMERO_PIECE_TUT_UNIQ_LETTRE = 'NON' AND
                                A.DATE_NAISSANCE_TUTEUR IS NOT NULL  AND
                                A.CNI_EXPIRE = 'NON' AND
                                A.MULTI_SIM = 'NON' AND
                                A.ADRESSE IS NOT NULL AND trim(A.ADRESSE) <> '' AND
                                A.IMEI IS NOT NULL  AND trim(A.IMEI) <> ''
                            ) THEN 'OUI' ELSE 'NON'
                    END)
                ELSE NULL
            END) CONFORM_OCM_P_PHY_MINEUR,
            (CASE
                WHEN A.TYPE_PERSONNE = 'MINEUR' THEN
                    (
                        CASE WHEN (
                                A.DATE_ACTIVATION IS NOT NULL  AND
                                A.NOM_PRENOM_ABSENT = 'NON' AND A.NOM_PRENOM_DOUTEUX = 'NON' AND
                                A.NUMERO_PIECE_ABSENT = 'NON' AND A.NUMERO_PIECE_INF_4 = 'NON' AND A.NUMERO_PIECE_NON_AUTHORISE = 'NON'
                                AND A.NUMERO_PIECE_EGALE_MSISDN = 'NON' AND A.NUMERO_PIECE_A_CARACT_NON_AUTH = 'NON' AND A.NUMERO_PIECE_UNIQUEMENT_LETTRE = 'NON' AND
                                A.DATE_EXPIRATION_DOUTEUSE = 'NON' AND
                                A.TYPE_PIECE IS NOT NULL AND trim(A.TYPE_PIECE) <> '' AND
                                A.DATE_NAISSANCE_ABSENT = 'NON' AND A.DATE_NAISSANCE_DOUTEUX = 'NON' AND
                                A.NOM_PARENT_ABSENT = 'NON' AND A.NOM_PARENT_DOUTEUX = 'NON' AND
                                A.NUMERO_PIECE_TUT_ABSENT = 'NON' AND A.NUMERO_PIECE_TUT_INF_4 = 'NON' AND A.NUMERO_PIECE_TUT_NON_AUTH = 'NON'
                                AND A.NUMERO_PIECE_TUT_EGALE_MSISDN = 'NON' AND A.NUMERO_PIECE_TUT_CARAC_NON_A = 'NON' AND A.NUMERO_PIECE_TUT_UNIQ_LETTRE = 'NON' AND
                                A.DATE_NAISSANCE_TUTEUR IS NOT NULL AND
                                A.CNI_EXPIRE = 'NON' AND
                                A.MULTI_SIM = 'NON' AND
                                A.ADRESSE IS NOT NULL AND trim(A.ADRESSE) <> '' AND
                                A.IMEI IS NOT NULL AND trim(A.IMEI) <> ''
                            ) THEN 'OUI' ELSE 'NON'
                    END)
                ELSE NULL
            END) CONFORM_ART_P_PHY_MINEUR,
            (CASE WHEN A.ODBOUTGOINGCALLS = '1' AND A.ODBINCOMINGCALLS = '1' THEN 'OUI' ELSE (CASE WHEN A.ODBOUTGOINGCALLS = '1' THEN'OUI' ELSE 'NON' END ) END) EST_SUSPENDU,
            (CASE WHEN A.NOM_STRUCTURE IS NULL OR trim(A.NOM_STRUCTURE) = '' THEN 'OUI' ELSE 'NON' END) NOM_STRUCTURE_ABSENT,
            (CASE WHEN A.NUMERO_REGISTRE_COMMERCE IS NULL OR trim(A.NUMERO_REGISTRE_COMMERCE) = '' THEN 'OUI' ELSE 'NON'
            END) NUMERO_REGISTRE_ABSENT,
            (CASE WHEN UPPER(trim(A.NUMERO_REGISTRE_COMMERCE)) = 'NON RENSEIGNE' THEN 'OUI' ELSE 'NON' END) NUMERO_REGISTRE_DOUTEUX,
            (CASE WHEN A.IMEI IS NULL OR trim(A.IMEI) = '' THEN 'OUI' ELSE 'NON' END) IMEI_ABSENT,
            (case when A.DATE_ACTIVATION IS NULL
                OR A.NOM_PRENOM_ABSENT = 'OUI'
                OR A.NOM_PRENOM_DOUTEUX = 'OUI'
                OR A.NUMERO_PIECE_ABSENT = 'OUI'
                OR A.NUMERO_PIECE_INF_4 = 'OUI'
                OR A.NUMERO_PIECE_NON_AUTHORISE = 'OUI'
                OR A.NUMERO_PIECE_EGALE_MSISDN = 'OUI'
                OR A.NUMERO_PIECE_A_CARACT_NON_AUTH = 'OUI'
                OR A.NUMERO_PIECE_UNIQUEMENT_LETTRE = 'OUI'
                OR A.DATE_EXPIRATION_DOUTEUSE = 'OUI'
                OR A.DATE_EXPIRATION_ABSENT = 'OUI'
                OR A.DATE_NAISSANCE_ABSENT = 'OUI'
                OR A.DATE_NAISSANCE_DOUTEUX = 'OUI'
                OR A.MULTI_SIM = 'OUI'
                OR A.ADRESSE_ABSENT = 'OUI'
                OR A.ADRESSE_DOUTEUSE = 'OUI'
                OR A.IMEI is null OR trim(A.IMEI) = ''
                OR A.TYPE_PIECE IS NULL OR trim(A.TYPE_PIECE) = ''
                OR A.MSISDN IS NULL OR trim(A.MSISDN) = ''
                then 'NON' else 'OUI'
             end ) AS EST_CONFORME_MAJ_KYC,
             (case when A.DATE_ACTIVATION IS NULL
                 OR A.NOM_PRENOM_ABSENT = 'OUI'
                 OR A.NOM_PRENOM_DOUTEUX = 'OUI'
                 OR A.NUMERO_PIECE_ABSENT = 'OUI'
                 OR A.NUMERO_PIECE_INF_4 = 'OUI'
                 OR A.NUMERO_PIECE_NON_AUTHORISE = 'OUI'
                 OR A.NUMERO_PIECE_EGALE_MSISDN = 'OUI'
                 OR A.NUMERO_PIECE_A_CARACT_NON_AUTH = 'OUI'
                 OR A.NUMERO_PIECE_UNIQUEMENT_LETTRE = 'OUI'
                 OR A.DATE_EXPIRATION_DOUTEUSE = 'OUI'
                 OR A.DATE_EXPIRATION_ABSENT = 'OUI'
                 OR A.TYPE_PIECE IS NULL OR trim(A.TYPE_PIECE) = ''
                 OR A.DATE_NAISSANCE_ABSENT = 'OUI'
                 OR A.DATE_NAISSANCE_DOUTEUX = 'OUI'
                 OR A.NOM_PARENT_ABSENT = 'OUI'
                 OR A.NOM_PARENT_DOUTEUX = 'OUI'
                 OR A.NUMERO_PIECE_TUT_ABSENT = 'OUI'
                 OR A.NUMERO_PIECE_TUT_INF_4 = 'OUI'
                 OR A.NUMERO_PIECE_TUT_NON_AUTH = 'OUI'
                 OR A.NUMERO_PIECE_TUT_EGALE_MSISDN = 'OUI'
                 OR A.NUMERO_PIECE_TUT_CARAC_NON_A = 'OUI'
                 OR A.NUMERO_PIECE_TUT_UNIQ_LETTRE = 'OUI'
                 OR A.DATE_NAISSANCE_TUT_ABSENT = 'OUI'
                 OR A.DATE_NAISSANCE_TUT_DOUTEUX ='OUI'
                 OR A.MULTI_SIM = 'OUI'
                 OR A.ADRESSE_ABSENT = 'OUI'
                 OR A.ADRESSE_DOUTEUSE = 'OUI'
                 OR A.IMEI is null OR trim(A.IMEI) = ''
                 OR A.MSISDN IS NULL OR trim(A.MSISDN) = '' then 'NON' else 'OUI'
              END) AS EST_CONFORME_MIN_KYC
        FROM TMP.TT_FT_BDI_II A
    ) A
    LEFT JOIN (SELECT MSISDN, IDENTIFICATEUR, PROFESSION_IDENTIFICATEUR,EST_SNAPPE FROM
    DIM.SPARK_DT_BASE_IDENTIFICATION) B
    ON trim(A.MSISDN) = trim(B.MSISDN)
) ft
) ft2 where RANG = 1;

insert into TMP.TT_MULTISIMS
select A1.NUMERO_PIECE, A1.NOM_PRENOM, A1.MSISDN, A1.TYPE_PERSONNE from
(select *
from MON.SPARK_FT_BDI
WHERE EVENT_DATE = to_date('2020-05-10')
and not(NUMERO_PIECE is  null or trim(NUMERO_PIECE) = '')
and est_suspendu = 'NON'
and TYPE_PERSONNE IN ('MAJEUR','PP', 'MINEUR')
and statut_derogation = 'NON') A1
JOIN
(SELECT NUMERO_PIECE, count(*)
from MON.SPARK_FT_BDI
WHERE EVENT_DATE = to_date('2020-05-10')
and not(NUMERO_PIECE is  null or trim(NUMERO_PIECE) = '')
and est_suspendu = 'NON'
and TYPE_PERSONNE IN ('MAJEUR','PP', 'MINEUR')
and statut_derogation = 'NON'
GROUP BY NUMERO_PIECE
HAVING COUNT(*) > 3) A2
ON trim(A1.NUMERO_PIECE) = trim(A2.NUMERO_PIECE)
ORDER BY A1.numero_piece;

insert into TMP.TT_SCANS_FANTAISISTES
select msisdn, type_personne
from MON.SPARK_FT_BDI
where event_date = to_date('2020-05-10')
and MOTIF_REJET_BO in ('scan pas une piece didentit¿',
'scans multiples',
'scan multiples',
'aucun scan associ¿',
'scan absent',
'scan indisponible et noms absents',
'scan pas une pi¿ce',
'scans multiples',
'scan incomplet',
'scan pas une piece d`identit¿',
'sans nom et sans scan',
'scan pas une piece didentit¿¿',
'scan incomplet ',
'plusieurs scans associes',
'scan flou/illisible',
'aucun scan associ¿¿',
'scan incomplet',
'aucun scan associ¿¿¿','scan absent',
'scans multiples',
'scan multiples',
'scan incomplet',
'scan absent',
'scan flou',
'scan incomplet',
'sans nom et sans scan',
'aucun scan associe',
'scan pas une piece didentit¿¿¿',
'scan fantaisiste'
);

insert into TMP.TT_MAJ
SELECT
SUM(case when not(A.msisdn is null or trim(A.msisdn) = '') AND
A.est_suspendu = 'NON' AND A.EST_CONFORME_MAJ_KYC = 'NON' AND
A.NUMERO_PIECE_ABSENT = 'OUI' then 1 else 0 end) NB_NUMERO_PIECE_ABSENT
,SUM (case when not(A.msisdn is null or trim(A.msisdn) = '') AND
A.est_suspendu = 'NON' AND A.EST_CONFORME_MAJ_KYC = 'NON' AND A.NUMERO_PIECE_NON_AUTHORISE = 'OUI' then 1 else 0 end)
NB_NUMERO_PIECE_NON_AUTHORISE
,SUM (case when not(A.msisdn is null or trim(A.msisdn) = '') AND
A.est_suspendu = 'NON' AND A.EST_CONFORME_MAJ_KYC = 'NON' AND  A.NUMERO_PIECE_UNIQUEMENT_LETTRE = 'OUI' then 1 else 0 end)
NB_NUM_PIECE_UNIQUEMENT_LETR
,SUM (case when not(A.msisdn is null or trim(A.msisdn) = '') AND
A.est_suspendu = 'NON' AND A.EST_CONFORME_MAJ_KYC = 'NON' AND  A.NUMERO_PIECE_INF_4 ='OUI' then 1 else 0 end) NB_NUMERO_PIECE_INF_4
,SUM (case when not(A.msisdn is null or trim(A.msisdn) = '') AND
A.est_suspendu = 'NON' AND A.EST_CONFORME_MAJ_KYC = 'NON' AND  A.NUMERO_PIECE_A_CARACT_NON_AUTH ='OUI' then 1 else 0 end)
NB_NUM_PIECE_A_CARACT_NON_AUTH
,SUM (case when not(A.msisdn is null or trim(A.msisdn) = '') AND
A.est_suspendu = 'NON' AND A.EST_CONFORME_MAJ_KYC = 'NON' AND  A.NUMERO_PIECE_EGALE_MSISDN ='OUI' then 1 else 0 end)
NB_NUMERO_PIECE_EGALE_MSISDN
,SUM (case when not(A.msisdn is null or trim(A.msisdn) = '') AND
A.est_suspendu = 'NON' AND A.EST_CONFORME_MAJ_KYC = 'NON' AND  A.NOM_PRENOM_ABSENT = 'OUI' then 1 else 0 end) NB_NOM_PRENOM_ABSENT
,SUM (case when not(A.msisdn is null or trim(A.msisdn) = '') AND
A.est_suspendu = 'NON' AND A.EST_CONFORME_MAJ_KYC = 'NON' AND  A.NOM_PRENOM_DOUTEUX ='OUI' then 1 else 0 end) NB_NOM_PRENOM_DOUTEUX
,SUM (case when not(A.msisdn is null or trim(A.msisdn) = '') AND
A.est_suspendu = 'NON' AND A.EST_CONFORME_MAJ_KYC = 'NON' AND  (A.DISPONIBILITE_SCAN is null or A.DISPONIBILITE_SCAN = '') then 1 else 0 end) NB_SCAN_INDISPONIBLE
,SUM (case when not(A.msisdn is null or trim(A.msisdn) = '') AND
A.est_suspendu = 'NON' AND A.EST_CONFORME_MAJ_KYC = 'NON' AND  A.DATE_EXPIRATION_ABSENT = 'OUI' then 1 else 0 end)
NB_DATE_EXPIRATION_ABSENT
,SUM (case when not(A.msisdn is null or trim(A.msisdn) = '') AND
A.est_suspendu = 'NON' AND A.EST_CONFORME_MAJ_KYC = 'NON' AND  A.DATE_EXPIRATION_DOUTEUSE = 'OUI' then 1 else 0 end)
NB_DATE_EXPIRATION_DOUTEUSE
,SUM (case when not(A.msisdn is null or trim(A.msisdn) = '') AND
A.est_suspendu = 'NON' AND A.EST_CONFORME_MAJ_KYC = 'NON' AND  A.DATE_NAISSANCE_ABSENT = 'OUI' then 1 else 0 end)
NB_DATE_NAISSANCE_ABSENT
,SUM (case when not(A.msisdn is null or trim(A.msisdn) = '') AND
A.est_suspendu = 'NON' AND A.EST_CONFORME_MAJ_KYC = 'NON' AND  A.DATE_NAISSANCE_DOUTEUX = 'OUI' then 1 else 0 end)
NB_DATE_NAISSANCE_DOUTEUSE
,SUM (case when not(A.msisdn is null or trim(A.msisdn) = '') AND
A.est_suspendu = 'NON' AND A.EST_CONFORME_MAJ_KYC = 'NON' AND  A.ADRESSE_ABSENT = 'OUI' then 1 else 0 end) ADRESSE_ABSENT
,SUM (case when not(A.msisdn is null or trim(A.msisdn) = '') AND
A.est_suspendu = 'NON' AND A.EST_CONFORME_MAJ_KYC = 'NON' AND  A.ADRESSE_DOUTEUSE = 'OUI' then 1 else 0 end) NB_ADDRESSE_DOUTEUSE
,SUM (case when not(A.msisdn is null or trim(A.msisdn) = '') AND
A.est_suspendu = 'NON' AND A.EST_CONFORME_MAJ_KYC = 'NON' AND  A.IMEI_ABSENT = 'OUI' THEN 1 ELSE 0 END) NB_IMEI_ABSENT
,SUM (case when not(A.msisdn is null or trim(A.msisdn) = '') AND
A.est_suspendu = 'NON' AND A.EST_CONFORME_MAJ_KYC = 'NON' AND  A.DATE_ACTIVATION IS NULL  THEN 1 ELSE 0 END) NB_DATE_ACTIVATION_ABSENTE
,SUM (case when not(A.msisdn is null or trim(A.msisdn) = '') AND
A.est_suspendu = 'NON' AND A.EST_CONFORME_MAJ_KYC = 'NON' AND  (A.TYPE_PIECE IS NULL OR A.TYPE_PIECE = '') THEN 1 ELSE 0 END) NB_TYPE_PIECE_IDENTITE
,SUM(case when not(B.msisdn is null or trim(B.msisdn) = '') AND A.est_suspendu = 'NON' then 1 else 0 end) NB_MULTI_SIM
,sum (case when (A.msisdn is null or trim(A.msisdn) = '') AND
A.est_suspendu = 'NON' AND A.EST_CONFORME_MAJ_KYC = 'NON' then 1 ELSE 0 END) NB_MSISDN_ABSENT
,SUM (case when not(A.msisdn is null or trim(A.msisdn) = '') AND
A.est_suspendu = 'NON' AND A.EST_CONFORME_MAJ_KYC = 'NON' AND A.DATE_ACTIVATION IS NULL THEN 1 ELSE 0 END) NB_DATE_SOUSCRIPTION_ABSENTE
,sum(case when not(A.msisdn is null or trim(A.msisdn) = '') AND
A.est_suspendu = 'NON' AND A.EST_CONFORME_MAJ_KYC = 'NON' AND A.CNI_EXPIRE = 'OUI' then 1 else 0 end) NB_CNI_EXPIRE
,sum(case when not(A.msisdn is null or trim(A.msisdn) = '') AND
A.est_suspendu = 'NON' AND A.EST_CONFORME_MAJ_KYC = 'NON' AND (A.CONTRAT_SOUCRIPTION is null OR A.CONTRAT_SOUCRIPTION = '') then 1 ELSE 0 END)
NB_CONTRAT_SOUCRIPTION_ABSENT
,SUM(case when not(C.msisdn is null or trim(C.msisdn) = '') AND A.est_suspendu = 'NON'  then 1 else 0 end) AS SCAN_FANTAISISTE
, sum ( case when not(A.msisdn is null or trim(A.msisdn) = '') AND
A.est_suspendu = 'NON' AND A.EST_CONFORME_MAJ_KYC = 'NON' AND (A.PLAN_LOCALISATION is null OR A.PLAN_LOCALISATION = '')
then 1 ELSE 0 END )
NB_PLAN_LOCALISATION_ABSENT
,sum(CASE WHEN not(A.msisdn is null or trim(A.msisdn) = '') AND
A.est_suspendu = 'NON' AND A.EST_CONFORME_MAJ_KYC = 'NON' THEN 1 ELSE 0 END) NB_LIGNES_EN_ANOMALIE
,sum(case when not(A.msisdn is null or trim(A.msisdn) = '') and A.est_suspendu = 'NON' then 1 else 0 end) AS NB_ACTIFS
,sum(case when not(A.msisdn is null or trim(A.msisdn) = '')   then 1 else 0 end) AS NB_FAMILLE
FROM (
   select *
   from MON.SPARK_FT_BDI
where type_personne IN ('MAJEUR','PP')
and event_date = to_date('2020-05-10')
) A
left join (
    select distinct msisdn
    from TMP.TT_MULTISIMS
) B ON trim(A.msisdn) = trim(B.msisdn)
left join (
    select distinct msisdn
    from TMP.TT_SCANS_FANTAISISTES
) C ON trim(A.msisdn) = trim(C.msisdn);

insert into TMP.TT_MIN
SELECT
SUM (case when not(A.msisdn is null or trim(A.msisdn) = '') AND
A.est_suspendu = 'NON' AND A.EST_CONFORME_MIN_KYC = 'NON' AND A.NUMERO_PIECE_ABSENT = 'OUI' then 1 else 0 end) NB_NUMERO_PIECE_ABSENT
,SUM (case when not(A.msisdn is null or trim(A.msisdn) = '') AND
A.est_suspendu = 'NON' AND A.EST_CONFORME_MIN_KYC = 'NON' AND A.NUMERO_PIECE_INF_4 = 'OUI' then 1 else 0 end) NB_NUMERO_PIECE_INF_4
,SUM (case when not(A.msisdn is null or trim(A.msisdn) = '') AND
                A.est_suspendu = 'NON' AND A.EST_CONFORME_MIN_KYC = 'NON' AND A.NUMERO_PIECE_NON_AUTHORISE = 'OUI' then 1 else 0 end)
NB_NUMERO_PIECE_NON_AUTHORISE
,SUM (case when not(A.msisdn is null or trim(A.msisdn) = '') AND
                A.est_suspendu = 'NON' AND A.EST_CONFORME_MIN_KYC = 'NON' AND (A.DISPONIBILITE_SCAN is null OR A.DISPONIBILITE_SCAN = '')  then 1 else 0 end) NB_SCAN_INDISPONIBLE
,SUM (case when not(A.msisdn is null or trim(A.msisdn) = '') AND
                A.est_suspendu = 'NON' AND A.EST_CONFORME_MIN_KYC = 'NON' AND A.NUMERO_PIECE_TUT_ABSENT = 'OUI' then 1 else 0 end)
NB_NUMERO_PIECE_TUT_ABSENT
,SUM (case when not(A.msisdn is null or trim(A.msisdn) = '') AND
                A.est_suspendu = 'NON' AND A.EST_CONFORME_MIN_KYC = 'NON' AND A.NUMERO_PIECE_TUT_NON_AUTH = 'OUI' then 1 else 0 end)
NB_NUMERO_PIECE_TUT_NON_AUTH
,SUM (case when not(A.msisdn is null or trim(A.msisdn) = '') AND
                A.est_suspendu = 'NON' AND A.EST_CONFORME_MIN_KYC = 'NON' AND A.NUMERO_PIECE_TUT_EGALE_MSISDN = 'OUI' then 1 else 0 end)
NB_NUM_PIECE_TUT_EGALE_MSISDN
,SUM (case when not(A.msisdn is null or trim(A.msisdn) = '') AND
                A.est_suspendu = 'NON' AND A.EST_CONFORME_MIN_KYC = 'NON' AND A.NOM_PRENOM_ABSENT = 'OUI' then 1 else 0 end) NB_NOM_PRENOM_ABSENT
,SUM (case when not(A.msisdn is null or trim(A.msisdn) = '') AND
                A.est_suspendu = 'NON' AND A.EST_CONFORME_MIN_KYC = 'NON' AND A.NOM_PRENOM_DOUTEUX = 'OUI' then 1 else 0 end) NOM_PRENOM_DOUTEUX
,SUM (case when not(A.msisdn is null or trim(A.msisdn) = '') AND
                A.est_suspendu = 'NON' AND A.EST_CONFORME_MIN_KYC = 'NON' AND A.DATE_EXPIRATION_ABSENT = 'OUI' then 1 else 0 end)
NB_DATE_EXPIRATION_ABSENT
,SUM (case when not(A.msisdn is null or trim(A.msisdn) = '') AND
                A.est_suspendu = 'NON' AND A.EST_CONFORME_MIN_KYC = 'NON' AND A.DATE_EXPIRATION_DOUTEUSE = 'OUI' then 1 else 0 end)
NB_DATE_EXPIRATION_DOUTEUSE
,SUM (case when not(A.msisdn is null or trim(A.msisdn) = '') AND
                A.est_suspendu = 'NON' AND A.EST_CONFORME_MIN_KYC = 'NON' AND A.DATE_NAISSANCE_ABSENT = 'OUI' then 1 else 0 end)
NB_DATE_NAISSANCE_ABSENT
,SUM (case when not(A.msisdn is null or trim(A.msisdn) = '') AND
                A.est_suspendu = 'NON' AND A.EST_CONFORME_MIN_KYC = 'NON' AND A.DATE_NAISSANCE_DOUTEUX = 'OUI' then 1 else 0 end)
NB_DATE_NAISSANCE_DOUTEUX
,SUM(case when not(B.msisdn is null or trim(B.msisdn) = '') AND A.est_suspendu = 'NON' then 1 else 0 end) NB_MULTI_SIM
,SUM (case when not(A.msisdn is null or trim(A.msisdn) = '') AND
                A.est_suspendu = 'NON' AND A.EST_CONFORME_MIN_KYC = 'NON' AND A.IMEI_ABSENT = 'OUI' THEN 1 ELSE 0 END) NB_IMEI_ABSENT
,SUM (case when not(A.msisdn is null or trim(A.msisdn) = '') AND
                A.est_suspendu = 'NON' AND A.EST_CONFORME_MIN_KYC = 'NON' AND A.NOM_PARENT_ABSENT ='OUI' then 1 else 0 end) NB_NOM_PARENT_ABSENT
,SUM (case when not(A.msisdn is null or trim(A.msisdn) = '') AND
                A.est_suspendu = 'NON' AND A.EST_CONFORME_MIN_KYC = 'NON' AND A.NOM_PARENT_DOUTEUX='OUI' then 1 else 0 end) NB_NOM_PARENT_DOUTEUX
,SUM (case when not(A.msisdn is null or trim(A.msisdn) = '') AND
                A.est_suspendu = 'NON' AND A.EST_CONFORME_MIN_KYC = 'NON' AND A.DATE_NAISSANCE_TUT_ABSENT='OUI' then 1 else 0 end)
NB_DATE_NAISSANCE_TUT_ABSENT
,SUM (case when not(A.msisdn is null or trim(A.msisdn) = '') AND
                A.est_suspendu = 'NON' AND A.EST_CONFORME_MIN_KYC = 'NON' AND A.DATE_NAISSANCE_TUT_DOUTEUX ='OUI' then 1 else 0 end)
NB_DATE_NAISSANCE_TUT_DOUTEUX
,SUM (case when not(A.msisdn is null or trim(A.msisdn) = '') AND
                A.est_suspendu = 'NON' AND A.EST_CONFORME_MIN_KYC = 'NON' AND A.DATE_ACTIVATION  IS NULL   THEN 1 ELSE 0 END) NB_DATE_ACTIVATION_ABSENTE
,sum(case when (A.msisdn is null or trim(A.msisdn) = '') AND
               A.est_suspendu = 'NON' AND A.EST_CONFORME_MIN_KYC = 'NON' then 1 ELSE 0 END) NB_MSISDN_ABSENT
,SUM (case when not(A.msisdn is null or trim(A.msisdn) = '') AND
                A.est_suspendu = 'NON' AND A.EST_CONFORME_MIN_KYC = 'NON' AND (A.TYPE_PIECE IS NULL OR A.TYPE_PIECE = '') THEN 1 ELSE 0 END) NB_TYPE_PIECE_IDENTITE_ABSENTE
,SUM (case when not(A.msisdn is null or trim(A.msisdn) = '') AND
                A.est_suspendu = 'NON' AND A.EST_CONFORME_MIN_KYC = 'NON' AND A.ADRESSE_ABSENT = 'OUI' then 1 else 0 end) NB_ADRESSE_ABSENT
,SUM (case when not(A.msisdn is null or trim(A.msisdn) = '') AND
                A.est_suspendu = 'NON' AND A.EST_CONFORME_MIN_KYC = 'NON' AND A.ADRESSE_DOUTEUSE = 'OUI' then 1 else 0 end)
NB_ADDRESSE_DOUTEUSE
,sum(case when not(A.msisdn is null or trim(A.msisdn) = '') AND
               A.est_suspendu = 'NON' AND A.EST_CONFORME_MIN_KYC = 'NON' AND A.CNI_EXPIRE = 'OUI' then 1 else 0 end) NB_CNI_EXPIRE
,sum(case when not(A.msisdn is null or trim(A.msisdn) = '') AND
               A.est_suspendu = 'NON' AND A.EST_CONFORME_MIN_KYC = 'NON' AND (A.CONTRAT_SOUCRIPTION is null OR A.CONTRAT_SOUCRIPTION  = '') then 1 ELSE 0 END)
NB_CONTRAT_SOUCRIPTION_ABSENT
,SUM(case when not(C.msisdn is null or trim(C.msisdn) = '') AND A.est_suspendu = 'NON'  then 1 else 0 end) AS SCAN_FANTAISISTE
,sum(case when not(A.msisdn is null or trim(A.msisdn) = '') AND
               A.est_suspendu = 'NON' AND A.EST_CONFORME_MIN_KYC = 'NON' AND (A.PLAN_LOCALISATION is null OR A.PLAN_LOCALISATION = '') then 1 ELSE 0 END) NB_PLAN_LOCALISATION_ABSENT
,sum(CASE WHEN not(A.msisdn is null or trim(A.msisdn) = '') AND
               A.est_suspendu = 'NON' AND A.EST_CONFORME_MIN_KYC = 'NON' THEN 1 ELSE 0 END) NB_LIGNE_EN_ANOMALIE
,sum(case when not(A.msisdn is null or trim(A.msisdn) = '') and A.est_suspendu = 'NON' then 1 else 0 end) AS NB_ACTIFS
,sum(case when not(A.msisdn is null or trim(A.msisdn) = '')   then 1 else 0 end) AS NB_FAMILLE
FROM (
   select *
   from MON.SPARK_FT_BDI
where type_personne = 'MINEUR'
and event_date = to_date('2020-05-10')
) A
left join (
    select distinct msisdn
    from TMP.TT_MULTISIMS
) B ON trim(A.msisdn) = trim(B.msisdn)
left join (
    select distinct msisdn
    from TMP.TT_SCANS_FANTAISISTES
) C ON trim(A.msisdn) = trim(C.msisdn);

insert into MON.SPARK_FT_A_BDI
select
'MAJEUR' AS TYPE_PERSONNE,
NB_NUMERO_PIECE_ABSENT AS NUM_PCE_ABSENT_NB,
NB_NUMERO_PIECE_INF_4 AS NUM_PCE_INF4_NB,
NB_NUMERO_PIECE_NON_AUTHORISE AS NUM_PCE_NO_AUT_NB,
NB_SCAN_INDISPONIBLE AS SCAN_PCE_ABSENT_NB,
0 AS NUM_PCE_TUT_ABSENT_NB,
0 AS NUM_PCE_TUT_NO_AUT_NB,
0 AS NUM_PCE_TUT_EG_M_NB,
NB_NOM_PRENOM_ABSENT AS NOM_PRENOM_ABSENT_NB,
NB_NOM_PRENOM_DOUTEUX AS NOM_PRENOM_DOUTEUX_NB,
NB_DATE_EXPIRATION_ABSENT AS DATE_EXPIR_ABSENT_NB,
NB_DATE_EXPIRATION_DOUTEUSE AS DATE_EXPIR_DOUTEUX_NB,
NB_DATE_NAISSANCE_ABSENT AS DATE_NAISS_ABSENT_NB,
NB_DATE_NAISSANCE_DOUTEUSE AS DATE_NAISS_DOUTEUX_NB,
NB_MULTI_SIM AS MULTISIM_NB,
NB_IMEI_ABSENT AS IMEI_ABSENT_NB,
0 AS NOM_TUT_ABSENT_NB,
0 AS NOM_TUT_DOUTEUX_NB,
0 AS DATE_NAISS_TUT_ABSENT_NB,
0 AS DATE_NAISS_TUT_DOUTEUX_NB,
NB_DATE_ACTIVATION_ABSENTE AS DATE_ACTIV_ABSENT_NB,
NB_MSISDN_ABSENT AS NUM_TEL_ABSENT_NB,
NB_TYPE_PIECE_IDENTITE AS TYPE_PCE_ID_ABSENT_NB,
ADRESSE_ABSENT AS ADRESSE_ABSENT_NB,
NB_ADDRESSE_DOUTEUSE AS ADRESSE_DOUTEUX_NB,
NB_CNI_EXPIRE AS CNI_EXPIR_NB,
NB_CONTRAT_SOUCRIPTION_ABSENT AS CONTRAT_SOUSCRI_ABSENT_NB,
SCAN_FANTAISISTE AS SCAN_FANTESISTE_NB,
NB_NUM_PIECE_UNIQUEMENT_LETR AS NUMERO_PIECE_UNIQ_EN_LETTRE_NB,
NB_NUM_PIECE_A_CARACT_NON_AUTH AS NUM_PIECE_A_CARACT_NON_AUT_NB,
NB_NUMERO_PIECE_EGALE_MSISDN AS NUMERO_PIECE_EGALE_MSISDN_NB,
NB_DATE_SOUSCRIPTION_ABSENTE AS DATE_SOUSCRIPTION_ABSENT_NB,
NB_PLAN_LOCALISATION_ABSENT AS PLAN_LOCAL_ABSENT_NB,
NB_LIGNES_EN_ANOMALIE AS LIGNE_EN_ANOMALIE_NB,
NB_ACTIFS AS ACTIF_FAMILLE_NB,
NB_FAMILLE AS TOTAL_FAMILLE_NB,
date_add(to_date('2020-05-10'), 1) AS EVENT_DATE_PLUS1
from TMP.TT_MAJ
UNION ALL
select
'MINEUR' AS TYPE_PERSONNE,
NB_NUMERO_PIECE_ABSENT AS NUM_PCE_ABSENT_NB,
NB_NUMERO_PIECE_INF_4 AS NUM_PCE_INF4_NB,
NB_NUMERO_PIECE_NON_AUTHORISE AS NUM_PCE_NO_AUT_NB,
NB_SCAN_INDISPONIBLE AS SCAN_PCE_ABSENT_NB,
NB_NUMERO_PIECE_TUT_ABSENT AS NUM_PCE_TUT_ABSENT_NB,
NB_NUMERO_PIECE_TUT_NON_AUTH AS NUM_PCE_TUT_NO_AUT_NB,
NB_NUM_PIECE_TUT_EGALE_MSISDN AS NUM_PCE_TUT_EG_M_NB,
NB_NOM_PRENOM_ABSENT AS NOM_PRENOM_ABSENT_NB,
NOM_PRENOM_DOUTEUX AS NOM_PRENOM_DOUTEUX_NB,
NB_DATE_EXPIRATION_ABSENT AS DATE_EXPIR_ABSENT_NB,
NB_DATE_NAISSANCE_DOUTEUX AS DATE_EXPIR_DOUTEUX_NB,
NB_DATE_NAISSANCE_ABSENT AS DATE_NAISS_ABSENT_NB,
NB_DATE_NAISSANCE_DOUTEUX AS DATE_NAISS_DOUTEUX_NB,
NB_MULTI_SIM AS MULTISIM_NB,
NB_IMEI_ABSENT AS IMEI_ABSENT_NB,
NB_NOM_PARENT_ABSENT AS NOM_TUT_ABSENT_NB,
NB_NOM_PARENT_DOUTEUX AS NOM_TUT_DOUTEUX_NB,
NB_DATE_NAISSANCE_TUT_ABSENT AS DATE_NAISS_TUT_ABSENT_NB,
NB_DATE_NAISSANCE_TUT_DOUTEUX AS DATE_NAISS_TUT_DOUTEUX_NB,
NB_DATE_ACTIVATION_ABSENTE AS DATE_ACTIV_ABSENT_NB,
NB_MSISDN_ABSENT AS NUM_TEL_ABSENT_NB,
NB_TYPE_PIECE_IDENTITE_ABSENTE AS TYPE_PCE_ID_ABSENT_NB,
NB_ADRESSE_ABSENT AS ADRESSE_ABSENT_NB,
NB_ADDRESSE_DOUTEUSE AS ADRESSE_DOUTEUX_NB,
NB_CNI_EXPIRE AS CNI_EXPIR_NB,
NB_CONTRAT_SOUCRIPTION_ABSENT AS CONTRAT_SOUSCRI_ABSENT_NB,
SCAN_FANTAISISTE AS SCAN_FANTESISTE_NB,
0 AS  NUMERO_PIECE_UNIQ_EN_LETTRE_NB,
0 AS NUM_PIECE_A_CARACT_NON_AUT_NB,
0 AS NUMERO_PIECE_EGALE_MSISDN_NB,
0 AS DATE_SOUSCRIPTION_ABSENT_NB,
NB_PLAN_LOCALISATION_ABSENT AS PLAN_LOCAL_ABSENT_NB,
NB_LIGNE_EN_ANOMALIE AS LIGNE_EN_ANOMALIE_NB,
NB_ACTIFS AS ACTIF_FAMILLE_NB,
NB_FAMILLE AS TOTAL_FAMILLE_NB,
date_add(to_date('2020-05-10'), 1) AS EVENT_DATE_PLUS1
from TMP.TT_MIN;

select 'FN_BDI END';