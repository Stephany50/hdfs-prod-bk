INSERT INTO TMP.TT_BDI_TMP
SELECT
nvl(A.MSISDN,B.MSISDN) AS MSISDN,
trim(A.TYPE_PERSONNE) AS TYPE_PERSONNE,
case when A.msisdn is null or B.msisdn is null then nvl(A.NOM_PRENOM,trim(nvl(B.nom,'') || ' ' || nvl(B.prenom, ''))) else trim(nvl(B.nom,'') || ' ' || nvl(B.prenom, '')) end AS NOM_PRENOM,
case when A.msisdn is null or B.msisdn is null then nvl(A.ID_TYPE_PIECE,B.ID_TYPE_PIECE) else trim(B.ID_TYPE_PIECE) end  AS ID_TYPE_PIECE,
trim(A.TYPE_PIECE) AS TYPE_PIECE,
case when A.msisdn is null or B.msisdn is null then nvl(A.NUMERO_PIECE,B.NUMERO_PIECE) else trim(B.NUMERO_PIECE) end  AS NUMERO_PIECE,
case when A.msisdn is null or B.msisdn is null then nvl(A.DATE_EXPIRATION,B.DATE_EXPIRATION) else trim(B.DATE_EXPIRATION) end  AS DATE_EXPIRATION,
case when A.msisdn is null or B.msisdn is null then nvl(A.DATE_NAISSANCE,B.DATE_NAISSANCE) else trim(B.DATE_NAISSANCE) end  AS DATE_NAISSANCE,
case when A.msisdn is null or B.msisdn is null then nvl(A.DATE_ACTIVATION,B.DATE_ACTIVATION) else trim(B.DATE_ACTIVATION) end  AS DATE_ACTIVATION,
case when A.msisdn is null or B.msisdn is null then nvl(A.ADRESSE,B.ADRESSE) else trim(B.ADRESSE) end  AS ADRESSE,
trim(A.QUARTIER) AS QUARTIER,
case when A.msisdn is null or B.msisdn is null then nvl(A.VILLE,B.VILLE) else trim(B.VILLE) end  AS VILLE,
case when A.msisdn is null or B.msisdn is null then nvl(A.STATUT,B.STATUT) else trim(B.STATUT) end  AS STATUT,
trim(A.STATUT_VALIDATION_BO) AS STATUT_VALIDATION_BO,
trim(A.MOTIF_REJET_BO) AS MOTIF_REJET_BO,
trim(A.DATE_VALIDATION_BO) AS DATE_VALIDATION_BO,
trim(A.LOGIN_VALIDATEUR_BO) AS LOGIN_VALIDATEUR_BO,
trim(A.CANAL_VALIDATEUR_BO) AS CANAL_VALIDATEUR_BO,
trim(A.TYPE_ABONNEMENT) AS TYPE_ABONNEMENT,
trim(A.CSMODDATE) AS CSMODDATE,
case when A.msisdn is null or B.msisdn is null then nvl(A.CCMODDATE,B.CCMODDATE) else trim(B.CCMODDATE) end  AS CCMODDATE,
case when A.msisdn is null or B.msisdn is null then nvl(A.COMPTE_CLIENT_STRUCTURE,B.COMPTE_CLIENT_STRUCTURE) else trim(B.COMPTE_CLIENT_STRUCTURE) end  AS COMPTE_CLIENT_STRUCTURE,
case when A.msisdn is null or B.msisdn is null then nvl(A.NOM_STRUCTURE,B.NOM_STRUCTURE) else trim(B.NOM_STRUCTURE) end  AS NOM_STRUCTURE,
case when A.msisdn is null or B.msisdn is null then nvl(A.NUMERO_REGISTRE_COMMERCE,B.NUMERO_REGISTRE_COMMERCE) else trim(B.NUMERO_REGISTRE_COMMERCE) end  AS NUMERO_REGISTRE_COMMERCE,
case when A.msisdn is null or B.msisdn is null then nvl(A.NUMERO_PIECE_REPRESENTANT_LEGA,B.NUMERO_PIECE_REPRESENTANT_LEGAL) else trim(B.NUMERO_PIECE_REPRESENTANT_LEGAL) end  AS NUMERO_PIECE_REPRESENTANT_LEGA,
trim(A.IMEI) AS IMEI,
trim(A.STATUT_DEROGATION) AS STATUT_DEROGATION,
trim(A.REGION_ADMINISTRATIVE) AS REGION_ADMINISTRATIVE,
trim(A.REGION_COMMERCIALE) AS REGION_COMMERCIALE,
trim(A.SITE_NAME) AS SITE_NAME,
trim(A.VILLE_SITE) AS VILLE_SITE,
trim(A.OFFRE_COMMERCIALE) AS OFFRE_COMMERCIALE,
trim(A.TYPE_CONTRAT) AS TYPE_CONTRAT,
trim(A.SEGMENTATION) AS SEGMENTATION,
trim(A.DATE_SOUSCRIPTION) AS DATE_SOUSCRIPTION,
trim(A.DATE_CHANGEMENT_STATUT) AS DATE_CHANGEMENT_STATUT,
trim(A.VILLE_STRUCTURE) AS VILLE_STRUCTURE,
trim(A.QUARTIER_STRUCTURE) AS QUARTIER_STRUCTURE,
case when A.msisdn is null or B.msisdn is null then nvl(A.RAISON_STATUT,B.RAISON_STATUT) else trim(B.RAISON_STATUT) end  AS RAISON_STATUT,
case when A.msisdn is null or B.msisdn is null then nvl(A.PRENOM,B.PRENOM) else trim(B.PRENOM) end  AS PRENOM,
case when A.msisdn is null or B.msisdn is null then nvl(A.NOM,B.NOM) else trim(B.NOM) end  AS NOM,
trim(A.CUSTOMER_ID) AS CUSTOMER_ID,
trim(A.CONTRACT_ID) AS CONTRACT_ID,
case when A.msisdn is null or B.msisdn is null then nvl(A.COMPTE_CLIENT,B.COMPTE_CLIENT) else trim(B.COMPTE_CLIENT) end  AS COMPTE_CLIENT,
trim(A.PLAN_LOCALISATION) AS PLAN_LOCALISATION,
trim(A.CONTRAT_SOUCRIPTION) AS CONTRAT_SOUCRIPTION,
trim(A.ACCEPTATION_CGV) AS ACCEPTATION_CGV,
trim(A.DISPONIBILITE_SCAN) AS DISPONIBILITE_SCAN,
case when A.msisdn is null or B.msisdn is null then nvl(A.NOM_TUTEUR,trim(nvl(B.nom_tuteur,'') || ' ' || nvl(B.prenom_tuteur,'')))
     else trim(nvl(B.nom_tuteur,'') || ' ' || nvl(B.prenom_tuteur,''))
end AS NOM_TUTEUR,
case when A.msisdn is null or B.msisdn is null then nvl(A.PRENOM_TUTEUR,B.PRENOM_TUTEUR) else trim(B.PRENOM_TUTEUR) end  AS PRENOM_TUTEUR,
case when A.msisdn is null or B.msisdn is null then nvl(A.DATE_NAISSANCE_TUTEUR,B.DATE_NAISSANCE_TUTEUR) else trim(B.DATE_NAISSANCE_TUTEUR) end  AS DATE_NAISSANCE_TUTEUR,
case when A.msisdn is null or B.msisdn is null then nvl(A.NUMERO_PIECE_TUTEUR,B.NUMERO_PIECE_TUTEUR) else trim(B.NUMERO_PIECE_TUTEUR) end  AS NUMERO_PIECE_TUTEUR,
trim(A.DATE_EXPIRATION_TUTEUR) AS DATE_EXPIRATION_TUTEUR,
case when A.msisdn is null or B.msisdn is null then nvl(A.ID_TYPE_PIECE_TUTEUR,B.ID_TYPE_PIECE_TUTEUR) else trim(B.ID_TYPE_PIECE_TUTEUR) end  AS ID_TYPE_PIECE_TUTEUR,
trim(A.TYPE_PIECE_TUTEUR) AS TYPE_PIECE_TUTEUR,
trim(A.ADRESSE_TUTEUR) AS ADRESSE_TUTEUR,
trim(A.IDENTIFICATEUR) AS IDENTIFICATEUR,
trim(A.LOCALISATION_IDENTIFICATEUR) AS LOCALISATION_IDENTIFICATEUR,
trim(A.PROFESSION) AS PROFESSION
FROM (select * from CDR.SPARK_IT_BDI_TMP where original_file_date=DATE_SUB('###SLICE_VALUE###',1)) A
FULL OUTER JOIN
(SELECT * FROM CDR.SPARK_it_bdi_crm_b2c where original_file_date = '###SLICE_VALUE###') B
ON ( substr(trim(A.MSISDN),-9,9) = substr(trim(B.MSISDN),-9,9))